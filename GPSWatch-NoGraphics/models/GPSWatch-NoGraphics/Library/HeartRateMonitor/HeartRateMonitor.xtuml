-- BP 7.1.6 content: Component syschar: 3 persistence-version: 7.1.6

INSERT INTO C_C
	VALUES ("22eb9a2c-7c47-4cd9-a6d5-7f570d5af4af",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'HeartRateMonitor',
	'Simulates a pulse monitor hardware/firmware. This component is only behavioral and included for testing purposes.',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'');
INSERT INTO C_PO
	VALUES ("47297515-a577-487a-8671-dc0999a379ea",
	"22eb9a2c-7c47-4cd9-a6d5-7f570d5af4af",
	'HR',
	0,
	0);
INSERT INTO C_IR
	VALUES ("1dc1ab7f-f65c-453b-b0ad-7f5631e3ad76",
	"24c9a13a-1135-4a78-a503-9a85fb05f495",
	"00000000-0000-0000-0000-000000000000",
	"47297515-a577-487a-8671-dc0999a379ea");
INSERT INTO C_P
	VALUES ("1dc1ab7f-f65c-453b-b0ad-7f5631e3ad76",
	'HeartRateProvider',
	'Unnamed Interface',
	'',
	'HeartRateMonitor::HR::HeartRateProvider');
INSERT INTO SPR_PEP
	VALUES ("7fd6ed1b-66c0-4bec-aead-062593926b6f",
	"aa8b4e07-0f8c-431f-90f7-fda756454bc2",
	"1dc1ab7f-f65c-453b-b0ad-7f5631e3ad76");
INSERT INTO SPR_PS
	VALUES ("7fd6ed1b-66c0-4bec-aead-062593926b6f",
	'heartRateChanged',
	'',
	'',
	1);
INSERT INTO C_EP_PROXY
	VALUES ("aa8b4e07-0f8c-431f-90f7-fda756454bc2",
	"24c9a13a-1135-4a78-a503-9a85fb05f495",
	-1,
	'heartRateChanged',
	'',
	'../../HeartRateMonitorInterfaces/HeartRateProvider/HeartRateProvider.xtuml');
INSERT INTO SPR_PEP
	VALUES ("b2a8faa0-bbce-4dbe-a20f-78167d5ce43c",
	"9d6b897f-52d7-41a7-808e-09426d405f32",
	"1dc1ab7f-f65c-453b-b0ad-7f5631e3ad76");
INSERT INTO SPR_PS
	VALUES ("b2a8faa0-bbce-4dbe-a20f-78167d5ce43c",
	'registerListener',
	'',
	'',
	1);
INSERT INTO C_EP_PROXY
	VALUES ("9d6b897f-52d7-41a7-808e-09426d405f32",
	"24c9a13a-1135-4a78-a503-9a85fb05f495",
	-1,
	'registerListener',
	'',
	'../../HeartRateMonitorInterfaces/HeartRateProvider/HeartRateProvider.xtuml');
INSERT INTO SPR_PEP
	VALUES ("1b99b29d-ded2-4c65-a9ee-0bb1930ddeaf",
	"29bedeef-7696-4fd3-8d24-b99dd9e06510",
	"1dc1ab7f-f65c-453b-b0ad-7f5631e3ad76");
INSERT INTO SPR_PS
	VALUES ("1b99b29d-ded2-4c65-a9ee-0bb1930ddeaf",
	'unregisterListener',
	'',
	'',
	1);
INSERT INTO C_EP_PROXY
	VALUES ("29bedeef-7696-4fd3-8d24-b99dd9e06510",
	"24c9a13a-1135-4a78-a503-9a85fb05f495",
	-1,
	'unregisterListener',
	'',
	'../../HeartRateMonitorInterfaces/HeartRateProvider/HeartRateProvider.xtuml');
INSERT INTO C_I_PROXY
	VALUES ("24c9a13a-1135-4a78-a503-9a85fb05f495",
	"00000000-0000-0000-0000-000000000000",
	'HeartRateProvider',
	'',
	'../../HeartRateMonitorInterfaces/HeartRateProvider/HeartRateProvider.xtuml');
INSERT INTO PE_PE
	VALUES ("22eb9a2c-7c47-4cd9-a6d5-7f570d5af4af",
	1,
	"91416729-ea3a-45c0-ac4f-392f31627711",
	"00000000-0000-0000-0000-000000000000",
	2);
INSERT INTO EP_PKG_PROXY
	VALUES ("91416729-ea3a-45c0-ac4f-392f31627711",
	"80afc8ce-7ef5-4cb7-9e96-f31db674dbfc",
	"80afc8ce-7ef5-4cb7-9e96-f31db674dbfc",
	'Library',
	'// ########## START OAL_1 ##########
// always initialize data
self.currentLocation.longitude = 0.0;
self.currentLocation.latitude  = 0.0;
self.currentLocation.speed     = 0.0;
self.interval                  = 2000000;

LOG::LogInfo(message: "Location listener registered.");

 // start timer based on requested interval
create event instance timeout of GPS3:timeout() to self;
self.timer = TIM::timer_start_recurring(event_inst: timeout, microseconds: self.interval);
// ########### END OAL_1 ###########



// ########## START OAL_2 ##########
// prepare signal data with some dummy values that change over time
self.currentLocation.longitude = self.currentLocation.longitude + 2.0;
self.currentLocation.latitude  = self.currentLocation.latitude  + 3.0;
self.currentLocation.speed     = 
                                (self.currentLocation.latitude - 
                                 self.currentLocation.longitude) / 5.0;

// pass the new location to client component
send LocationProvider::locationUpdate(location: self.currentLocation);
// ########### END OAL_2 ###########



// ########## START OAL_3 ##########
res = TIM::timer_cancel(timer_inst_ref: self.timer);
// ########### END OAL_3 ###########



// ########## START OAL_4 ##########
select any gps from instances of GPS;
if (empty gps)
  // asynchronously create a new instance of GPS
  generate GPS1:registerListener() to GPS creator;
end if;
// ########### END OAL_4 ###########


// ########## START OAL_5 ##########
// forward message to single instance of GPS
select any gps from instances of GPS;
if (not empty gps)
  generate GPS2:unregisterListener() to gps;
end if;
// ########### END OAL_5 ###########


// ########## START OAL_6 ##########
// create an instance of the workout timer if it does not exist
select any workoutTimer from instances of WorkoutTimer;
if (empty workoutTimer)
  create object instance workoutTimer of WorkoutTimer;
end if;

// forward message to the single instance of WorkoutTimer 
generate WorkoutTimer1:startStopPressed() to workoutTimer;
// ########### END OAL_6 ###########



// ########## START OAL_7 ##########
// print the new location to the console
LOG::LogInfo(message: "location updated: ");
LOG::LogReal(message: "longitude", r: param.location.longitude);
LOG::LogReal(message: "latitude",  r: param.location.latitude );
LOG::LogReal(message: "speed",     r: param.location.speed    );
// ########### END OAL_7 ###########
',
	0,
	'../Library.xtuml');
