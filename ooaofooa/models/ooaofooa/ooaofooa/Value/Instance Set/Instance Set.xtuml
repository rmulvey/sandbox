-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("fddc2212-995d-48cd-a9a5-06efe4541efd",
	'Instance Set',
	817,
	'V_INS',
	'This class represents a set of instances.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("339ef1d6-11da-453e-9509-f14087d73a07",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	'isEmpty',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Value:Instance Set.isEmpty()
select one body related by self->V_VAR[R814]->ACT_BLK[R823]->ACT_ACT[R601];
//Since there can be many local values associated with this instance handle, get find the right one for this stack frame. 
    
//Grab the stack
select any stack_frame from instances of I_STF where (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
	//Invalid stack frame ID!
	pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.getValue: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
	select any stack from instances of I_STACK;
	select one stack_frame related by stack->I_STF[R2929];
end if;

// Set value to this block with the right type so we can use it later.  The value here is useless.
select any local_ref from instances of L_LCR;

// Get all of the block in stack frames that exist for the stack frame
select many block_in_stack_frames related by stack_frame->I_BSF[R2923];
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any local_ref related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == self.Var_ID;
  if (not_empty local_ref)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame

    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

if (not_empty local_ref)
  select any inst related by local_ref->L_LCL[R3001]->RV_RVL[R3306]->
                       RV_SMV[R3300]->RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];  
  return empty inst;	
end if;

// Default case, returning true indicating that the set is empty
return true;',
	1,
	'',
	"7a43bda6-5a5c-41a3-bb1d-769501e01556");
INSERT INTO O_TPARM
	VALUES ("78246286-8634-464c-8d55-d382722a381e",
	"339ef1d6-11da-453e-9509-f14087d73a07",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("7a43bda6-5a5c-41a3-bb1d-769501e01556",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	'getCardinality',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'// Instance Set.getCardinality()
select one body related by self->V_VAR[R814]->ACT_BLK[R823]->ACT_ACT[R601];
//Grab the stack
select any stack_frame from instances of I_STF where
                              (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
	//Invalid stack frame ID!
	pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Instance Set.getCardinality: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
	select any stack from instances of I_STACK;
	select one stack_frame related by stack->I_STF[R2929];
end if;

// Get all of the block in stack frames that exist for the stack frame
select many block_in_stack_frames related by stack_frame->I_BSF[R2923];
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where
  // we are executing for the transient variable we want to assign
  select any instRef related by block_in_stack_frame->L_LCL[R3000]->
                              L_LCR[R3001] where selected.Var_ID == self.Var_ID;
  if (not_empty instRef)
    // We found the 1 local reference in this stack frame for this instance
    // handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that
    // reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language
    // definition that existed in November of 2005. If the language is changed
    // to become a strongly typed language where a user can define a variable
    // in an inner block with the same name as something that exists in the
    // outer block, then this implementation will not work because it does not
    // walk out of the current block.
    select many insts related by instRef->
                  L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
    return cardinality insts;
  end if;
end for;
// Error should never get here
pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Instance Set.getCardinality: No instance set reference found for cardinality operator, returning empty",path:pathMsg);
return 0;
',
	1,
	'',
	"ec406ff0-936e-4783-9bdf-08111d92594a");
INSERT INTO O_TPARM
	VALUES ("9675e1a8-5bc1-4ec4-8836-7da2b01193d6",
	"7a43bda6-5a5c-41a3-bb1d-769501e01556",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("ec406ff0-936e-4783-9bdf-08111d92594a",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	'dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one clazz related by self->O_OBJ[R819];
if (not_empty clazz)
  unrelate self from clazz across R819;
end if;
select many locRefs related by self->L_LCR[R3003];
for each locRef in locRefs
  unrelate self from locRef across R3003;
  locRef.dispose();
end for;
delete object instance self;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_REF
	VALUES ("fddc2212-995d-48cd-a9a5-06efe4541efd",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"eebf4269-d945-4687-94a4-ece03c805cc9",
	"3ed73e1c-4460-4eda-9df4-a1e6c2578616",
	"442e95f2-d458-4d95-8104-06462da96330",
	"b091c918-ddd8-4941-b8e7-c21774149050",
	"4a5b1b6c-787a-4edb-ab28-fa595cf966f2",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R814');
INSERT INTO R_RGO_PROXY
	VALUES ("fddc2212-995d-48cd-a9a5-06efe4541efd",
	"eebf4269-d945-4687-94a4-ece03c805cc9",
	"3ed73e1c-4460-4eda-9df4-a1e6c2578616",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"eebf4269-d945-4687-94a4-ece03c805cc9",
	"442e95f2-d458-4d95-8104-06462da96330",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("b091c918-ddd8-4941-b8e7-c21774149050",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	'../Variable/Variable.xtuml');
INSERT INTO O_ATTR
	VALUES ("b091c918-ddd8-4941-b8e7-c21774149050",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	"00000000-0000-0000-0000-000000000000",
	'Var_ID',
	'

',
	'',
	'Var_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("fddc2212-995d-48cd-a9a5-06efe4541efd",
	"62b192ed-f270-47e4-8624-0b8083c5e152",
	0,
	"17d86b5f-0053-47ae-8312-48e5145617f0",
	"4f372a2d-3c91-4f90-a6fe-86fe81c6086a",
	"10579574-cf11-4c84-b4ba-8e14d6e1c3a9",
	"3af2e7e0-58a5-4575-805d-ccb805f89efc",
	"0edfc801-2768-4d63-94f8-7ec5576e26f5",
	"92872a90-fa58-4d3e-8a84-7b9cb9a61641",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Model Class',
	'Obj_ID',
	'R819.''refers to''');
INSERT INTO R_RGO_PROXY
	VALUES ("fddc2212-995d-48cd-a9a5-06efe4541efd",
	"4f372a2d-3c91-4f90-a6fe-86fe81c6086a",
	"10579574-cf11-4c84-b4ba-8e14d6e1c3a9",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("17d86b5f-0053-47ae-8312-48e5145617f0",
	"62b192ed-f270-47e4-8624-0b8083c5e152",
	0,
	"4f372a2d-3c91-4f90-a6fe-86fe81c6086a",
	"3af2e7e0-58a5-4575-805d-ccb805f89efc",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("0edfc801-2768-4d63-94f8-7ec5576e26f5",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("0edfc801-2768-4d63-94f8-7ec5576e26f5",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	"b091c918-ddd8-4941-b8e7-c21774149050",
	'Obj_ID',
	'',
	'',
	'Obj_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"fddc2212-995d-48cd-a9a5-06efe4541efd");
INSERT INTO O_OIDA
	VALUES ("b091c918-ddd8-4941-b8e7-c21774149050",
	"fddc2212-995d-48cd-a9a5-06efe4541efd",
	0,
	'Var_ID');
INSERT INTO O_ID
	VALUES (1,
	"fddc2212-995d-48cd-a9a5-06efe4541efd");
INSERT INTO O_ID
	VALUES (2,
	"fddc2212-995d-48cd-a9a5-06efe4541efd");
INSERT INTO PE_PE
	VALUES ("fddc2212-995d-48cd-a9a5-06efe4541efd",
	1,
	"8b9e8a8c-7fd0-4ca9-b025-f7949d99c0c5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("8b9e8a8c-7fd0-4ca9-b025-f7949d99c0c5",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Value',
	'This subsystem formalizes the concepts of values (r-values) and variables 
(l-values). It also captures the concept of an actual parameter.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	800,
	'../Value.xtuml');
