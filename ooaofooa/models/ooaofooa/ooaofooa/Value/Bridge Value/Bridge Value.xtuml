-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	'Bridge Value',
	814,
	'V_BRV',
	'This class represents the value returned by a bridge invocation.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("fbb7bf5c-e48f-4e36-8761-b227dcc6a78c",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one brg related by self->S_BRG[R828];
if ( not empty brg )
  unrelate self from brg across R828;
end if;

select many parm_set related by self->V_PAR[R810];
for each parm in parm_set 
  unrelate self from parm across R810;
  parm.dispose();
end for;
delete object instance self;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("8b5ce26b-db32-40e3-80e1-78bcdb0947ae",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	'getValue',
	'Executes its bridge function and returns the result.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// (V_BRV) Value:Bridge Value.getValue()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];

select one brg related by self->S_BRG[R828];
select one ee related by brg->S_EE[R19];
                                   
// Get the top stack frame
select any top_stack_frame from instances of I_STF where
                                selected.Stack_Frame_ID == param.stack_frame_id;
if (empty top_stack_frame)
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Invocation.execute: Could not get stack frame to retrieve parameter value.",path:pathMsg);  
end if;

// Execute the bridge
select one body related by brg->ACT_BRB[R697]->ACT_ACT[R698];
select any statement related by body->ACT_BLK[R601]->ACT_SMT[R602];
select many args related by self->V_PAR[R810];    
select any callResult related by top_stack_frame->I_VSF[R2951] where
                                             selected.Value_ID == self.Value_ID;
if (not_empty statement)

  // Setup the parameter values within the newly created stack frame
  // We discard the result because it just tells us if we''re going yet deeper
  // in the call tree. This can happen if a parameter is itself a call, but
  // we do not need to do anything different in that case.
  discard = self.setupParameterValues(stack_frame_id: param.stack_frame_id,
                                    target_stack_frame_id:GD::NULL_UNIQUE_ID());
  return;

else
  if(not ee.isRealized)
	pathMsg = "<No Path Available - Empty instance>";
	if (not_empty body)
	  pathMsg = body.getPath();
	end if;
	USER::logError(msg:"External Entity: " + ee.Name
						    + " is modeled and the bridge: "
            + brg.Name + " has no OAL to execute.  Returning default value.",
						path:pathMsg);
    select one dt related by brg->S_DT[R20];
    // Return the default result
    create object instance callRtVal of RV_RVL;
    callRtVal.createSimpleValue();
    relate callRtVal to callResult across R3305;
    callRtVal.setValue(value:dt.getDefaultValue());
    // remove all intermediate values from the stack
    for each arg in args
      top_stack_frame.popValue(value_id:arg.Value_ID);
    end for;
    return;
  end if;
  // We could not find OAL to execute, try to execute an automatically wired
  // bridge instead.

  // Select the parameter and arguments for this bridge invocation
  select many parms related by brg->S_BPARM[R21];
  for each parm in parms
    for each arg in args
      if (parm.Name == arg.Name)
        if (parm.By_Ref == 0)  // by value
          select one act_val related by arg->V_VAL[R800];
          act_val.computeValue(stack_frame_id: top_stack_frame.Stack_Frame_ID);
          select any result related by top_stack_frame->I_VSF[R2951] where
                                          selected.Value_ID == act_val.Value_ID;
          select one rtVal related by result->RV_RVL[R3305];
          if (empty rtVal)
            // Result requires computation.
            // Return and let the new stack frame execute
            return;    
          end if;
        end if;
      end if;
    end for;
  end for;
  // Check for wiring
  select one function related by brg->S_AW[R3200]->S_SYNC[R3201];
  if (not_empty function)

      // Found a matching function name in the domain, now we need to 
      // setup the stack frame and parameters and execute it.
      select one func_body related by function->ACT_FNB[R695]->ACT_ACT[R698];

      temp_stack_id = func_body.createStackForBridge();
      sf_id = func_body.createStackFrameForBridge(
                      stack_frame_id_caller: top_stack_frame.Stack_Frame_ID);

      success = self.setupParameterValues(
                        target_stack_frame_id: sf_id,
                               stack_frame_id: top_stack_frame.Stack_Frame_ID);
      if (success)
        //func_body.execute(stack_frame_id: sf_id);      
      end if;

      func_body.deleteStackFrameForBridge(stack_id: temp_stack_id);
      func_body.deleteStackForBridge(stack_id: temp_stack_id); 

  end if;    

  // We could not find OAL or a wired domain function to execute, try to execute  
  // realized code instead.  
  
  // Set up the bridge arguments 
  
  VM::resetValues();
  
  select one sys related by ee->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];

  // set the value in the user-defined order
  select any orderedParm related by brg->S_BPARM[R21]
                     where (selected.Previous_BParm_ID == GD::NULL_UNIQUE_ID());
  while(not_empty orderedParm)
    for each arg in args
      if (orderedParm.Name == arg.Name)
        select one cval related by arg->V_VAL[R800];
        select one ctype related by orderedParm->S_DT[R22];
        select any result related by top_stack_frame->I_VSF[R2951] where
                                             selected.Value_ID == cval.Value_ID;
        select one rtVal related by result->RV_RVL[R3305];
        isByRef = false;
        if (orderedParm.By_Ref == 1)
          isByRef = true;
          // TODO By Reference arguments probably don''t work, this is a hack
          newValue = GD::convertToBPDataType(type: ctype.Name, value:
                                                                 rtVal.getValue());
          cval.setValue(stack_frame_id: top_stack_frame.Stack_Frame_ID,
                               value: newValue, member_id:GD::NULL_UNIQUE_ID());
        end if;

        VM::addArgumentValue(value:rtVal.getValue(), type:ctype.Name, byRef: isByRef);
      end if;
    end for;
    select one orderedParm related by orderedParm->S_BPARM[R55.''precedes''];
  end while;

  // Look for a user''s class that matches the EE name

  VM::setUserClassPath(System_ID:sys.Sys_ID);
  success = VM::loadClass(system_id:sys.Sys_ID, name:ee.Key_Lett);
  if (success)
    // Execute a method matching the bridge
    success = VM::execute(stack_frame_id:param.stack_frame_id, name: brg.Name);
    if (success)    
      // Now convert any by ref parameters back to the original data type
      for each parm in parms
        for each arg in args
          if (parm.By_Ref == 1 and parm.Name == arg.Name)
            select one cval related by arg->V_VAL[R800];
            select one ctype related by parm->S_DT[R22];

            select any result related by top_stack_frame->I_VSF[R2951] where
                                             selected.Value_ID == cval.Value_ID;
            select one rtVal related by result->RV_RVL[R3305];
            select one udt related by ctype->S_UDT[R17]; // is it core?
            if (not_empty udt)// if not, check user data type
              pe_id = udt.getCoreType();
              select any dt_pe from instances of PE_PE
                                           where (selected.Element_ID == pe_id);
              select one ctype related by dt_pe->S_DT[R8001];
            end if;
            newValue = GD::convertFromBPDataType(type: ctype.Name, value:
                                                              rtVal.getValue());
            cval.setValue(stack_frame_id: top_stack_frame.Stack_Frame_ID,
                               value: newValue, member_id:GD::NULL_UNIQUE_ID());
          end if;
        end for;
      end for;   
      // Return the result
      create object instance callRtVal of RV_RVL;
      callRtVal.createSimpleValue();
      relate callRtVal to callResult across R3305;
      callRtVal.setValue(value:VM::getResult());
      // remove all intermediate values from the stack
      for each arg in args
        top_stack_frame.popValue(value_id:arg.Value_ID);
      end for;
      return;
    end if;
  end if;
  for each arg in args
    top_stack_frame.popValue(value_id:arg.Value_ID);
  end for;
end if;',
	1,
	'',
	"fbb7bf5c-e48f-4e36-8761-b227dcc6a78c");
INSERT INTO O_TPARM
	VALUES ("2eb04835-8ab8-4b75-bcfc-0d4f3261ee13",
	"8b5ce26b-db32-40e3-80e1-78bcdb0947ae",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8f8f0efc-8f9d-455e-9e44-3db898736dbe",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	'setupParameterValues',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Value:Bridge Value.setupParameterValues
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select one brg related by self->S_BRG[R828];
select many args related by self->V_PAR[R810];
// Grab the stack frame(should be the new top stack frame)
select any stack_frame from instances of I_STF where
                                selected.Stack_Frame_ID == param.stack_frame_id;
if (empty stack_frame)
  //Invalid stack frame ID!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Value.setupParameterValues: " +
                  "Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
  select any stack from instances of I_STACK;
  select one new_stack_frame related by stack->I_STF[R2929];
end if;
// Grab the stack as well
select one stack related by stack_frame->I_STACK[R2929];
if (empty stack)
  //Invalid stack frame ID!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Value.setupParameterValues: " +
                               "Failure to retieve stack. Using random stack.",path:pathMsg);
  select any stack from instances of I_STACK;
  select one new_stack_frame related by stack->I_STF[R2929];
end if;
select one outer_block related by brg->ACT_BRB[R697]->
                                                   ACT_ACT[R698]->ACT_BLK[R666];
if (not_empty outer_block)
  for each arg in args
    // Seach for a bridge parameter with the same name as the actual parameter
    select any bridge_param related by brg->S_BPARM[R21] where
                                                      selected.Name == arg.Name;  
    if (empty bridge_param)
      pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Value.setupParameterValues: " +
                               "did not find a corresponding bridge parameter",path:pathMsg);
    else
      // We have found the matching bridge parameter and actual parameter
      // Now set the value of the parameter value related to the bridge
      // parameter to the actual parameter''s value
      if (bridge_param.By_Ref == 0)  // by value
        select one act_val related by arg->V_VAL[R800];
        act_val.computeValue(stack_frame_id: stack_frame.Stack_Frame_ID);
        select any result related by stack_frame->I_VSF[R2951] where
                                          selected.Value_ID == act_val.Value_ID;
        select one rtVal related by result->RV_RVL[R3305];
        if (empty rtVal)
          // result requires computation. Let the new stack frame execute
          return false;    
        end if;
      end if;
    end if;
  end for;
  // If we get here, all computation of arguments was completed,
  //  prepare for execution of the bridge
  select one body related by brg->ACT_BRB[R697]->ACT_ACT[R698];
  sf = param.target_stack_frame_id; 
  if sf == GD::NULL_UNIQUE_ID();
    sf = body.createStackFrame(stack_id:stack.Stack_ID, enqueue: false,
                     invoking_stack_frame_or_component_id:GD::NULL_UNIQUE_ID());
  end if;
  for each arg in args
    // Create a new local value for each parameter within the new stack frame
    loc_id = outer_block.newLocalValue(stack_frame_id: sf);
    select any local related by outer_block->I_BSF[R2923]->
                               L_LCL[R3000] where (selected.Local_ID == loc_id);    
    select one local_val related by local->L_LVL[R3001];
    // Seach for a bridge parameter with the same name as the actual parameter
    select any bridge_param related by brg->S_BPARM[R21] where
                                                      selected.Name == arg.Name;
    select one act_val related by arg->V_VAL[R800];
    if (not_empty bridge_param and bridge_param.By_Ref == 0)  // by value
      // Find the local value and set it with the actual parameter value
      select any result related by stack_frame->I_VSF[R2951] where
                                          selected.Value_ID == act_val.Value_ID;
      select one rtVal related by result->RV_RVL[R3305];
      create object instance lrtVal of RV_RVL;
      relate lrtVal to local across R3306;
      select one dt related by bridge_param->S_DT[R22];
      relate lrtVal to dt across R3307;
      lrtVal.copyValue(from:rtVal.RuntimeValue_ID);
    else  // assuming by ref
      relate local_val to act_val across R3010;
    end if;
    // Relate the new local value to the bridge parameter so that
    // it can be found when the parameter value is referenced.
    relate bridge_param to local across R3009;
    stack_frame.popValue(value_id:arg.Value_ID);
  end for;
else
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Value.setupParameterValues: " +
                                          "did not find an outer bridge block",path:pathMsg);
end if;
return true;',
	1,
	'',
	"8b5ce26b-db32-40e3-80e1-78bcdb0947ae");
INSERT INTO O_TPARM
	VALUES ("3d1a8dd8-5b2b-4ee0-be0d-f4e0717d71c8",
	"8f8f0efc-8f9d-455e-9e44-3db898736dbe",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("8d450bc0-6eec-4f0f-a3dc-4b21f25ae479",
	"8f8f0efc-8f9d-455e-9e44-3db898736dbe",
	'target_stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3d1a8dd8-5b2b-4ee0-be0d-f4e0717d71c8",
	'');
INSERT INTO O_REF
	VALUES ("b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	0,
	"6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"06497a90-3e1f-4449-b56c-c0400f566edf",
	"aa3e76e7-6370-4c4a-8dcf-ec8955b1c8bb",
	"b8c468d1-d7d3-40b3-85a0-dac116856ce9",
	"6ad051ff-9f25-4794-b30c-5c08471d9e86",
	"98059524-7bda-47ab-bc53-886787047d1b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Value',
	'Value_ID',
	'R801');
INSERT INTO R_RGO_PROXY
	VALUES ("b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"06497a90-3e1f-4449-b56c-c0400f566edf",
	"aa3e76e7-6370-4c4a-8dcf-ec8955b1c8bb",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	0,
	"06497a90-3e1f-4449-b56c-c0400f566edf",
	"b8c468d1-d7d3-40b3-85a0-dac116856ce9",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("6ad051ff-9f25-4794-b30c-5c08471d9e86",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	1,
	'Value_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'../Value/Value.xtuml');
INSERT INTO O_ATTR
	VALUES ("6ad051ff-9f25-4794-b30c-5c08471d9e86",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"00000000-0000-0000-0000-000000000000",
	'Value_ID',
	'',
	'',
	'Value_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d2c333bb-06d5-4840-a62f-40cf4172a2bc",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_BATTR
	VALUES ("d2c333bb-06d5-4840-a62f-40cf4172a2bc",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_ATTR
	VALUES ("d2c333bb-06d5-4840-a62f-40cf4172a2bc",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"ccae9ef8-a515-4ace-aa14-4e7bf91b09ff",
	'ParmListOK',
	'This attribute is true if there were no errors in parsing the bridge invocation''s parameter list.
--------------------------------------------------------------------------------
Bridge:ALS',
	'',
	'ParmListOK',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("29a3f80e-730e-4e9e-86c7-0b5607876d4e",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_BATTR
	VALUES ("29a3f80e-730e-4e9e-86c7-0b5607876d4e",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_ATTR
	VALUES ("29a3f80e-730e-4e9e-86c7-0b5607876d4e",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"d2c333bb-06d5-4840-a62f-40cf4172a2bc",
	'externalEntityKeyLettersLineNumber',
	'',
	'',
	'externalEntityKeyLettersLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("319540ba-3ed1-43d0-8e3c-4236c4d99b92",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_BATTR
	VALUES ("319540ba-3ed1-43d0-8e3c-4236c4d99b92",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_ATTR
	VALUES ("319540ba-3ed1-43d0-8e3c-4236c4d99b92",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"29a3f80e-730e-4e9e-86c7-0b5607876d4e",
	'externalEntityKeyLettersColumn',
	'',
	'',
	'externalEntityKeyLettersColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	0,
	"7f087367-409e-4293-a6d5-4963f035bc11",
	"107f4d58-ea5c-4f86-82c8-726f5954579a",
	"529d8eab-dcb1-4ee7-b377-7f3ae7be3ea0",
	"d1790194-0813-411e-a6a2-56fcf3a2c8ae",
	"ccae9ef8-a515-4ace-aa14-4e7bf91b09ff",
	"f189bbab-f599-408d-8a0d-07393b0acafa",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Bridge',
	'Brg_ID',
	'R828');
INSERT INTO R_RGO_PROXY
	VALUES ("b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"107f4d58-ea5c-4f86-82c8-726f5954579a",
	"529d8eab-dcb1-4ee7-b377-7f3ae7be3ea0",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	0,
	"107f4d58-ea5c-4f86-82c8-726f5954579a",
	"d1790194-0813-411e-a6a2-56fcf3a2c8ae",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("ccae9ef8-a515-4ace-aa14-4e7bf91b09ff",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	1,
	'Brg_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'../../Domain/Bridge/Bridge.xtuml');
INSERT INTO O_ATTR
	VALUES ("ccae9ef8-a515-4ace-aa14-4e7bf91b09ff",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	"6ad051ff-9f25-4794-b30c-5c08471d9e86",
	'Brg_ID',
	'
',
	'',
	'Brg_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_OIDA
	VALUES ("6ad051ff-9f25-4794-b30c-5c08471d9e86",
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	0,
	'Value_ID');
INSERT INTO O_ID
	VALUES (1,
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO O_ID
	VALUES (2,
	"b3f22019-9e8f-4d79-940c-ebbd5daab3bb");
INSERT INTO PE_PE
	VALUES ("b3f22019-9e8f-4d79-940c-ebbd5daab3bb",
	1,
	"8b9e8a8c-7fd0-4ca9-b025-f7949d99c0c5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("8b9e8a8c-7fd0-4ca9-b025-f7949d99c0c5",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Value',
	'This subsystem formalizes the concepts of values (r-values) and variables 
(l-values). It also captures the concept of an actual parameter.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	800,
	'../Value.xtuml');
