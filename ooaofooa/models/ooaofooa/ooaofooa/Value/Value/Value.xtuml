-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'Value',
	800,
	'V_VAL',
	'A value (r-value) may be assigned to a variable, attribute or parameter
(l-values). There are many different kinds of value in a model. This class
captures this observation in a supertype.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("16ea7c7b-e7e0-44e7-b981-bbb882cf786b",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Value.dispose()
select one val_blk related by self->ACT_BLK[R826];
if ( not_empty val_blk )
  unrelate self from val_blk across R826;
end if;

select one val_dt related by self->S_DT[R820];
if ( not_empty val_dt )
  unrelate self from val_dt across R820;
end if;

select one lin related by self->V_LIN[R801];
if ( not_empty lin )
  unrelate lin from self across R801;
  delete object instance lin;
end if;

select one lbo related by self->V_LBO[R801];
if ( not_empty lbo )
  unrelate lbo from self across R801;
  delete object instance lbo;
end if;

select one lst related by self->V_LST[R801];
if ( not_empty lst )
  unrelate lst from self across R801;
  delete object instance lst;
end if;

select one lrl related by self->V_LRL[R801];
if ( not_empty lrl )
  unrelate lrl from self across R801;
  delete object instance lrl;
end if;

select one tvl related by self->V_TVL[R801];
if ( not_empty tvl )
  select one tvar related by tvl->V_VAR[R805];
  if ( not_empty tvar )
    unrelate tvl from tvar across R805;
  end if;
  unrelate tvl from self across R801;
  delete object instance tvl;
end if;

select one bin related by self->V_BIN[R801];
if ( not_empty bin )
  unrelate bin from self across R801;
  bin.dispose();
end if;

select one unary related by self->V_UNY[R801];
if ( not_empty unary )
  unrelate unary from self across R801;
  unary.dispose();
end if;

select one attr_val related by self->V_AVL[R801];
if ( not_empty attr_val )
  unrelate attr_val from self across R801;
  attr_val.dispose();
end if;

select one len related by self->V_LEN[R801];
if ( not_empty len )
  select one enum related by len->S_ENUM[R824];
  if ( not_empty enum )
    unrelate len from enum across R824;
  end if;
  unrelate len from self across R801;
  delete object instance len;
end if;

select one slr related by self->V_SLR[R801];
if ( not_empty slr )
  unrelate slr from self across R801;
  slr.dispose() ;
end if;

select one irf related by self->V_IRF[R801];
if ( not_empty irf )
  select one tvar related by irf->V_VAR[R808];
  if ( not_empty tvar )
    unrelate irf from tvar across R808;
  end if;
  unrelate irf from self across R801;
  delete object instance irf;
end if;

select one isr related by self->V_ISR[R801];
if ( not_empty isr )
  select one tvar related by isr->V_VAR[R809];
  if ( not_empty tvar )
    unrelate isr from tvar across R809;
  end if;
  unrelate isr from self across R801;
  delete object instance isr;
end if;

select one fnc related by self->V_FNV[R801];
if ( not_empty fnc )
  unrelate fnc from self across R801;
  fnc.dispose() ;
end if;

select one brv related by self->V_BRV[R801];
if ( not_empty brv )
  unrelate brv from self across R801;
  brv.dispose() ;
end if;

select one trv related by self->V_TRV[R801];
if ( not_empty trv )
  unrelate trv from self across R801;
  trv.dispose() ;
end if;

select one pvl related by self->V_PVL[R801];
if ( not_empty pvl )
  unrelate pvl from self across R801;
  pvl.dispose() ;
end if;

select one edv related by self->V_EDV[R801];
if ( not_empty edv )
  unrelate edv from self across R801;
  edv.dispose() ;
end if;

select one mvl related by self->V_MVL[R801];
if (not_empty mvl)
  unrelate mvl from self across R801;
  mvl.dispose();
end if;

select one aer related by self->V_AER[R801];
if (not_empty aer)
  unrelate self from aer across R801;
  aer.dispose();
end if;

select one alv related by self->V_ALV[R801];
if (not_empty alv)
  unrelate self from alv across R801;
  alv.dispose();
end if;

select one msv related by self->V_MSV[R801];
if not_empty msv
  unrelate self from msv across R801;
  msv.dispose();
end if;
                             
select one scv related by self->V_SCV[R801];
if not_empty scv
  unrelate self from scv across R801;
  scv.dispose();
end if;
// clean up any leftover references
select one atm related by self->ACT_AI[R689];
if (not_empty atm)
  unrelate self from atm across R689;
end if;

select one alv related by self->V_ALV[R840];
if (not_empty alv)
  unrelate self from alv across R840;
end if;

select one aer related by self->V_AER[R838];
if (not_empty aer)
  unrelate self from aer across R838;
end if;

select one aer related by self->V_AER[R839];
if (not_empty aer)
  unrelate self from aer across R839;
end if;

select one mvl related by self->V_MVL[R837];
if not_empty mvl
  unrelate self from mvl across R837;
end if;

select one parm related by self->V_PAR[R800];
if ( not_empty parm )
  unrelate parm from self across R800;
end if;

select one bin related by self->V_BIN[R802];
if ( not_empty bin )
  unrelate bin from self across R802;
end if;

select one bin related by self->V_BIN[R803];
if ( not_empty bin )
  unrelate bin from self across R803;
end if;

select one unary related by self->V_UNY[R804];
if ( not_empty unary )
  unrelate unary from self across R804;
end if;

select one childAV related by self->V_AVL[R807];
if (not_empty childAV)
  unrelate self from childAV across R807;
end if;

// Selection subsystem
select one fiw related by self->ACT_FIW[R610];
if ( not_empty fiw )
  unrelate self from fiw across R610;
end if;
select one srw related by self->ACT_SRW[R611];
if ( not_empty srw )
  unrelate self from srw across R611;
end if;
select one sel related by self->ACT_SEL[R613];
if ( not_empty sel )
  unrelate self from sel across R613;
end if;

// Body subsystem
select one if_var related by self->ACT_IF[R625];
if ( not_empty if_var )
  unrelate self from if_var across R625;
end if;
select one whl_var related by self->ACT_WHL[R626];
if ( not_empty whl_var )
  unrelate self from whl_var across R626;
end if;
select one elif_var related by self->ACT_EL[R659];
if ( not_empty elif_var )
  unrelate self from elif_var across R659;
end if;

// Invocation subsystem
select one ret_stmt related by self->ACT_RET[R668];
if ( not_empty ret_stmt )
  unrelate self from ret_stmt across R668;
end if;

// Instance Access subsystem
select one ai_var related by self->ACT_AI[R609];
if ( not_empty ai_var )
  unrelate self from ai_var across R609;
end if;
// Local Subsystem
select one loc_val related by self->L_LVL[R3010];
if (not_empty loc_val)
  unrelate self from loc_val across R3010;
end if;

// Instance
select many visfs related by self->I_VSF[R2978];
for each visf in visfs
  visf.dispose();
end for;

// Event subsystem
select one gpr related by self->E_GPR[R714];
if ( not_empty gpr )
  unrelate self from gpr across R714;
end if;

// Invocation subsystem
select many iops related by self->ACT_IOP[R629];
for each iop in iops
  unrelate self from iop across R629;
end for;
select many sinvs related by self->ACT_SGN[R630];
for each sinv in sinvs
  unrelate self from sinv across R630;
end for;
select many msvs related by self->V_MSV[R851];
for each msv in msvs
  unrelate self from msv across R851;
end for;

delete object instance self;
',
	1,
	'',
	"02d174cb-eaf4-4ece-936e-ad089302a46f");
INSERT INTO O_TFR
	VALUES ("725855a8-615e-4ada-b0a6-9d5a7dc337f6",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'setEndPosition',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one body related by self->ACT_BLK[R826]->ACT_ACT[R601];
if ( self.StartPosition == -1 )
  self.EndPosition = -1;
else
  select one lin related by self->V_LIN[R801];
  if ( not_empty lin )
    self.EndPosition = self.StartPosition + GD::strlen(s: lin.Value) - 1;
    return;
  end if;

  select one lbo related by self->V_LBO[R801];
  if ( not_empty lbo )
    self.EndPosition = self.StartPosition + GD::strlen(s: lbo.Value) - 1;
    return;
  end if;

  select one lst related by self->V_LST[R801];
  if ( not_empty lst )
    self.EndPosition = self.StartPosition + GD::strlen(s: lst.Value); // + 1 - 1
    return;
  end if;

  select one lrl related by self->V_LRL[R801];
  if ( not_empty lrl )
    self.EndPosition = self.StartPosition + GD::strlen(s: lrl.Value) - 1;
    return;
  end if;

  select one bin related by self->V_BIN[R801];
  if ( not_empty bin )
    select one lop related by bin->V_VAL[R802];
    select one rop related by bin->V_VAL[R803];
    self.StartPosition = lop.StartPosition;
    self.EndPosition = rop.EndPosition;
    return;
  end if;

  select one unary related by self->V_UNY[R801];
  if ( not_empty unary )
    select one op related by unary->V_VAL[R804];
    self.EndPosition = op.EndPosition;
    return;
  end if;

  select one len related by self->V_LEN[R801];
  if ( not_empty len )
    select one enum related by len->S_ENUM[R824];
    self.EndPosition = self.StartPosition + GD::strlen(s: enum.Name) - 1;
    return;
  end if;

  select one scv related by self->V_SCV[R801];
  if ( not_empty scv )
    self.EndPosition = self.StartPosition + GD::strlen(s: self.Text) - 1;
    return;
  end if;
                             
  select one irf related by self->V_IRF[R801];
  if ( not_empty irf )
    select one var related by irf->V_VAR[R808];
    self.EndPosition = self.StartPosition + GD::strlen(s: var.Name) - 1;
    return;
  end if;

  select one isr related by self->V_ISR[R801];
  if ( not_empty isr )
    select one var related by isr->V_VAR[R809];
    self.EndPosition = self.StartPosition + GD::strlen(s: var.Name) - 1;
    return;
  end if;

  select one slr related by self->V_SLR[R801];
  if ( not_empty slr )
    // selected references are ignored
    return;
  end if;

  select one fnc related by self->V_FNV[R801];
  if ( not_empty fnc )
    // Function Values are not represented by any text in the OAL, therefore
    // they are ignored here.
    return;
  end if;

  select one brv related by self->V_BRV[R801];
  if ( not_empty brv )
    // Bridge Values are not represented by any text in the OAL, therefore
    // they are ignored here.
    return;
  end if;

  select one trv related by self->V_TRV[R801];
  if ( not_empty trv )
    // Operation Values are not represented by any text in the OAL, therefore
    // they are ignored here.
    return;
  end if;

  select one var related by self->V_TVL[R801]->V_VAR[R805];
  if ( not_empty var )
    self.EndPosition = self.StartPosition + GD::strlen(s: var.Name) - 1;
    return;
  end if;

  // Since all referenced parameters will have
  // the same name, just pick the first one.
  select any evtParmRef related by self->V_EDV[R801]->V_EPR[R834];
  if not_empty evtParmRef
    select one edi related by evtParmRef->SM_EVTDI[R846];
    if ( not_empty edi )
      self.EndPosition = self.StartPosition + GD::strlen(s: edi.Name) - 1;
      return;
    else
      select one propParm related by evtParmRef->C_PP[R847];
      if not_empty propParm
        self.EndPosition = self.StartPosition +
                                               GD::strlen(s: propParm.Name) - 1;
        return;
      end if;
    end if;
  end if;
  select one attr related by self->V_AVL[R801]->O_ATTR[R806];
  if ( not_empty attr )
    self.EndPosition = self.StartPosition + GD::strlen(s: attr.Name) - 1;
    return;
  end if;

  select one parm related by self->V_PVL[R801];
  if ( not_empty parm )
    select one bparm related by parm->S_BPARM[R831];
    if ( not_empty bparm )
      self.EndPosition = self.StartPosition + GD::strlen(s: bparm.Name) - 1;
      return;
    end if;
    select one sparm related by parm->S_SPARM[R832];
    if ( not_empty sparm )
      self.EndPosition = self.StartPosition + GD::strlen(s: sparm.Name) - 1;
      return;
    end if;
    select one tparm related by parm->O_TPARM[R833];
    if ( not_empty tparm )
      self.EndPosition = self.StartPosition + GD::strlen(s: tparm.Name) - 1;
      return;
    end if;
    select one pparm related by parm->C_PP[R843];
    if ( not_empty pparm )
      self.EndPosition = self.StartPosition + GD::strlen(s: pparm.Name) - 1;
      return;
    end if;
    // unknown parameter type
    self.StartPosition = -1;
    self.EndPosition = -1;
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg: "Unknown parameter subtype",path:pathMsg);
    return;
  end if;
  select one memberVal related by self->V_MVL[R801];
  if (not_empty memberVal)
    select one member related by memberVal->S_MBR[R836];
    self.EndPosition = self.StartPosition + GD::strlen(s: member.Name) - 1;
    return;
  end if;
  select one aer related by self->V_AER[R801];
  if ( not_empty aer )
    // TODO
    return;
  end if;
  select one alv related by self->V_ALV[R801];
  if ( not_empty alv )
    self.EndPosition = self.StartPosition + 5; // strlen("length") - 1
    return;
  end if;
  select one msv related by self->V_MSV[R801];
  if not_empty msv
    select one message related by msv->SPR_PEP[R841]->C_EP[R4501];
    if(empty message)
      select one message related by msv->SPR_REP[R845]->C_EP[R4500];
    end if;
    if empty message
      pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg: "setEndPosition: No message found",path:pathMsg);
    else
      select one sig related by message->C_AS[R4004];
      if not_empty sig
        self.EndPosition = self.StartPosition + GD::strlen(s: sig.Name);
        return;
      else
        select one op related by message->C_IO[R4004];
        if not_empty op
          self.EndPosition = self.StartPosition + GD::strlen(s: op.Name);
          return;
        else
          pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg: "setEndPosition: Unknown message subtype",path:pathMsg);
        end if;
      end if;
    end if;
    self.StartPosition = -1;
    self.EndPosition = -1;
    return;
  end if;
  // unknown subtype of V_VAL
  self.StartPosition = -1;
  self.EndPosition = -1;
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg: "Unknown value subtype",path:pathMsg);
end if;',
	1,
	'',
	"11662e5b-2ae3-4386-bd5e-15fed2bb3fa9");
INSERT INTO O_TFR
	VALUES ("72b839e4-3dad-489c-aba4-eebc298cbc39",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'computeValue',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Value:Value.computeValue()
select one body related by self->ACT_BLK[R826]->ACT_ACT[R601];
// Attempt to get the stack from the stack frame passed in.
select any stack_frame from instances of I_STF where
                              (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
	//Invalid stack frame ID!
	pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.computeValue: Invalid stack frame id " +
	                                             "used. Suspending execution.",path:pathMsg);
	select any stack from instances of I_STACK;
	if (not_empty stack)
	  stack.runState = RunStateType::Suspended;
	end if;
end if;

select one stack related by stack_frame->I_STACK[R2943];
if (empty stack)
  //Could not get stack!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.computeValue: Could not get stack. " +
                                                       "Suspending Execution.",path:pathMsg);
  select any stack from instances of I_STACK;
  if (not_empty stack)
    stack.runState = RunStateType::Suspended;
  end if;
end if;

select any resultUnderComputation related by self->I_VSF[R2978] where
                          selected.Stack_Frame_ID == stack_frame.Stack_Frame_ID;
if (empty resultUnderComputation)
  stack_frame.pushValue(value_id:self.Value_ID);
  select any resultUnderComputation related by self->I_VSF[R2978] where
                          selected.Stack_Frame_ID == stack_frame.Stack_Frame_ID;
else
  select one rtVal related by resultUnderComputation->RV_RVL[R3305];
  if (not_empty rtVal)
    // Value is already computed
    return;
  end if;
end if;

select one lbool related by self->V_LBO[R801];
select one lin related by self->V_LIN[R801];
select one lstring related by self->V_LST[R801];
select one lreal related by self->V_LRL[R801];
select one unaryOperation related by self->V_UNY[R801];
select one binaryOperation related by self->V_BIN[R801];
select one attributeValueReference related by self->V_AVL[R801];
select one transientValueReference related by self->V_TVL[R801];
select one memberValueReference related by self->V_MVL[R801];
select one arrayElementReference related by self->V_AER[R801];
select one arrayLengthValue related by self->V_ALV[R801];
select one parameterValue related by self->V_PVL[R801];
select one functionValue related by self->V_FNV[R801];
select one operationValue related by self->V_TRV[R801];
select one bridgeValue related by self->V_BRV[R801];
select one selectedReference related by self->V_SLR[R801];
select one evtDataValue related by self->V_EDV[R801];
select one enumDataValue related by self->V_LEN[R801];
select one instRef related by self->V_IRF[R801];
select one instSetRef related by self->V_ISR[R801];
select one symbolicConstVal related by self->V_SCV[R801];
select one messageValue related by self->V_MSV[R801];

select one dt related by self->S_DT[R820];

// Definitely don''t produce a value
if (not_empty functionValue)
  functionValue.getValue(stack_frame_id: param.stack_frame_id);
elif (not_empty operationValue)
  operationValue.getValue(stack_frame_id: param.stack_frame_id);
elif (not_empty bridgeValue)
  bridgeValue.getValue(stack_frame_id: param.stack_frame_id);
elif(not_empty messageValue)
  messageValue.getValue(stack_frame_id: param.stack_frame_id);
elif (not_empty unaryOperation or not_empty binaryOperation or
                             not_empty attributeValueReference or
                                  not_empty arrayElementReference or
                                            not_empty arrayLengthValue or
                                              not_empty memberValueReference)
  // May produce a value or not
  if (not_empty unaryOperation)
    select one operand related by unaryOperation->V_VAL[R804];
    operand.computeValue(stack_frame_id:param.stack_frame_id);
    select any resultValue related by operand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
    select one rtVal related by resultValue->RV_RVL[R3305];
    if (not_empty rtVal)
      create object instance rucRtVal of RV_RVL;
      relate rucRtVal to resultUnderComputation across R3305;
      relate rucRtVal to dt across R3307;
      rucRtVal.setValue(value:
                 unaryOperation.getValue(stack_frame_id: param.stack_frame_id));
      rtVal.disposeIfOrphaned();
    end if;
  elif (not_empty binaryOperation)
    select one leftOperand related by binaryOperation->V_VAL[R802];
    leftOperand.computeValue(stack_frame_id:param.stack_frame_id);
    select any leftResultValue related by leftOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
    select one leftRtVal related by leftResultValue->RV_RVL[R3305];
    // Only compute the right hand value once the left is fully evaluated
    if (not_empty leftRtVal)
      select one rightOperand related by binaryOperation->V_VAL[R803];
      rightOperand.computeValue(stack_frame_id:param.stack_frame_id);
      select any rightResultValue related by rightOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
      select one rightRtVal related by rightResultValue->RV_RVL[R3305];
      if (not_empty rightRtVal)
        create object instance rucRtVal of RV_RVL;
        relate rucRtVal to resultUnderComputation across R3305;
        relate rucRtVal to dt across R3307;
        rucRtVal.setValue(value:
                binaryOperation.getValue(stack_frame_id: param.stack_frame_id));
        leftRtVal.disposeIfOrphaned();
        rightRtVal.disposeIfOrphaned();
      end if;
    end if;
  elif (not_empty attributeValueReference)
    rtVal_ID = attributeValueReference.getRuntimeValue(stack_frame_id:
                                                          param.stack_frame_id);
    if rtVal_ID != GD::NULL_UNIQUE_ID()
      create object instance rucRtVal of RV_RVL;
      relate rucRtVal to resultUnderComputation across R3305;
      relate rucRtVal to dt across R3307;
      select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
      rucRtVal.copyValue(from:rtVal_ID);
      if not_empty rtVal
        rtVal.disposeIfOrphaned();
      end if;
      select one dba related by attributeValueReference->O_ATTR[R806]->
                                                  O_BATTR[R106]->O_DBATTR[R107];
      if not_empty dba
        // Remove the derived result to force recomputation when in an iteration
        select any value related by rtVal->I_AVL[R3312] where
                                                selected.Attr_ID == dba.Attr_ID;
        if not_empty value
          unrelate value from rtVal across R3312;
        end if;
      end if;
    end if;
  elif not_empty arrayElementReference
    select one rootVal related by arrayElementReference->V_VAL[R838];
    rtVal_ID = rootVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
    if rtVal_ID != GD::NULL_UNIQUE_ID()
      select any rootRtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
      if not_empty rootRtVal
        // Once the root value is obtained, compute the index value
        select one indexVal related by arrayElementReference->V_VAL[R839];
        indexVal.computeValue(stack_frame_id:param.stack_frame_id);
        select any indexResultValue related by indexVal->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
        select one indexRtVal related by indexResultValue->RV_RVL[R3305];
        if not_empty indexRtVal
          // Once the array index is computed, use it to identify
          // the required runtime value array element.
          select one smplIndexVal related by indexRtVal->RV_SMV[R3300];
          index = GD::instance_to_int(value:smplIndexVal.getValue());
          select any valInArray related by rootRtVal->RV_AVL[R3300]->
                                                      RV_VIA[R3302] where
                                                        selected.Index == index;
          create object instance rucRtVal of RV_RVL;
          relate rucRtVal to resultUnderComputation across R3305;
          relate rucRtVal to dt across R3307;
          if not_empty valInArray
            select one elemVal related by valInArray->RV_RVL[R3302];
            select one smplRtVal related by elemVal->RV_SMV[R3300];
            select one strRtVal related by elemVal->RV_SVL[R3300];
            if not_empty smplRtVal or not_empty strRtVal
              // The value found is not an array,
              //we have reached our target value
              rucRtVal.copyValue(from:elemVal.RuntimeValue_ID);
            end if;
          else
            pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Warning: access made to " +
                                "unwritten array element. Using default value",path:pathMsg);
            rucRtVal.setDefault(dimensions:self.getDimensions());
          end if;
          stack_frame.popValue(value_id:indexVal.Value_ID);
          indexRtVal.disposeIfOrphaned();
          stack_frame.popValue(value_id:rootVal.Value_ID);
          rootRtVal.disposeIfOrphaned();
        end if;
      end if;
    end if;
  elif not_empty arrayLengthValue
    select one rootVal related by arrayLengthValue->V_VAL[R840];
    fixedSize = rootVal.getArrayLength(dimension:rootVal.getDimensions() - 1);
    if (fixedSize == 0)
      rtVal_ID = rootVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
      if rtVal_ID != GD::NULL_UNIQUE_ID()
        select any rootRtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
        select many valsInArray related by rootRtVal->
                                                   RV_AVL[R3300]->RV_VIA[R3302];
        // Verifier uses sparse array population, so we traverse
        // the array looking for the highest index.
        highestIndex = -1;
        for each val in valsInArray
          if val.Index > highestIndex
            highestIndex = val.Index;
          end if;
        end for;
        length = 0;
        // If the array has been initialized then we must add 1 to 
        // get the length because the index is 0-based
        if (highestIndex >= 0) 
          length = highestIndex + 1;
        end if;
        create object instance rucRtVal of RV_RVL;
        relate rucRtVal to resultUnderComputation across R3305;
        relate rucRtVal to dt across R3307;
        rucRtVal.setValue(value:GD::int_to_instance(value:length));
      end if;
    else
      create object instance rucRtVal of RV_RVL;
      relate rucRtVal to resultUnderComputation across R3305;
      relate rucRtVal to dt across R3307;
      rucRtVal.setValue(value:GD::int_to_instance(value:fixedSize));
    end if;
  elif (not_empty memberValueReference)
    rtVal_ID = memberValueReference.getRuntimeValue(stack_frame_id:
                                                          param.stack_frame_id);
    if rtVal_ID != GD::NULL_UNIQUE_ID()
      create object instance rucRtVal of RV_RVL;
      relate rucRtVal to resultUnderComputation across R3305;
      relate rucRtVal to dt across R3307;
      rucRtVal.copyValue(from:rtVal_ID);
      select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
      if not_empty rtVal
        rtVal.disposeIfOrphaned();
      end if;
    end if;
  end if;
else
  // Definitely all produce a value
  create object instance rucRtVal of RV_RVL;
  relate rucRtVal to resultUnderComputation across R3305;
  relate rucRtVal to dt across R3307;
  if (not_empty lbool)
    rucRtVal.setValue(value:GD::boolean_to_instance(value:lbool.getBoolean()));
  elif (not_empty lin)
    rucRtVal.setValue(value:GD::int_to_instance( value:lin.getInteger()));
  elif (not_empty lstring)
    rucRtVal.setValue(value:GD::string_to_instance(value:lstring.getString()));
  elif (not_empty lreal)
    rucRtVal.setValue(value:GD::real_to_instance(value:lreal.getReal()));
  elif (not_empty symbolicConstVal)
  	select one symbolicConst related by symbolicConstVal->CNST_SYC[R850];
  	select one leafSymbolicConst related by symbolicConst->CNST_LFSC[R1502];
  	select one literalSymbolicConst related by leafSymbolicConst->CNST_LSC[R1503];
  	rucRtVal.setValue(value:GD::string_to_instance(value:literalSymbolicConst.Value));  
  elif (not_empty transientValueReference)
    rtVal_ID = transientValueReference.getRuntimeValue(stack_frame_id:
                                                          param.stack_frame_id);
    select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
    rucRtVal.copyValue(from:rtVal_ID);
    rtVal.disposeIfOrphaned();
  elif (not_empty parameterValue)
    rtVal_ID = parameterValue.getRuntimeValue(stack_frame_id:
                                                          param.stack_frame_id);
    select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
    rucRtVal.copyValue(from:rtVal_ID);
    rtVal.disposeIfOrphaned();
  elif (not_empty selectedReference)
    // TODO, this needs to handle runtime values
    rucRtVal.setValue(value:selectedReference.getValue(
                                         stack_frame_id: param.stack_frame_id));
  elif (not_empty evtDataValue)
    rtVal_ID = evtDataValue.getRuntimeValue(
                                           stack_frame_id:param.stack_frame_id);
    select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
    rucRtVal.copyValue(from:rtVal_ID);
    rtVal.disposeIfOrphaned();
  elif (not_empty enumDataValue)
    rucRtVal.setValue(value:enumDataValue.getValue());
  elif (not_empty instRef)
    rtVal_ID = instRef.getRuntimeValue(stack_frame_id:param.stack_frame_id);
    select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
    rucRtVal.copyValue(from:rtVal_ID);
    rtVal.disposeIfOrphaned();
  elif (not_empty instSetRef)
    rtVal_ID = instSetRef.getRuntimeValue(stack_frame_id:param.stack_frame_id);
    select any rtVal from instances of RV_RVL where
                                           selected.RuntimeValue_ID == rtVal_ID;
    rucRtVal.copyValue(from:rtVal_ID);
    rtVal.disposeIfOrphaned();
  end if;
  select one strVal related by rucRtVal->RV_SVL[R3300];
  select one arrayVal related by rucRtVal->RV_AVL[R3300];
  select one instRefVal related by rucRtVal->RV_SMV[R3300]->RV_IRV[R3308];
  if empty strVal and empty arrayVal and empty instRefVal and
                                      rucRtVal.getValue() == GD::NULL_INSTANCE()
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Value:Value.computeValue() Error: Result not computed. " +
                                                       "Suspending Execution.",path:pathMsg);
    stack.runState = RunStateType::Suspended;
  end if;
end if;',
	1,
	'',
	"641c6dbd-6463-45a0-bd16-dea69ba6b1e9");
INSERT INTO O_TPARM
	VALUES ("f1518efb-9483-4354-93a9-06182c85ebc4",
	"72b839e4-3dad-489c-aba4-eebc298cbc39",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("eac35e00-ddaf-4af2-8754-e04782d26dce",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'setValue',
	'Note: Setting values is only supported for assigning values of invocation
parameters passed by reference.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Value:Value.setValue()
select one body related by self->ACT_BLK[R826]->ACT_ACT[R601];

// Attempt to get the stack from the stack frame passed in.
select any stack_frame from instances of I_STF where (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
	//Invalid stack frame ID!
	pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.setValue: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
	select any stack from instances of I_STACK;
	select one stack_frame related by stack->I_STF[R2929];
end if;
select one stack related by stack_frame->I_STACK[R2943];
if (empty stack)
  //Could not get stack!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.setValue: Could not get stack. Using random stack.",path:pathMsg);
  select any stack from instances of I_STACK;
end if;

// Supported values defined by parser support for writable values. This can 
// be found in the function_import.sql file, function is_readonly_value. 
select one attributeValueReference related by self->V_AVL[R801];
select one transientValueReference related by self->V_TVL[R801];
select one parameterValue related by self->V_PVL[R801];
select one memberValueReference related by self->V_MVL[R801];
select one arrayElemReference related by self->V_AER[R801];
select one instReference related by self->V_IRF[R801];
// Note that instance reference(V_IRF) and instance set reference(V_ISR) need
// to be supported here when they are supported in Value.getValue(). 

if (not_empty attributeValueReference)
  attributeValueReference.setValue(stack_frame_id: param.stack_frame_id,
                                 value: param.value, member_id:param.member_id);
  return;
elif (not_empty transientValueReference)
  transientValueReference.setValue(stack_frame_id: param.stack_frame_id,
                                 value: param.value, member_id:param.member_id);
  return;
elif (not_empty memberValueReference)
  memberValueReference.setValue(stack_frame_id: param.stack_frame_id,
                                 value: param.value, member_id:param.member_id);
  return;
elif (not_empty parameterValue)
  parameterValue.setValue(stack_frame_id: param.stack_frame_id,
                                  value:param.value, member_id:param.member_id);
  return;
elif not_empty arrayElemReference
  arrayElemReference.setValue(stack_frame_id: param.stack_frame_id,
                                  value:param.value, member_id:param.member_id);
  return;
elif not_empty instReference
  instReference.setValue(stack_frame_id: param.stack_frame_id, value:param.value, member_id:param.member_id);
  return;
end if;

// Did not find a supported value data type.
pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Value:Value.setValue() error, data type not supported.",path:pathMsg);
',
	1,
	'',
	"8291d0d6-df79-45e4-b9c2-985de970ef35");
INSERT INTO O_TPARM
	VALUES ("36d9be71-bb14-49db-a23f-42a9d808d349",
	"eac35e00-ddaf-4af2-8754-e04782d26dce",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("19dce3e7-0d91-412a-934d-edbb5dac61a7",
	"eac35e00-ddaf-4af2-8754-e04782d26dce",
	'value',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	0,
	'',
	"36d9be71-bb14-49db-a23f-42a9d808d349",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TPARM
	VALUES ("0bbaa1ba-e24a-4c74-82f0-6e6754c08145",
	"eac35e00-ddaf-4af2-8754-e04782d26dce",
	'member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"19dce3e7-0d91-412a-934d-edbb5dac61a7",
	'');
INSERT INTO O_TFR
	VALUES ("eca7e327-e577-497e-864e-bd2cfc324657",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'getValue',
	'',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// Value.getValue
// Important! Only valid for values that can be passed by reference
// Attempt to get the stack from the stack frame passed in.
select one body related by self->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame from instances of I_STF where
                              (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
	//Invalid stack frame ID!
	pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.getValue: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
	select any stack from instances of I_STACK;
	select one stack_frame related by stack->I_STF[R2929];
end if;
select one stack related by stack_frame->I_STACK[R2943];
if (empty stack)
  //Could not get stack!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Value.getValue: Could not get stack. Using random stack.",path:pathMsg);
  select any stack from instances of I_STACK;
end if;

// Supported values defined by parser support for writable values. This can 
// be found in the function_import.sql file, function is_readonly_value. 
select one attributeValueReference related by self->V_AVL[R801];
select one transientValueReference related by self->V_TVL[R801];
select one parameterValue related by self->V_PVL[R801];

// Note that instance reference(V_IRF) and instance set reference(V_ISR) need
// to be supported here when they are supported in Value.getValue(). 

if (not_empty attributeValueReference)
  return attributeValueReference.getValue(stack_frame_id: param.stack_frame_id);
elif (not_empty transientValueReference)
  return transientValueReference.getValue(stack_frame_id: param.stack_frame_id);
elif (not_empty parameterValue)
  return parameterValue.getValue(stack_frame_id: param.stack_frame_id);
end if;

// Did not find a supported value data type.
pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Value:Value.getValue() error, data type not supported.",path:pathMsg);
return GD::NULL_INSTANCE();',
	1,
	'',
	"5579dee4-49a3-4b24-9727-5aa23ea3620b");
INSERT INTO O_TPARM
	VALUES ("167b4ad5-9856-4f5c-8058-0f55f6e45400",
	"eca7e327-e577-497e-864e-bd2cfc324657",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4edb3429-eea9-488a-8676-0c55f75f4b99",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'hasSubtype',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one lin related by self->V_LIN[R801];
if ( not_empty lin )
  return true;
end if;
select one lbo related by self->V_LBO[R801];
if ( not_empty lbo )
  return true;
end if;
select one lst related by self->V_LST[R801];
if ( not_empty lst )
  return true;
end if;
select one lrl related by self->V_LRL[R801];
if ( not_empty lrl )
  return true;
end if;
select one bin related by self->V_BIN[R801];
if ( not_empty bin )
  return true;
end if;
select one unary related by self->V_UNY[R801];
if ( not_empty unary )
  return true;
end if;
select one len related by self->V_LEN[R801];
if ( not_empty len )
  return true;
end if;
select one irf related by self->V_IRF[R801];
if ( not_empty irf )
  return true;
end if;
select one isr related by self->V_ISR[R801];
if ( not_empty isr )
  return true;
end if;
select one slr related by self->V_SLR[R801];
if ( not_empty slr )
  return true;
end if;
select one fnc related by self->V_FNV[R801];
if ( not_empty fnc )
  return true;
end if;
select one brv related by self->V_BRV[R801];
if ( not_empty brv )
  return true;
end if;
select one trv related by self->V_TRV[R801];
if ( not_empty trv )
  return true;
end if;
select one tvl related by self->V_TVL[R801];
if ( not_empty tvl )
  return true;
end if;
select one edv related by self->V_EDV[R801];
if ( not_empty edv )
  return true;
end if;
select one avl related by self->V_AVL[R801];
if ( not_empty avl )
  return true;
end if;
select one parm related by self->V_PVL[R801];
if ( not_empty parm )
  return true;
end if;
select one memberVal related by self->V_MVL[R801];
if (not_empty memberVal)
  return true;
end if;
return false;',
	1,
	'',
	"eca7e327-e577-497e-864e-bd2cfc324657");
INSERT INTO O_TFR
	VALUES ("5579dee4-49a3-4b24-9727-5aa23ea3620b",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'getRuntimeValue',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Value.getRuntimeValue()
select one body related by self->ACT_BLK[R826]->ACT_ACT[R601];
select one attrVal related by self->V_AVL[R801];
select one tranVal related by self->V_TVL[R801];
select one membVal related by self->V_MVL[R801];
select one parmVal related by self->V_PVL[R801];
select one evtVal related by self->V_EDV[R801];
select one arrVal related by self->V_AER[R801];
select one instRef related by self->V_IRF[R801];
select one instSetRef related by self->V_ISR[R801];
runtimeVal = GD::NULL_UNIQUE_ID();
if (not_empty attrVal)
  runtimeVal = attrVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty tranVal
  runtimeVal = tranVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty membVal
  runtimeVal = membVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty parmVal
  runtimeVal = parmVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty evtVal
  runtimeVal = evtVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty arrVal
  runtimeVal = arrVal.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty instRef
  runtimeVal = instRef.getRuntimeValue(stack_frame_id:param.stack_frame_id);
elif not_empty instSetRef
  runtimeVal = instSetRef.getRuntimeValue(stack_frame_id:param.stack_frame_id);
else
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Internal Error in Value.getRuntimeValue(), " +
                                                   "value type not supported.",path:pathMsg);
end if;

return runtimeVal;',
	1,
	'',
	"a0664b09-c98e-4dea-a594-8991804e4b9a");
INSERT INTO O_TPARM
	VALUES ("3a756677-9ea5-40bf-9941-358873bdedc2",
	"5579dee4-49a3-4b24-9727-5aa23ea3620b",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4fecf482-b56a-42d9-a27a-c111d7960eb4",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'isLeaf',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Value.isLeaf()
select one mvlRef related by self->V_MVL[R837];
select one arrayRef related by self->V_AER[R838];
return empty mvlRef and empty arrayRef;',
	1,
	'',
	"4edb3429-eea9-488a-8676-0c55f75f4b99");
INSERT INTO O_TFR
	VALUES ("8291d0d6-df79-45e4-b9c2-985de970ef35",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'setRank',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Value.setRank
select one tvl related by self->V_TVL[R801];
select one aer related by self->V_AER[R801];
varID = GD::NULL_UNIQUE_ID();
if not_empty tvl
  select one vvar related by tvl->V_VAR[R805];
  if not_empty vvar
    varID = vvar.Var_ID;

    select any rval from instances of V_VAL where param.rval_id == selected.Value_ID;
    rvalNumDimensions = rval.getDimensions();
    totalLvarDims = rvalNumDimensions + param.dimension;
    while ( rvalNumDimensions > 0 )
      // Resize each dimension
      elementCount = rval.getArrayLength(dimension:rvalNumDimensions-1);
      create object instance dim of S_DIM;
      // We may be deep into recursion.  As we unwind the aer dimensions will
      // be added.  Therefore, this dimension is "rvalNumDimensions + param.dimension".
      // If we are not in recursion then param.dimension will be 0;
      dim.dimensionCount = (rvalNumDimensions + param.dimension) - 1; // subtract 1 to make it 0 based
      dim.elementCount = elementCount;
      relate vvar to dim across R849;
      rvalNumDimensions = rvalNumDimensions - 1;
    end while;
  end if;
elif not_empty aer
  select one rootVal related by aer->V_VAL[R838];
  varID = rootVal.setRank(dimension:param.dimension+1, rval_id:param.rval_id);
  select any vvar from instances of V_VAR where selected.Var_ID == varID;
  if (not_empty vvar)
    //TODO: When we support values other then literals this will
    //      need to be parsed.  Until then, we use dynamic sizing (indicated
    //      with a value of 0) when a literal integer is not specified.
    elementCount = 0;

    select one lin related by aer->V_VAL[R839]->V_LIN[R801];
    if (not_empty lin)
      // Add 1 to the value because in this case, this was specified as an
      // array index.
      elementCount = lin.getInteger() + 1;
    end if;

    create object instance dim of S_DIM;
     select many numberOfDims related by vvar->S_DIM[R849]; 
    dim.dimensionCount = cardinality numberOfDims;
    dim.elementCount = elementCount;
    relate vvar to dim across R849;
  end if;
end if;
return varID;
',
	1,
	'',
	"725855a8-615e-4ada-b0a6-9d5a7dc337f6");
INSERT INTO O_TPARM
	VALUES ("985c7213-17be-4d47-9a72-6b899cccac04",
	"8291d0d6-df79-45e4-b9c2-985de970ef35",
	'dimension',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("c53d4ed3-2a18-4da0-8611-20da14b6472c",
	"8291d0d6-df79-45e4-b9c2-985de970ef35",
	'rval_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"985c7213-17be-4d47-9a72-6b899cccac04",
	'');
INSERT INTO O_TFR
	VALUES ("a0664b09-c98e-4dea-a594-8991804e4b9a",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'getDimensions',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'// Value.getDimensions()
select one memberRef related by self->V_MVL[R801];
select one attrValRef related by self->V_AVL[R801];
select one tranValRef related by self->V_TVL[R801];
select one arrayElemRef related by self->V_AER[R801];
select one funcReturnVal related by self->V_FNV[R801];
select one opReturnVal related by self->V_TRV[R801];
select one brReturnVal related by self->V_BRV[R801];
select one parmVal related by self->V_PVL[R801];
select one evtDatVal related by self->V_EDV[R801];
select one msgVal related by self->V_MSV[R801];
select one instRef related by self->V_IRF[R801];
if not_empty memberRef
  select one member related by memberRef->S_MBR[R836];
  return member.getDimensionsCnt();
elif not_empty instRef
	select one var related by instRef->V_VAR[R808];
	return var.getDimensionsCnt();
elif not_empty attrValRef
  select one attr related by attrValRef->O_ATTR[R806];
  return attr.getDimensionsCnt();
elif not_empty tranValRef
  select one tran related by tranValRef->V_VAR[R805];
  return tran.getDimensionsCnt();
elif not_empty arrayElemRef
  select one rootVal related by arrayElemRef->V_VAL[R838];
  cnt = rootVal.getDimensions() - 1;
  if cnt < 0
    // No action here, but note that this may indicate too many
    // array indices were specified.  We return the negative value
    // here for the caller to handle.  This rountine is most-often
    // called by the parser, and when this is a parse error we want
    // it reported as such.
    // Additionally, note that this behavior is critcal in
    // allowing the parser to determine our position in a multidimensional
    // array.  Through the recursion above, we find the root of the chain and
    // the stack unwinds back to the current position giving us the correct
    // position in a multidimensional array.
  end if;
  return cnt;
elif not_empty funcReturnVal
  select one func related by funcReturnVal->S_SYNC[R827];
  return func.getReturnDimensionsCnt();
elif not_empty opReturnVal
  select one op related by opReturnVal->O_TFR[R829];
  return op.getReturnDimensionsCnt();
elif not_empty brReturnVal
  select one br related by brReturnVal->S_BRG[R828];
  return br.getReturnDimensionsCnt();
elif not_empty parmVal
  select one fnParm related by parmVal->S_SPARM[R832];
  select one opParm related by parmVal->O_TPARM[R833];
  select one brParm related by parmVal->S_BPARM[R831];
  select one ppParm related by parmVal->C_PP[R843];
  if not_empty fnParm
    return fnParm.getDimensionsCnt();
  elif not_empty opParm
    return opParm.getDimensionsCnt();
  elif not_empty brParm
    return brParm.getDimensionsCnt();
  elif(not_empty ppParm)
    return ppParm.getDimensionsCnt();
  else
    // Cannot happen - required to satisfy parser
    return 0;
  end if;
elif not_empty evtDatVal
  // Since all referenced parameters will have
  // the same name, just pick the first one.
  select any evtParmRef related by evtDatVal->V_EPR[R834];
  select one evtdi related by evtParmRef->SM_EVTDI[R846];
  if not_empty evtdi
    return evtdi.getDimensionsCnt();
  else
    select one propParm related by evtParmRef->C_PP[R847];
    return propParm.getDimensionsCnt();
  end if;
elif not_empty msgVal
  select one io related by msgVal->SPR_REP[R845]->C_EP[R4500]->C_IO[R4004];
  if(empty io)
    select one io related by msgVal->SPR_PEP[R841]->C_EP[R4501]->C_IO[R4004];
  end if;
  if not_empty io
    return io.getReturnDimensionsCnt();
  else
    return 0;
  end if;
else
  return 0;
end if;',
	1,
	'',
	"a6dcd8c5-6eb8-4d84-bac9-856ca7bb629c");
INSERT INTO O_TFR
	VALUES ("a6dcd8c5-6eb8-4d84-bac9-856ca7bb629c",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'getArrayLength',
	'Return the number of elements allowed in the specified dimension.  A value of
0 indicates that the array is dynamically sized.  A return value of -1 
indicates that the specfied dimension is invalid.   The specified dimension 
parameter is 0-based.',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'// Value.getArrayLength()
select one memberRef related by self->V_MVL[R801];
select one attrValRef related by self->V_AVL[R801];
select one tranValRef related by self->V_TVL[R801];
select one arrayElemRef related by self->V_AER[R801];
select one funcReturnVal related by self->V_FNV[R801];
select one opReturnVal related by self->V_TRV[R801];
select one brReturnVal related by self->V_BRV[R801];
select one parmVal related by self->V_PVL[R801];
select one evtDatVal related by self->V_EDV[R801];
select one msgVal related by self->V_MSV[R801];
select one instRef related by self->V_IRF[R801];
select any dim from instances of S_DIM where selected.DIM_ID==GD::NULL_UNIQUE_ID();
dimensionSize = -1;

if not_empty memberRef
  select any dim related by memberRef->S_MBR[R836]->S_DIM[R53] where (selected.dimensionCount == param.dimension);
elif not_empty instRef
  select any dim related by instRef->V_VAR[R808]->S_DIM[R849] where (selected.dimensionCount == param.dimension);
elif not_empty attrValRef
  select any dim related by attrValRef->O_ATTR[R806]->S_DIM[R120] where (selected.dimensionCount == param.dimension);
elif not_empty tranValRef
  select any dim related by tranValRef->V_VAR[R805]->S_DIM[R849] where (selected.dimensionCount == param.dimension);
elif not_empty arrayElemRef
  select one rootVal related by arrayElemRef->V_VAL[R838];
  return rootVal.getArrayLength(dimension:param.dimension);
elif not_empty funcReturnVal
  select any dim related by funcReturnVal->S_SYNC[R827]->S_DIM[R51] where (selected.dimensionCount == param.dimension);
elif not_empty opReturnVal
  select any dim related by opReturnVal->O_TFR[R829]->S_DIM[R122] where (selected.dimensionCount == param.dimension);
elif not_empty brReturnVal
  select any dim related by brReturnVal->S_BRG[R828]->S_DIM[R50] where (selected.dimensionCount == param.dimension);
elif not_empty parmVal
  select one fnParm related by parmVal->S_SPARM[R832];
  select one opParm related by parmVal->O_TPARM[R833];
  select one brParm related by parmVal->S_BPARM[R831];
  select one prParm related by parmVal->C_PP[R843];
  if not_empty fnParm
    select any dim related by fnParm->S_DIM[R52] where (selected.dimensionCount == param.dimension);
  elif not_empty opParm
    select any dim related by opParm->S_DIM[R121] where (selected.dimensionCount == param.dimension);
  elif not_empty brParm
    select any dim related by brParm->S_DIM[R49] where (selected.dimensionCount == param.dimension);
  elif not_empty prParm
    select any dim related by prParm->S_DIM[R4017] where (selected.dimensionCount == param.dimension);
  else
    // Cannot happen - required to satisfy parser
  end if;
elif not_empty evtDatVal
  select any dim related by evtDatVal->V_EPR[R834]->SM_EVTDI[R846]->S_DIM[R531] where (selected.dimensionCount == param.dimension);
  if empty dim
    // it could be a signal event
    select any dim related by evtDatVal->V_EPR[R834]->C_PP[R847]->S_DIM[R4017]
                             where (selected.dimensionCount == param.dimension);
  end if;
elif not_empty msgVal
  select any dim related by msgVal->SPR_REP[R845]->C_EP[R4500]->C_IO[R4004]->S_DIM[R4018] where (selected.dimensionCount == param.dimension);
  if(empty dim)
    select any dim related by msgVal->SPR_PEP[R841]->C_EP[R4501]->C_IO[R4004]->S_DIM[R4018] where (selected.dimensionCount == param.dimension);
  end if;
end if;

if (not_empty dim)
  dimensionSize = dim.elementCount;
end if;
return dimensionSize;',
	1,
	'',
	"16ea7c7b-e7e0-44e7-b981-bbb882cf786b");
INSERT INTO O_TPARM
	VALUES ("38ed60eb-823c-4b9a-bd0c-587b2126e416",
	"a6dcd8c5-6eb8-4d84-bac9-856ca7bb629c",
	'dimension',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("47cd6103-1b2d-409c-bc73-2f7555df1f6b",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'isElementCountValid',
	'This operation checks to see if the dimension value specified is withing bounds
of the actual declaration of the value.  For example:
foo[10] = "";  
foo[15] = "";
In the above example, the first line is a declaration statement (because it is
the first time this variable is used).  The element count of dimension 1 of 
this array is declared to be 11 elements (because it is an assignment and the
array is 0-based).  On the second line, an attempt is made to assign something 
to element 16 in the array.  This is an error (Array out of bounds), and it 
is the kind of problem this operation checks for.  This operation returns true
if the element count is valid and false if it is not.

             ',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'isValid = true;

// Work up the array chain and find the root
select one aer related by self->V_AER[R801];
tempAER = aer;
while not_empty tempAER
  select one tempAER related by aer->V_VAL[R838]->V_AER[R801]; 
  if (not_empty tempAER)
    aer = tempAER;
  end if;
end while;

// We are now at the root of the array, so spin down through the chain and 
// check each dimension size.
dimension = 0;

while (isValid and not_empty aer)
  specifiedDimension = -1;
  // At some point BridgePoint will allow constants and even expressions as
  // an index, but right now we only allow integers.
  select one lin related by aer->V_VAL[R839]->V_LIN[R801];
  if (not_empty lin)
    specifiedDimension = lin.getInteger();
  end if;
  
  actualSize = self.getArrayLength(dimension:dimension);
  actualSizeIsDynamic = true;
  if (actualSize > 0)
    actualSizeIsDynamic = false;
  end if;
  if ( (not actualSizeIsDynamic) and (specifiedDimension >= actualSize) ) 
    isValid = false;
  end if;
  select one aer related by aer->V_VAL[R801]->V_AER[R838]; 
  dimension = dimension + 1;
end while;

return isValid;',
	1,
	'',
	"eac35e00-ddaf-4af2-8754-e04782d26dce");
INSERT INTO O_TFR
	VALUES ("11662e5b-2ae3-4386-bd5e-15fed2bb3fa9",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'isReferringToDefaultDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one dt related by self->S_DT[R820];
elementType = Util::getSimpleClassName(element:self.convertToInstance());
if(dt.Name == S_DT::getDefaultDataTypeName(elementType:elementType))
  return true;
end if;
return false;',
	1,
	'',
	"4fecf482-b56a-42d9-a27a-c111d7960eb4");
INSERT INTO O_TFR
	VALUES ("02d174cb-eaf4-4ece-936e-ad089302a46f",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'convertToInstance',
	'Translate:native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'return this;',
	0,
	'',
	"72b839e4-3dad-489c-aba4-eebc298cbc39");
INSERT INTO O_TFR
	VALUES ("641c6dbd-6463-45a0-bd16-dea69ba6b1e9",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'canReferToDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one body related by self->ACT_BLK[R826]->ACT_ACT[R601];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one dt related by self->S_DT[R820];
  if(not_empty dt)
    select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
    return containingElem.canReferToDataType(dtID:dt.DT_ID, dtName:dt.Name);
  end if;
  return false;
else
  select one dt related by self->S_DT[R820];
  if(not_empty dt)
    body.associateWithOwningComponent();
    select one component related by body->ACT_BIC[R694]->C_C[R694];
    if(not_empty component)
      select one reqSig related by body->ACT_RSB[R698];
      select one reqOp related by body->ACT_ROB[R698];
      select one proSig related by body->ACT_PSB[R698];
      select one proOp related by body->ACT_POB[R698];
      // if any of the following is not empty
      // then the dt must live at the system level
      if(not_empty reqSig)
          return true;
      elif(not_empty reqOp)
          return true;
      elif(not_empty proSig)
          return true;
      elif(not_empty proOp)
          return true;
      end if;
    else
        return true;
    end if;
  end if;
  return false;
end if;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("f2365b2e-41f6-41a4-bba5-3efc0e8c1dce",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	'isElementCountCompatible',
	'This operation checks to see if each dimension''s actual element count value 
is withing bounds of the element count of the variable being assigned.
For example:
foo[10] = "";  
foobar[15] = "";
foo = foobar;
In the above example, the assignment of foobar to foo should not be allowed
because the dimension element counts are not compatible.  Each dimension''s 
element count must match.
   ',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Note that this value (self) is the lval and the paramater pased-in is the
// rval (see the operation description for more information)
//
 
isValid = true;
select any rval from instances of V_VAL where (selected.Value_ID == param.rVal);
if (empty rval)
  return false;
end if;

// Work up the array chain and find the root
select one l_aer related by self->V_AER[R801];
select one r_aer related by rval->V_AER[R801];
l_tempAER = l_aer;
r_tempAER = r_aer;
while ((not_empty l_tempAER and not_empty r_tempAER) and isValid)
  select one l_tempAER related by l_aer->V_VAL[R838]->V_AER[R801]; 
  select one r_tempAER related by r_aer->V_VAL[R838]->V_AER[R801]; 
  if (not_empty l_tempAER)
    l_aer = l_tempAER;
    if (not_empty r_tempAER)
	  l_aer = l_tempAER;
    else
      isValid = false;
    end if;
  else
    if (not_empty r_tempAER)
      isValid = false;
    end if;
  end if;
end while;

// We are now at the root of the array, so spin down through the chain and 
// check each dimension size.
dimension = 0;
while ((not_empty l_aer and not_empty r_aer) and isValid)
  l_actualSize = self.getArrayLength(dimension:dimension);
  r_actualSize = rval.getArrayLength(dimension:dimension);
  if ( l_actualSize != r_actualSize ) 
    isValid = false;
    break;
  end if;
  select one l_aer related by l_aer->V_VAL[R801]->V_AER[R838]; 
  select one r_aer related by r_aer->V_VAL[R801]->V_AER[R838]; 
  dimension = dimension + 1;
end while;

return isValid;',
	1,
	'',
	"47cd6103-1b2d-409c-bc73-2f7555df1f6b");
INSERT INTO O_TPARM
	VALUES ("d95be96e-0d4b-40ed-82ad-9a91e76c09a3",
	"f2365b2e-41f6-41a4-bba5-3efc0e8c1dce",
	'rVal',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"00000000-0000-0000-0000-000000000000",
	'Value_ID',
	'',
	'',
	'Value_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"eac82d81-93f2-4d54-b128-164885f7bbf1",
	"87c54cdc-f514-4382-b3d5-f7912be16ac0",
	"8f256490-151c-4bc2-89c9-403a03734b01",
	"412b8e14-865f-44c7-b302-689483475d1a",
	"93b45c70-1e40-4495-a994-9a64405d2a0c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Block',
	'Block_ID',
	'R826.''has scope''');
INSERT INTO R_RGO_PROXY
	VALUES ("43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"eac82d81-93f2-4d54-b128-164885f7bbf1",
	"87c54cdc-f514-4382-b3d5-f7912be16ac0",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"eac82d81-93f2-4d54-b128-164885f7bbf1",
	"8f256490-151c-4bc2-89c9-403a03734b01",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("412b8e14-865f-44c7-b302-689483475d1a",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	1,
	'Block_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	'../../Body/Block/Block.xtuml');
INSERT INTO O_ATTR
	VALUES ("412b8e14-865f-44c7-b302-689483475d1a",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"76c4ba58-b325-4203-893c-87f41446228b",
	'Block_ID',
	'

',
	'',
	'Block_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5c75e6e8-bcb5-4d42-9f10-871e60d57f16",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("5c75e6e8-bcb5-4d42-9f10-871e60d57f16",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("5c75e6e8-bcb5-4d42-9f10-871e60d57f16",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"6b18bb5e-25eb-43c2-8515-b7584a124608",
	'LineNumber',
	'The line in the activity at which this value resides. It has a default 
value of -1, indicating that the location is not known.
                        
Not_participating_value: -1',
	'',
	'LineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("aefe1dd7-237f-4b99-a6fc-89be49f21989",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("aefe1dd7-237f-4b99-a6fc-89be49f21989",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("aefe1dd7-237f-4b99-a6fc-89be49f21989",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"5c75e6e8-bcb5-4d42-9f10-871e60d57f16",
	'StartPosition',
	'The column in the activity at which this value starts. It has a default 
value of -1, indicating that the location is not known.
                        
Not_participating_value: -1
',
	'',
	'StartPosition',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9d0e5575-1bd5-447a-8212-c192e855b8a5",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("9d0e5575-1bd5-447a-8212-c192e855b8a5",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("9d0e5575-1bd5-447a-8212-c192e855b8a5",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"aefe1dd7-237f-4b99-a6fc-89be49f21989",
	'EndPosition',
	'The column in the activity at which this value ends. It has
a default value of -1, indicating that the location is not known.
                        
Not_participating_value: -1',
	'',
	'EndPosition',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8527be3f-3436-4517-94cb-fdb33417588e",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("8527be3f-3436-4517-94cb-fdb33417588e",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("8527be3f-3436-4517-94cb-fdb33417588e",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"9d0e5575-1bd5-447a-8212-c192e855b8a5",
	'firstParameterLabelLineNumber',
	'A scratchpad value employed while determining the textual position of any
parameter labels that are part of the composition of this value.
',
	'',
	'firstParameterLabelLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c9498699-f0b4-4421-bb39-6367648d0ea2",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("c9498699-f0b4-4421-bb39-6367648d0ea2",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("c9498699-f0b4-4421-bb39-6367648d0ea2",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"8527be3f-3436-4517-94cb-fdb33417588e",
	'firstParameterLabelColumn',
	'See currentLabelLine.',
	'',
	'firstParameterLabelColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("71c27a86-a2d5-4222-9b81-67a99919fa0a",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("71c27a86-a2d5-4222-9b81-67a99919fa0a",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("71c27a86-a2d5-4222-9b81-67a99919fa0a",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"c9498699-f0b4-4421-bb39-6367648d0ea2",
	'currentLaterParameterLabelLineNumber',
	'',
	'',
	'currentLaterParameterLabelLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0b73a212-6be2-43f1-8aad-587c96a91575",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("0b73a212-6be2-43f1-8aad-587c96a91575",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("0b73a212-6be2-43f1-8aad-587c96a91575",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"71c27a86-a2d5-4222-9b81-67a99919fa0a",
	'currentLaterParameterLabelColumn',
	'',
	'',
	'currentLaterParameterLabelColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ec363887-fd9e-4d97-9de6-13bbef4ffd33",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("ec363887-fd9e-4d97-9de6-13bbef4ffd33",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("ec363887-fd9e-4d97-9de6-13bbef4ffd33",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	'isLValue',
	'',
	'',
	'isLValue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6b18bb5e-25eb-43c2-8515-b7584a124608",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("6b18bb5e-25eb-43c2-8515-b7584a124608",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("6b18bb5e-25eb-43c2-8515-b7584a124608",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"ec363887-fd9e-4d97-9de6-13bbef4ffd33",
	'isImplicit',
	'',
	'',
	'isImplicit',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d43a9ca2-ce92-43b7-94bf-8aa2c9c81776",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_BATTR
	VALUES ("d43a9ca2-ce92-43b7-94bf-8aa2c9c81776",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ATTR
	VALUES ("d43a9ca2-ce92-43b7-94bf-8aa2c9c81776",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"412b8e14-865f-44c7-b302-689483475d1a",
	'Text',
	'Persistent:false',
	'',
	'Text',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	"35133802-1b64-4470-b677-760b79f4e5da",
	"ea19bf33-33fe-472f-85d4-94b6d1c2f4fe",
	"ae5970a9-4255-4238-845c-c0c695e89eee",
	"a92d9ff6-7e94-476d-85f4-ad9bade781fb",
	"76c4ba58-b325-4203-893c-87f41446228b",
	"de43d1f2-c059-45bd-aa73-741feeb0feb5",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Data Type',
	'DT_ID',
	'R820.''has type''');
INSERT INTO R_RGO_PROXY
	VALUES ("43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"ea19bf33-33fe-472f-85d4-94b6d1c2f4fe",
	"ae5970a9-4255-4238-845c-c0c695e89eee",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	"ea19bf33-33fe-472f-85d4-94b6d1c2f4fe",
	"a92d9ff6-7e94-476d-85f4-ad9bade781fb",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("76c4ba58-b325-4203-893c-87f41446228b",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("76c4ba58-b325-4203-893c-87f41446228b",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	"0b73a212-6be2-43f1-8aad-587c96a91575",
	'DT_ID',
	'',
	'',
	'Element_ID',
	2,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_OIDA
	VALUES ("6e185a42-0dc6-4b9d-9d4b-38cb7c8aa772",
	"43ea4f47-4fe8-4167-8153-9e199477d0fd",
	0,
	'Value_ID');
INSERT INTO O_ID
	VALUES (1,
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO O_ID
	VALUES (2,
	"43ea4f47-4fe8-4167-8153-9e199477d0fd");
INSERT INTO PE_PE
	VALUES ("43ea4f47-4fe8-4167-8153-9e199477d0fd",
	1,
	"8b9e8a8c-7fd0-4ca9-b025-f7949d99c0c5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("8b9e8a8c-7fd0-4ca9-b025-f7949d99c0c5",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Value',
	'This subsystem formalizes the concepts of values (r-values) and variables 
(l-values). It also captures the concept of an actual parameter.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	800,
	'../Value.xtuml');
