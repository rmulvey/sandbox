-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'State Machine State',
	502,
	'SM_STATE',
	'Represents a state in the state machine.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2bced40e-956f-4047-8640-beefe49cc7ff",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'get_style',
	'A State is shown as a round cornered box.
-----------------------------------------------------------------------------------
Bridge:GD',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::RoundBox;',
	1,
	'',
	"54e5f5d5-cf52-4a64-b9ff-0def78b938be");
INSERT INTO S_DT_PROXY
	VALUES ("05be3a7b-3886-4857-8a5e-5c08c37293ab",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("74393bd8-bf0a-4644-ba51-a4b99e1e1d12",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'get_compartments',
	'A State has two compartments, one for the Name and one for the
Action Semantics.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 2;',
	1,
	'',
	"ff9215b1-a0bf-4239-9166-a34f929f01e6");
INSERT INTO O_TFR
	VALUES ("ff9215b1-a0bf-4239-9166-a34f929f01e6",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'get_compartment_text',
	'Returns the Name or Action Semantics depending on the compartment
requested.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result = "";
//
// Compartment 1
//
if (param.comp_num == 1)
  if (param.at == Justification::Left)
    // State number needs leading space to clear
    // rounded corners of state symbol
    result = " " + GD::int_to_string(value:self.Numb) + ". " + self.Name;
  end if;
//
// Compartment 2
//
elif (param.comp_num == 2)
 if (param.at == Justification::Left)
    select one moore_action related by self->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
    if (not_empty moore_action)
      if (moore_action.Suc_Pars == ParseStatus::parseSuccessful)
        result = "entry/" + GD::newline();
      elif (moore_action.Suc_Pars == ParseStatus::parseUnsuccessful)
        result = "*** PARSE ERROR(S) ***" + GD::newline();
      end if;
      result = result + moore_action.Action_Semantics;
    end if;
  end if;
end if;
return result;',
	1,
	'',
	"8d25a492-8036-481d-a663-480bc3ee4b7c");
INSERT INTO O_TPARM
	VALUES ("93849718-6714-40a5-b459-97a60dd1ceb9",
	"ff9215b1-a0bf-4239-9166-a34f929f01e6",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b64fd7cd-10e5-48a7-8ed9-b6098570c400",
	'');
INSERT INTO O_TPARM
	VALUES ("665b26c1-eb46-42cd-8753-961900628acb",
	"ff9215b1-a0bf-4239-9166-a34f929f01e6",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"93849718-6714-40a5-b459-97a60dd1ceb9",
	'');
INSERT INTO O_TPARM
	VALUES ("b64fd7cd-10e5-48a7-8ed9-b6098570c400",
	"ff9215b1-a0bf-4239-9166-a34f929f01e6",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	"00000000-0000-0000-0000-000000000000",
	'Justification',
	'The Justification data type is used to specify text at a given location in a compartment.
------------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("41923aeb-3e93-4aa6-bb91-9efbf966031a",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'get_entries',
	'Both compartments have just one entry.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"74393bd8-bf0a-4644-ba51-a4b99e1e1d12");
INSERT INTO O_TPARM
	VALUES ("a42f05cb-b209-4c35-9102-8c934a15a7e2",
	"41923aeb-3e93-4aa6-bb91-9efbf966031a",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9aab2873-2b26-4459-95b1-ad7f61b86f23",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'get_text_style',
	'A State requires no special text style.
-----------------------------------------------------------------------------------
Bridge:GD',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::None;',
	1,
	'',
	"2bced40e-956f-4047-8640-beefe49cc7ff");
INSERT INTO O_TPARM
	VALUES ("df28cbe2-0488-429a-817a-b9cb8a16230c",
	"9aab2873-2b26-4459-95b1-ad7f61b86f23",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"554a1d23-20d8-4db6-9ef8-605b4bc51694",
	'');
INSERT INTO O_TPARM
	VALUES ("e881b931-ba70-4a33-acb2-99bf0d6bfcae",
	"9aab2873-2b26-4459-95b1-ad7f61b86f23",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"df28cbe2-0488-429a-817a-b9cb8a16230c",
	'');
INSERT INTO O_TPARM
	VALUES ("554a1d23-20d8-4db6-9ef8-605b4bc51694",
	"9aab2873-2b26-4459-95b1-ad7f61b86f23",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("54e5f5d5-cf52-4a64-b9ff-0def78b938be",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'get_ooa_id',
	'The ooa_id of a State is it''s SMstt_ID.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.SMstt_ID;',
	1,
	'',
	"41923aeb-3e93-4aa6-bb91-9efbf966031a");
INSERT INTO O_TFR
	VALUES ("41ba2b32-6377-4406-a84a-369c8dd0ebbb",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'initialize',
	'Initialize a new State instance.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'name = ::getUniqueInitialName( 
    instance: self.convertToInstance(), 
    candidateName: "Unnamed State");
success = ::getNewElementName(name:name,instance: self.convertToInstance(),validateName:true);    
if ( success!="") 
 self.Name=success;
else 
 self.dispose();
end if;    
// set this state''s number to a default value
self.Numb = 1;

// for each state associated with this state''s state machine
select many states related by self->SM_SM[R501]->SM_STATE[R501];
for each state in states
  // if this state equals self, skip it
  if (state.SMstt_ID == self.SMstt_ID) continue; end if;

  // if this other state''s number is greater than this state''s number
  if ( state.Numb >= self.Numb )
    // have this state''s number be just greater than this
    // other state''s number
    self.Numb = state.Numb + 1;
  end if;
end for;

create object instance ah of SM_AH;
create object instance moah of SM_MOAH;
relate ah to moah across R513;
select one sm related by self->SM_SM[R501];
select one msm related by sm->SM_MOORE[R510];
relate self to msm across R511 using moah;
create object instance act of SM_ACT;
relate act to ah across R514;
relate act to sm across R515;
//
// create SEM entry instances
//
select many event_set related by sm->SM_EVT[R502]->SM_SEVT[R525];
for each event in event_set
  create object instance sem of SM_SEME;
  // TODO: get default subtype from preferences
  create object instance ch of SM_CH;
  relate self to event across R503 using sem;
  relate ch to sem across R504;
end for;

act.Suc_Pars = ParseStatus::parseInitial;',
	1,
	'',
	"9aab2873-2b26-4459-95b1-ad7f61b86f23");
INSERT INTO O_TFR
	VALUES ("7fdf0fb0-d7cc-4243-8ae6-a1317d672269",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'dispose',
	'Dispose this State Machine State',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one sm_sm related by self->SM_SM[R501];
unrelate self from sm_sm across R501;
select many semes related by self->SM_SEME[R503];
for each seme in semes
  seme.dispose();
end for;
// New state xtns become No event xtns.
// No-event-transitions related by R508 are handled in txn.dispose
select many txns related by self->SM_TXN[R506];
for each txn in txns
  txn.dispose();
end for;
select many netxns related by self->SM_NETXN[R508]->SM_TXN[R507];
for each netxn in netxns
  netxn.dispose();
end for;
//
// Instance Subsystem
select many ins_sts related by self->I_INS[R2915];
for each ins_st in ins_sts
  unrelate self from ins_st across R2915;
end for;
select one cis related by self->CSME_CIS[R2932];
if (not_empty cis)
  cis.dispose();
end if;
//
// Breakpoint Subsystem
select one st_bp related by self->BP_ST[R3104];
if ( not_empty st_bp )
  unrelate self from st_bp across R3104;
  st_bp.dispose();
end if;
select one action related by self->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
if (not_empty action)
  action.dispose();
end if;
delete object instance self;
',
	1,
	'',
	"27fab948-8311-4845-9dc3-cf8a991b2250");
INSERT INTO O_TFR
	VALUES ("b43351a3-d281-444d-857f-7411586b87f8",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'actionFilter',
	'Bridge: UI
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'if (param.name == "can" )
  if ((param.value =="ch generic pkg" or param.value =="ignore spec pkg") or
      (param.value =="ch spec pkg" or param.value =="ignore generic pkg"))
  
    select one cls related by self->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
    if (empty cls)
      select one cls related by self->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
    end if;
    select one packageableElem related by cls->PE_PE[R8001];
    select one package related by packageableElem->EP_PKG[R8000];
    select one cc related by packageableElem->C_C[R8003];
    isInGenericPackage = not_empty package or not_empty cc;
    
    if (((param.value == "ch spec pkg") or (param.value == "ignore spec pkg")) )
      return false;
    end if;

	select any event from instances of SM_EVT
		where ::canStateIgnoreOrSayEventCantHappen(
			eventId:selected.SMevt_ID, eventStateMachineId:selected.SM_ID,
    		stateId:self.SMstt_ID, stateStateMachineId:self.SM_ID,
    		considerCantHappen:((param.value == "ch spec pkg") or (param.value == "ch generic pkg")));
    return not_empty event;
  end if;
end if;
return false;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("8139d65c-487a-4d3e-a6e2-1565236e60b7",
	"b43351a3-d281-444d-857f-7411586b87f8",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("adb0eb3b-9406-4396-a873-4d9d9cf95a74",
	"b43351a3-d281-444d-857f-7411586b87f8",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8139d65c-487a-4d3e-a6e2-1565236e60b7",
	'');
INSERT INTO O_TFR
	VALUES ("55ef95dc-d6a6-4f70-811e-b964f9639cdd",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'notAlreadyAssigned',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// if the given event is polymorphic and has an non-local event for
// this state''s state machine
select any event from instances of SM_EVT 
	where selected.SMevt_ID == param.eventId 
		and selected.SM_ID == param.eventStateMachineId;
select any nonLocalEvent related by event->SM_PEVT[R525]->SM_NLEVT[R527]->
	SM_SEVT[R526]->SM_EVT[R525] where selected.SM_ID == self.SM_ID;
if (not_empty nonLocalEvent)
	// consider the non-local event instead, since that is the one that would
	// be assigned within this state''s state machine
	event = nonLocalEvent;
end if;

if ( param.crtxn )
  select any crt related by self->SM_SM[R501]->SM_TXN[R505]->SM_CRTXN[R507]
      where selected.SMevt_ID == event.SMevt_ID;
  return empty crt;
else
  select any nst related by self->SM_SEME[R503]->SM_NSTXN[R504]
      where selected.SMevt_ID == event.SMevt_ID;
  return empty nst;
end if;

',
	1,
	'',
	"41ba2b32-6377-4406-a84a-369c8dd0ebbb");
INSERT INTO O_TPARM
	VALUES ("404ab83b-fb7c-44ff-adfb-22742db75815",
	"55ef95dc-d6a6-4f70-811e-b964f9639cdd",
	'eventId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"aecdb7d4-6ce2-4034-91d3-1a11ef46d6f1",
	'');
INSERT INTO O_TPARM
	VALUES ("aecdb7d4-6ce2-4034-91d3-1a11ef46d6f1",
	"55ef95dc-d6a6-4f70-811e-b964f9639cdd",
	'crtxn',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e0679cbf-c1db-4c92-88df-7093f3762b56",
	"55ef95dc-d6a6-4f70-811e-b964f9639cdd",
	'eventStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"404ab83b-fb7c-44ff-adfb-22742db75815",
	'');
INSERT INTO O_TFR
	VALUES ("3cfe802c-c019-4907-a144-8bd0a8f844e1",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'canIgnoreOrSayEventCantHappen',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
Returns whether the given event may be selected to be marked as ignored by, 
or said to can''t-happen on (as dictated by the considerCantHappen parameter), 
this state.
*/

// if the given event or this state belongs to a class state machine
select any event from instances of SM_EVT 
	where selected.SMevt_ID == param.eventId 
	and selected.SM_ID == param.eventStateMachineId;
if empty event
    return false;
end if;
select one eventClassStateMachine related by event->SM_SM[R502]->SM_ASM[R517];
select one selfStateMachine related by self->SM_SM[R501];
select one selfClassStateMachine related by selfStateMachine->SM_ASM[R517];
if (not_empty eventClassStateMachine or not_empty selfClassStateMachine)
	// if the the given event doesn''t belong to this state''s state machine 
	if (event.SM_ID != self.SM_ID) 
		// this state may not ignore the event or say it can''t happen
		return false;
 	end if;

// otherwise, it belongs to an instance state machine	
else 
	// if the given event is non-local
	select one nonLocalEvent related by event->SM_SEVT[R525]->SM_NLEVT[R526];
	if (not_empty nonLocalEvent) 
		// don''t allow it to be ignored/can''t-happened; during a separate call to 
		// this operation, we''ll consider the associated polymorphic event, 
		// instead, so there aren''t duplicates in the list that is presented to the user
		return false;
	end if;
		
	// if the given event doesn''t belong to this state''s state machine 
	select one selfClass related by selfStateMachine->SM_ISM[R517]->O_OBJ[R518];
	select one eventStateMachine related by event->SM_SM[R502]->SM_ISM[R517];
	if (param.eventStateMachineId != self.SM_ID)
		
		// if the given event doesn''t belong to a supertype of this state''s 
		// owning class
		select one eventClass related by eventStateMachine->O_OBJ[R518];
		if (not eventClass.isSupertypeOf(classId:selfClass.Obj_ID))
			// it can''t be ignored/can''t-happened within this state''s state machine
			return false;
		end if;
		
		// if the given event is assigned (or ignored/can''t-happened) anywhere 
		// on the path from the supertype state machine (inclusive) to this 
		// state''s state machine (exclusive)  
		if (event.isAssignedInSupertypeStateMachine(subtypeId:selfClass.Obj_ID))
			// it can''t be ignored/can''t-happened within this state''s state machine
			return false;
		end if;
		
	end if;
	
	// if the given event is assigned (or ignored/can''t-happened) in any subtype 
	// state machine of this state''s state machine  
	if (event.isAssignedInSubtypeStateMachine(supertypeId:selfClass.Obj_ID))
		// it can''t be ignored/can''t-happened within this state''s state machine
		return false;
	end if;
end if;
	
// if the given event has no associated matrix event
select one matrixEvent related by event->SM_SEVT[R525];
if (empty matrixEvent) 
	// it must be polymorphic, so use the aliasing event''s matrix event, instead
	select any matrixEvent related by event->SM_PEVT[R525]->SM_NLEVT[R527]->SM_SEVT[R526]
		where selected.SM_ID == self.SM_ID;
end if;

// if the matrix event has a matrix entry for this state
select any matrixEntry related by matrixEvent->SM_SEME[R503]
	where selected.SMstt_ID == self.SMstt_ID and selected.SM_ID == self.SM_ID;
if (not_empty matrixEntry) 
	// if we are considering whether the event can be made a can''t happen
	if (param.considerCantHappen)
		// if the matrix entry isn''t an ignore 
		select one ignore related by matrixEntry->SM_EIGN[R504];
		if (empty ignore) 
			// the event can''t be changed to a can''t happen
			return false;
		end if;

	// otherwise, we are considering whether the event can be ignored
	else
		// if the matrix entry isn''t a can''t happen 
		select one cantHappen related by matrixEntry->SM_CH[R504];
		if (empty cantHappen) 
			// the event can''t be changed to being ignored
			return false;
		end if;
	end if;

// otherwise, we''ll consider the lack of an entry to mean the default value, 
// which is can''t-happen 
else 
	// if we are considering whether the event can be made a can''t happen
	if (param.considerCantHappen)
		// the event is already considered to have that status
		return false;
	end if;
end if;

// the given event may be ignored/can''t-happened by this state
return true;',
	1,
	'',
	"b43351a3-d281-444d-857f-7411586b87f8");
INSERT INTO O_TPARM
	VALUES ("f37c3cda-de40-4bef-a620-2cc39c1e7aca",
	"3cfe802c-c019-4907-a144-8bd0a8f844e1",
	'eventId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5081e3c5-ef7f-451d-88e5-b15c9d36aee7",
	'');
INSERT INTO O_TPARM
	VALUES ("d0506816-7cc1-45fa-a50f-469cd23396c9",
	"3cfe802c-c019-4907-a144-8bd0a8f844e1",
	'eventStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f37c3cda-de40-4bef-a620-2cc39c1e7aca",
	'');
INSERT INTO O_TPARM
	VALUES ("5081e3c5-ef7f-451d-88e5-b15c9d36aee7",
	"3cfe802c-c019-4907-a144-8bd0a8f844e1",
	'considerCantHappen',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8d25a492-8036-481d-a663-480bc3ee4b7c",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'getNameWithClass',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/*
Returns this state''s name, qualified by the key-letters of its owning class.
*/
select one clazz related by self->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
if (empty clazz) 
	select one clazz related by self->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
end if;	
return clazz.Key_Lett + ": " + self.Name;',
	1,
	'',
	"7fdf0fb0-d7cc-4243-8ae6-a1317d672269");
INSERT INTO O_TFR
	VALUES ("27fab948-8311-4845-9dc3-cf8a991b2250",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// just return this instance as an Object
return this;',
	0,
	'',
	"850c771f-241b-4b87-963e-46c8cdaaaa39");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("850c771f-241b-4b87-963e-46c8cdaaaa39",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'checkBreakpoint',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// State Machine State.checkBreakpoint()
select one state_breakpoint related by self->BP_ST[R3104];
result = false;
if (not_empty state_breakpoint)
  select one breakpoint related by state_breakpoint->BP_BP[R3102];
  if (breakpoint.enabled)
    armed = false;
    if (param.changeType == StateChangeType::Entry and state_breakpoint.onEntry)
      armed = true;
    elif (param.changeType == StateChangeType::Exit and state_breakpoint.onExit)
      armed = true;
    end if;
      if (armed)
        result = breakpoint.incrementAndTestHitCount();
      end if;
    end if;
  end if;
return result;',
	1,
	'',
	"3cfe802c-c019-4907-a144-8bd0a8f844e1");
INSERT INTO O_TPARM
	VALUES ("0b64c5f9-bde8-4c95-a8e9-31359a9ff9e1",
	"850c771f-241b-4b87-963e-46c8cdaaaa39",
	'changeType',
	"2108c94f-72b2-451d-9a04-ba31a541a40c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2108c94f-72b2-451d-9a04-ba31a541a40c",
	"00000000-0000-0000-0000-000000000000",
	'StateChangeType',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("9f1888cc-6bd1-491e-b0e5-c84c6feb4196",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'checkIntegrity',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// check for any states with the same state number
select one class related by self->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
select one package related by class->PE_PE[R8001]->EP_PKG[R8000];
machineName = "Instance State Machine";
if(empty package)
  select one class related by self->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
  select one package related by class->PE_PE[R8001]->EP_PKG[R8000];
  machineName = "Class State Machine";
end if;
select one system related by package->S_SYS[R1405];
sys_id = GD::NULL_UNIQUE_ID();
if(not_empty system)
  sys_id = system.Sys_ID;
end if;
select many states related by self->SM_SM[R501]->SM_STATE[R501];
for each state in states
  if(state != self and state.Numb == self.Numb)
	MI_IM::createIssue(sys_id:sys_id, description:
	                   "Found another state under the same state machine " +
 	    "with the same state number.", severity:Severity::Error, name:self.Name,
	                     path:class.getPath(path:self.Name, includeSelf:true) +
	                    "::" + machineName + "::" + self.Name, id:self.SMstt_ID,
	                                          element:self.convertToInstance());
  end if;
  if(state != self and state.Name == self.Name)
	MI_IM::createIssue(sys_id:sys_id, description:
	                   "Found another state under the same state machine " +
 	    "with a matching name.", severity:Severity::Error, name:self.Name,
	                     path:class.getPath(path:self.Name, includeSelf:true) +
	                    "::" + machineName + "::" + self.Name, id:self.SMstt_ID,
	                                          element:self.convertToInstance());  
  end if;
end for;',
	1,
	'',
	"55ef95dc-d6a6-4f70-811e-b964f9639cdd");
INSERT INTO O_TFR
	VALUES ("b9293e9f-50f3-4921-930c-4b05d012a3aa",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'getDescription',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'select one action related by self->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
return action.Descrip;',
	1,
	'',
	"9f1888cc-6bd1-491e-b0e5-c84c6feb4196");
INSERT INTO O_TFR
	VALUES ("87c83000-33f1-47b3-baac-90a36c624ecf",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'getTransitionDestinationCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many transitions related by self->SM_TXN[R506];
return cardinality transitions; ',
	1,
	'',
	"b9293e9f-50f3-4921-930c-4b05d012a3aa");
INSERT INTO O_TFR
	VALUES ("48df18c1-dd64-46d6-8637-151ecfd2d1af",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'getTransitionDestinationId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many transitions related by self->SM_TXN[R506];
// We''re preincrementing the index
count = -1;
for each transition in transitions
  count = count + 1;
  if (count == param.index)
    id = transition.Trans_ID;
    break;
  end if;
end for; 
return id;',
	1,
	'',
	"87c83000-33f1-47b3-baac-90a36c624ecf");
INSERT INTO O_TPARM
	VALUES ("2f298e46-f4d6-448b-8dfc-c1ac8f43f6ca",
	"48df18c1-dd64-46d6-8637-151ecfd2d1af",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c8e83865-ce52-4297-ada0-23ea0a128795",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'getTransitionSourceCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'//Give me the count of all state for which this state is the source
count = 0;
select many transitions related by self->SM_NETXN[R508]->SM_TXN[R507];
count = count + cardinality transitions;
select many transitions related by self->SM_SEME[R503]->SM_NSTXN[R504]->SM_TXN[R507];
count = count + cardinality transitions;
return count;
',
	1,
	'',
	"48df18c1-dd64-46d6-8637-151ecfd2d1af");
INSERT INTO O_TFR
	VALUES ("9cd7799f-a730-4d2d-812d-b9b857f6d99f",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	'getTransitionSourceId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
// We''re preincrementing the index
count = -1;
select many noEventTransitions related by self->SM_NETXN[R508]->SM_TXN[R507];
for each noEventTransition in noEventTransitions
  count = count + 1;
  if (count == param.index)
    id = noEventTransition.Trans_ID;
    break;
  end if;
end for; 
if (id == GD::NULL_UNIQUE_ID())
  select many newStateTransitions related by self->SM_SEME[R503]->SM_NSTXN[R504]->SM_TXN[R507];
  for each newStateTransition in newStateTransitions
    count = count + 1;
    if (count == param.index)
      id = newStateTransition.Trans_ID;
      break;
    end if;
  end for; 
end if;
return id;
',
	1,
	'',
	"c8e83865-ce52-4297-ada0-23ea0a128795");
INSERT INTO O_TPARM
	VALUES ("a6b15196-fc24-42f8-ba50-6d6b7e4b194f",
	"9cd7799f-a730-4d2d-812d-b9b857f6d99f",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("5f53a782-ac02-423a-afd2-43e90959c0d4",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_BATTR
	VALUES ("5f53a782-ac02-423a-afd2-43e90959c0d4",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_ATTR
	VALUES ("5f53a782-ac02-423a-afd2-43e90959c0d4",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"00000000-0000-0000-0000-000000000000",
	'SMstt_ID',
	'Full Name: State Machine State Identifier',
	'',
	'SMstt_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	0,
	"918c8926-3597-4f97-bdc4-a65cf9de1666",
	"67f2d5f8-2797-413c-9359-44bdf97c990d",
	"360d129e-1f1d-41a4-8a3a-26bc0d108099",
	"a2fb2f13-7aa3-4ee1-9291-14256ef98f1b",
	"769395a9-378f-4c72-9fb6-a4b14f155ff3",
	"04c17f06-d884-4e89-a18c-a881b857ef4e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'State Machine',
	'SM_ID',
	'R501');
INSERT INTO R_RGO_PROXY
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"67f2d5f8-2797-413c-9359-44bdf97c990d",
	"360d129e-1f1d-41a4-8a3a-26bc0d108099",
	'../State Machine.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	0,
	"67f2d5f8-2797-413c-9359-44bdf97c990d",
	"a2fb2f13-7aa3-4ee1-9291-14256ef98f1b",
	'../State Machine.xtuml');
INSERT INTO O_REF
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"c7bef657-8c46-4a09-b499-e99eb1f234d4",
	0,
	"db24c693-2dba-4ec2-9495-6a4c92a23d6c",
	"77beb0c1-cbbe-4d6f-81cb-689d868bfd9a",
	"3e3f073e-d453-40cb-99f7-de303eaabae8",
	"ee253c3d-5090-467c-9dcf-ac3dfc21b3bd",
	"769395a9-378f-4c72-9fb6-a4b14f155ff3",
	"02f5b464-ae0f-4d9e-8fee-29aa63acf6a0",
	"04c17f06-d884-4e89-a18c-a881b857ef4e",
	0,
	'',
	'Event Supplemental Data',
	'SM_ID',
	'R521.''receives asynchronous data via''');
INSERT INTO R_RGO_PROXY
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"77beb0c1-cbbe-4d6f-81cb-689d868bfd9a",
	"3e3f073e-d453-40cb-99f7-de303eaabae8",
	'../State Machine.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("db24c693-2dba-4ec2-9495-6a4c92a23d6c",
	"c7bef657-8c46-4a09-b499-e99eb1f234d4",
	0,
	"77beb0c1-cbbe-4d6f-81cb-689d868bfd9a",
	"ee253c3d-5090-467c-9dcf-ac3dfc21b3bd",
	'../State Machine.xtuml');
INSERT INTO O_RATTR
	VALUES ("769395a9-378f-4c72-9fb6-a4b14f155ff3",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	1,
	'SM_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'../State Machine/State Machine.xtuml');
INSERT INTO O_ATTR
	VALUES ("769395a9-378f-4c72-9fb6-a4b14f155ff3",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"5f53a782-ac02-423a-afd2-43e90959c0d4",
	'SM_ID',
	'',
	'',
	'SM_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"c7bef657-8c46-4a09-b499-e99eb1f234d4",
	0,
	"687f0a3c-0ce1-40b3-a498-b18d64de5cc5",
	"77beb0c1-cbbe-4d6f-81cb-689d868bfd9a",
	"3e3f073e-d453-40cb-99f7-de303eaabae8",
	"ee253c3d-5090-467c-9dcf-ac3dfc21b3bd",
	"924f3841-dd03-41b4-8c58-21f46c69c91e",
	"83ddc9cd-09e4-46fb-b61b-1fcfdb840385",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Event Supplemental Data',
	'SMspd_ID',
	'R521.''receives asynchronous data via''');
INSERT INTO O_RTIDA_PROXY
	VALUES ("687f0a3c-0ce1-40b3-a498-b18d64de5cc5",
	"c7bef657-8c46-4a09-b499-e99eb1f234d4",
	0,
	"77beb0c1-cbbe-4d6f-81cb-689d868bfd9a",
	"ee253c3d-5090-467c-9dcf-ac3dfc21b3bd",
	'../State Machine.xtuml');
INSERT INTO O_RATTR
	VALUES ("924f3841-dd03-41b4-8c58-21f46c69c91e",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"687f0a3c-0ce1-40b3-a498-b18d64de5cc5",
	"c7bef657-8c46-4a09-b499-e99eb1f234d4",
	1,
	'SMspd_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("687f0a3c-0ce1-40b3-a498-b18d64de5cc5",
	"c7bef657-8c46-4a09-b499-e99eb1f234d4",
	'../Event Supplemental Data/Event Supplemental Data.xtuml');
INSERT INTO O_ATTR
	VALUES ("924f3841-dd03-41b4-8c58-21f46c69c91e",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"769395a9-378f-4c72-9fb6-a4b14f155ff3",
	'SMspd_ID',
	'',
	'',
	'SMspd_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("222f0be6-962e-4637-a633-10ff9d550ca7",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_BATTR
	VALUES ("222f0be6-962e-4637-a633-10ff9d550ca7",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_ATTR
	VALUES ("222f0be6-962e-4637-a633-10ff9d550ca7",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"924f3841-dd03-41b4-8c58-21f46c69c91e",
	'Name',
	'Full Name: State Name',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("44b86568-be63-4a76-ae33-57ca51e68ec5",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_BATTR
	VALUES ("44b86568-be63-4a76-ae33-57ca51e68ec5",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_ATTR
	VALUES ("44b86568-be63-4a76-ae33-57ca51e68ec5",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"222f0be6-962e-4637-a633-10ff9d550ca7",
	'Numb',
	'Full Name: State Number
min_value: 0
max_value: 9999
',
	'',
	'Numb',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9e3c7660-ceb9-47e6-95c2-33ae3079cb9f",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_BATTR
	VALUES ("9e3c7660-ceb9-47e6-95c2-33ae3079cb9f",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_ATTR
	VALUES ("9e3c7660-ceb9-47e6-95c2-33ae3079cb9f",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	"44b86568-be63-4a76-ae33-57ca51e68ec5",
	'Final',
	'Full Name: Final State Indicator
Description: Indicates whether or not the state is a final state
Data Domain: 0 = not a final state, 1 = final state
enum0: Non-final state
enum1: Final state
',
	'',
	'Final',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_OIDA
	VALUES ("769395a9-378f-4c72-9fb6-a4b14f155ff3",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	0,
	'SM_ID');
INSERT INTO O_OIDA
	VALUES ("5f53a782-ac02-423a-afd2-43e90959c0d4",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	0,
	'SMstt_ID');
INSERT INTO O_ID
	VALUES (1,
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO O_OIDA
	VALUES ("924f3841-dd03-41b4-8c58-21f46c69c91e",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	1,
	'SMspd_ID');
INSERT INTO O_OIDA
	VALUES ("5f53a782-ac02-423a-afd2-43e90959c0d4",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	1,
	'SMstt_ID');
INSERT INTO O_OIDA
	VALUES ("769395a9-378f-4c72-9fb6-a4b14f155ff3",
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	1,
	'SM_ID');
INSERT INTO O_ID
	VALUES (2,
	"057bc1d4-d11a-40fe-bfb9-e1bd7658f24d");
INSERT INTO PE_PE
	VALUES ("057bc1d4-d11a-40fe-bfb9-e1bd7658f24d",
	1,
	"3314c083-3e42-4dfd-8a60-9305d01957ef",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("3314c083-3e42-4dfd-8a60-9305d01957ef",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'State Machine',
	'Classes (O_OBJ) that have interesting behavior are given lifecycles. These lifecycles are described using state machines (SM_SM). A state machine consists of states, events, transitions and state actions. The state machine exists for each instance of the class for which it has been modeled (SM_ISM). A state machine can also be an assigner state machine (SM_ASM) of which only one can exists for all class instances. The purpose of the assigner state machine is to act as a single point of control through which competing requests are serialized.',
	501,
	'../State Machine.xtuml');
