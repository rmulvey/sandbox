-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'State Machine',
	501,
	'SM_SM',
	'A State Machine represents the lifecycle of a class in terms of states, transitions, events, and actions.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("a34562b7-2bf1-4f64-b0af-57cf80967d7d",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'get_name',
	'Creates a string containing a descriptive name for the instance.',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'select one ism related by self->SM_ISM[R517];
if not_empty ism
  return ism.get_name();
else
  select one asm related by self->SM_ASM[R517];
  if not_empty asm
    return asm.get_name();
  else
    // during import, may not be related yet
    return "";
  end if;
end if;
',
	1,
	'',
	"09cc98a3-3ca6-4f92-bf13-d15f643c74b6");
INSERT INTO O_TFR
	VALUES ("1c6fe453-5d23-417a-9699-77391e8cb44d",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'newState',
	'Create a new State in this State Machine',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'create object instance st of SM_STATE;
relate self to st across R501;
st.initialize();',
	1,
	'',
	"136f31c0-86f8-46f3-b0ed-960cca0fd20f");
INSERT INTO O_TFR
	VALUES ("d9c019ce-bb0d-4421-91c8-2f5b9357f1a9",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'dispose',
	'The dispose operation for this class.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one ism related by self->SM_ISM[R517];
if (not_empty ism)
  select one ismclass related by ism->O_OBJ[R518];
  select any attr related by ismclass->O_ATTR[R102] where selected.Name == "current_state";
  if (not_empty attr)
    attr.dispose();
  end if;
  unrelate ism from ismclass across R518;
  unrelate self from ism across R517;
  delete object instance ism;
end if;
select one asm related by self->SM_ASM[R517];
if (not_empty asm)
  select one asmclass related by asm->O_OBJ[R519];
  unrelate asm from asmclass across R519;
  unrelate self from asm across R517;
  delete object instance asm;
end if;
select many evts related by self->SM_EVT[R502];
for each evt in evts
  evt.dispose();
end for;
select many evtdis related by self->SM_EVTDI[R516];
for each evtdi in evtdis
  evtdi.dispose();
end for;
select many supdts related by self->SM_SUPDT[R523];
for each supdt in supdts
  supdt.dispose();
end for;
select many states related by self->SM_STATE[R501];
for each state in states
  state.dispose();
end for;
select many trans related by self->SM_TXN[R505];
for each tran in trans
  tran.dispose();
end for;
// moore.dispose will clean up all actions to related to this SM_SM
//select many actions related by self->SM_ACT[R515];
//for each action in actions
//end for;
select one moore related by self->SM_MOORE[R510];
if (not_empty moore)
  moore.dispose();
end if;
//
select many aps related by self->CA_ACC[R416];
for each ap in aps
  ap.dispose();
end for;
select many ecps related by self->CA_EESMC[R403]->CA_COMM[R401];
for each ecp in ecps
  ecp.dispose();
end for;
select many scps related by self->CA_SMSMC[R406]->CA_COMM[R401];
for each scp in scps
  scp.dispose();
end for;
select many ocps related by self->CA_SMSMC[R407]->CA_COMM[R401];
for each ocp in ocps
  ocp.dispose();
end for;
select many secps related by self->CA_SMEEC[R410]->CA_COMM[R401];
for each secp in secps
  secp.dispose();
end for;
delete object instance self;',
	1,
	'',
	"65bb570c-4216-4b3b-937e-52f695c91f76");
INSERT INTO O_TFR
	VALUES ("136f31c0-86f8-46f3-b0ed-960cca0fd20f",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'newEvent',
	'Create a new Event in this State Machine',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'create object instance newEvent of SM_EVT;
relate self to newEvent across R502;
newEvent.initialize();

',
	1,
	'',
	"227544a8-11ed-46ce-86f6-434a047b99de");
INSERT INTO O_TFR
	VALUES ("6c1be1a4-e149-41a8-b852-7a57e68cd488",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'newTransition',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any fromState related by self->SM_STATE[R501] where (selected.SMstt_ID == param.from);
select any toState related by self->SM_STATE[R501] where (selected.SMstt_ID == param.to);
if (not_empty fromState and not_empty toState)
  create object instance tr of SM_TXN;
  create object instance net of SM_NETXN;
  relate tr to net across R507;
  relate net to fromState across R508;
  relate tr to toState across R506;
  relate self to tr across R505;
  tr.initialize();
  return true;
else
  return false;
end if;',
	1,
	'',
	"1c6fe453-5d23-417a-9699-77391e8cb44d");
INSERT INTO O_TPARM
	VALUES ("9f696b6d-6da1-4c2b-98e7-5ca94a84062c",
	"6c1be1a4-e149-41a8-b852-7a57e68cd488",
	'from',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a0e2200a-95d5-47f0-86fc-fdd026dca37c",
	"6c1be1a4-e149-41a8-b852-7a57e68cd488",
	'to',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9f696b6d-6da1-4c2b-98e7-5ca94a84062c",
	'');
INSERT INTO O_TFR
	VALUES ("227544a8-11ed-46ce-86f6-434a047b99de",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'newCreationTransition',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'//
// Note: for compatibility with BridgePoint builder, the
// target state ID is passed in the from argument.
//
select any state related by self->SM_STATE[R501] where (selected.SMstt_ID == param.from);
if (not_empty state)
  create object instance tr of SM_TXN;
  create object instance ct of SM_CRTXN;
  relate tr to ct across R507;
  relate tr to state across R506;
  relate self to tr across R505;
  tr.initialize();
  return true;
else
  return false;
end if;',
	1,
	'',
	"a2c0316e-cf40-4bca-9e3b-55f77569ecc9");
INSERT INTO O_TPARM
	VALUES ("7eb7cb55-32d2-4505-9048-7eb8937dcb9c",
	"227544a8-11ed-46ce-86f6-434a047b99de",
	'from',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("bcdadd0c-dc66-4eb3-a66d-2ff9a9b1dc83",
	"227544a8-11ed-46ce-86f6-434a047b99de",
	'to',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7eb7cb55-32d2-4505-9048-7eb8937dcb9c",
	'');
INSERT INTO O_TFR
	VALUES ("f57c1c29-4558-4a7f-a6c0-8e63c3525c72",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'canAssignEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
This operation only exists because of a bug in MC-Java where an operation may 
not be called on the selected item in the where clause of a select statement.
There is a function in cme_functions.sql that needs to call 
[State Machine Event].isAssignableToStateMachine() in such a circumstance, 
so it instead calls this, which then makes the desired call.
*/

select any event from instances of SM_EVT 
	where selected.SMevt_ID == param.eventId 
	and selected.SM_ID == param.eventStateMachineId;
if(not_empty event)
  return event.isAssignableToStateMachine(assignToMachineId:self.SM_ID,
	  isCreationTransition:param.isCreationTransition);
end if;
return false;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("dec0cd44-bbb8-4e2e-b08a-87ac734b0066",
	"f57c1c29-4558-4a7f-a6c0-8e63c3525c72",
	'eventId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d46b9632-fb00-4f24-bc99-19b8c4b07fbd",
	"f57c1c29-4558-4a7f-a6c0-8e63c3525c72",
	'eventStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"dec0cd44-bbb8-4e2e-b08a-87ac734b0066",
	'');
INSERT INTO O_TPARM
	VALUES ("ca355b5f-7eb2-4325-9439-ae9932bc72c1",
	"f57c1c29-4558-4a7f-a6c0-8e63c3525c72",
	'isCreationTransition',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"d46b9632-fb00-4f24-bc99-19b8c4b07fbd",
	'');
INSERT INTO O_TFR
	VALUES ("be57e684-8728-4293-9c2c-77d701bc01bd",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.SM_ID;',
	1,
	'',
	"a34562b7-2bf1-4f64-b0af-57cf80967d7d");
INSERT INTO O_TFR
	VALUES ("e5219cd5-6f47-49ca-9f8b-64780fc8933f",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'pasteTransition',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any transition from instances of SM_TXN where
                                                  selected.Trans_ID == param.id;
if(not_empty transition)
  // update the association of the Action to the new state machine
  select one action related by transition->SM_TAH[R530]->
                                                      SM_AH[R513]->SM_ACT[R514];
  if(not_empty action)
    select one prevMachine related by action->SM_SM[R515];
    if(not_empty prevMachine)
      unrelate action from prevMachine across R515;
    end if;
    relate action to self across R515;
  end if;
  select one existingSM related by transition->SM_SM[R505];
  if(not_empty existingSM)
    unrelate transition from existingSM across R505;
  end if;
  relate transition to self across R505;
  transition.updateAssignedEventOrSignal();
end if;',
	1,
	'',
	"fd5af724-6f8e-432e-af0f-1568ab54c50b");
INSERT INTO O_TPARM
	VALUES ("e1e1659d-f294-40dc-aa74-4478ef84f613",
	"e5219cd5-6f47-49ca-9f8b-64780fc8933f",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fd5af724-6f8e-432e-af0f-1568ab54c50b",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'pasteStateMachineState',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any state from instances of SM_STATE where (selected.SMstt_ID == param.id);
if(not_empty state)
  // remove any matrix entries where the event is not copied as well
  select many semes related by state->SM_SEME[R503];
  for each seme in semes
    select one semEvt related by seme->SM_SEVT[R503];
    if(empty semEvt)
      seme.dispose();
    end if;
  end for;
  // update the association of the Action to the new state machine
  select one action related by state->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
  select one prevMachine related by action->SM_SM[R515];
  if(not_empty prevMachine)
    unrelate action from prevMachine across R515;
  end if;
  select one ism related by self->SM_ISM[R517];
  select one asm related by self->SM_ASM[R517];
  relate action to self across R515;
  if(not_empty asm)
    // guarantee unique name
    state.Name = ::getUniqueInitialNameInParent(instance:state.convertToInstance(),
  						name:state.Name, parent:asm.convertToInstance());
  elif(not_empty ism)
    // guarantee unique name
    state.Name = ::getUniqueInitialNameInParent(instance:state.convertToInstance(),
  						name:state.Name, parent:ism.convertToInstance());  
  end if;
  select one mah related by state->SM_MOAH[R511];
  select one prevMooreMachine related by mah->SM_MOORE[R511];
  if(not_empty prevMooreMachine)
    unrelate state from prevMooreMachine across R511 using mah;
  end if;
  select one msm related by self->SM_MOORE[R510];
  relate state to msm across R511 using mah;
  // guarantee unique state number
  select many existingStates related by self->SM_STATE[R501];
  select any sameNumberState related by self->SM_STATE[R501] where (selected.Numb == state.Numb);
  if(not_empty sameNumberState)
    greatestNumb = 1;
    for each existingState in existingStates
      // store the greatest state number
      if(existingState.Numb > greatestNumb)
        greatestNumb = existingState.Numb;
      end if;
    end for;
    state.Numb = greatestNumb + 1;
  end if;
  // create SEM entry instances
  //
  select many event_set related by self->SM_EVT[R502]->SM_SEVT[R525];
  for each event in event_set
    create object instance sem of SM_SEME;
    // TODO: get default subtype from preferences
    create object instance ch of SM_CH;
    relate state to event across R503 using sem;
    relate ch to sem across R504;
  end for;
  relate state to self across R501;
end if;',
	1,
	'',
	"6c1be1a4-e149-41a8-b852-7a57e68cd488");
INSERT INTO O_TPARM
	VALUES ("927d51a1-e0dd-4810-8d63-0d7d01ac6928",
	"fd5af724-6f8e-432e-af0f-1568ab54c50b",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f4a38e0a-826a-4098-b0e2-773dc475284e",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'removeIncompleteNonLocalEvents',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// for each non-local event in this machine, convert
// it to a local one if necessary
select many evts related by self->SM_EVT[R502];
for each evt in evts
  select one nlevt related by evt->SM_SEVT[R525]->SM_NLEVT[R526];
  if(not_empty nlevt)
    nlevt.resolveInheritedEvent();
  end if;
  select one sigEvt related by evt->SM_SEVT[R525]->SM_SGEVT[R526];
  if(not_empty sigEvt)
    // for all transitions that this event is assigned to
    select many transitions related by evt->SM_SEVT[R525]->SM_SEME[R503]
                                                 ->SM_NSTXN[R504]->SM_TXN[R507];
    for each transition in transitions
      // have the transition update the signal
      transition.updateAssignedSignal();
    end for;
  end if;
end for;',
	1,
	'',
	"e5219cd5-6f47-49ca-9f8b-64780fc8933f");
INSERT INTO O_TFR
	VALUES ("0e51a9e7-6eb4-46d3-848f-def771c807b6",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'findMatchingEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'/*
Find an event within this machine that matches the given event.
The event will match if the name and signature are identical.
*/
foundMatch = false;
select any existingEvt related by self->SM_EVT[R502];
select any evt from instances of SM_EVT where (selected.SMevt_ID == param.id);
if(not_empty evt)
  select one nlevt related by evt->SM_SEVT[R525]->SM_NLEVT[R526];
  isPoly = false;
  if(not_empty nlevt)
    isPoly = true;
  end if;
  name = evt.Mning;
  numb = evt.Numb;
  select many events related by self->SM_EVT[R502];
  for each existingEvent in events
    if(param.isCreation)
      select many creationTransitionsAssigned related by events->
                                   SM_SEVT[R525]->SM_LEVT[R526]->SM_CRTXN[R509];
      if(not (cardinality events > cardinality creationTransitionsAssigned))
        // if all events are used by other creation transitions we
        // cannot use an existing one
        continue;
      else
        select any otherEvt related by self->SM_EVT[R502] where
                                                         selected.Mning == name;
        select one existingCreationTrans related by otherEvt->SM_SEVT[R525]->
                                                  SM_LEVT[R526]->SM_CRTXN[R509];
        if(not_empty existingCreationTrans)
          // if the resolved event is already assigned to a creation transition
          // it cannot be used
          continue;
        end if;
      end if;
    end if;
    if(existingEvent.Mning == name)
      // we cannot use any event that is a polymorphic event and that
      // is referenced by any subtype 
      select one poly related by existingEvent->SM_PEVT[R525];
      if(not_empty poly)
        select any nlevt related by poly->SM_NLEVT[R527];
        if(not_empty nlevt)
          select any evtSM from instances of SM_SM where
                                              selected.SM_ID == param.machineID;
          if(evtSM == self)
            // can''t be used
            continue;
          end if;
        end if;
      end if;
      foundMatch = true;
      existingEvt = existingEvent;
      break;
    end if;
  end for;
end if;
if(foundMatch)
  return existingEvt.SMevt_ID;
end if;
return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"d9c019ce-bb0d-4421-91c8-2f5b9357f1a9");
INSERT INTO O_TPARM
	VALUES ("e349a681-daf0-48f4-8b48-3f04543a2cb9",
	"0e51a9e7-6eb4-46d3-848f-def771c807b6",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("aaad57f7-e13f-47cb-be5a-be85e2b9f35d",
	"0e51a9e7-6eb4-46d3-848f-def771c807b6",
	'isCreation',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e349a681-daf0-48f4-8b48-3f04543a2cb9",
	'');
INSERT INTO O_TPARM
	VALUES ("f4a446ec-1eac-4ec4-a534-47bd1a79af11",
	"0e51a9e7-6eb4-46d3-848f-def771c807b6",
	'machineID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"aaad57f7-e13f-47cb-be5a-be85e2b9f35d",
	'');
INSERT INTO O_TFR
	VALUES ("65bb570c-4216-4b3b-937e-52f695c91f76",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'canAssignSignal',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/* State Machine.canAssignSignal
This operation only exists because of a bug in generator where an operation may
not be called on the selected item in the where clause of a select statement.
There is a function in cme_functions.sql that needs to call
[Required/Provided Signal].canAssignSignal in such a circumstance,
so it instead calls this, which then makes the desired call.
*/
select one packageableElem related by self->SM_ASM[R517]->O_OBJ[R519]->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];

  select any containingComponent from instances of C_C where
                                            selected.Id == GD::NULL_UNIQUE_ID();
  if not_empty package
    containingComponentId = package.getContainingComponentId();
    select any containingComponent from instances of C_C where
                                           selected.Id == containingComponentId;
  end if;
  select any interfaceSignal related by containingComponent->C_PO[R4010]->
                                        C_IR[R4016]->C_I[R4012]->C_EP[R4003] 
                                         where (selected.Id == param.signal_id);

select any reqEP related by interfaceSignal->SPR_REP[R4500] where
                               selected.ExecutableProperty_Id == param.signal_id
                              and selected.Requirement_Id == param.interface_id;
if not_empty reqEP
  select one reqSig related by reqEP->SPR_RS[R4502];
  return reqSig.isAvailableForAllocationTo(transition_id:param.transition_id);
else
  select any provEP related by interfaceSignal->SPR_PEP[R4501] where
                               selected.ExecutableProperty_Id == param.signal_id
                                and selected.Provision_Id == param.interface_id;
  if not_empty provEP
    select one provSig related by provEP->SPR_PS[R4503];
    return provSig.isAvailableForAllocationTo(transition_id:
                                                           param.transition_id);
  end if;
end if;
return false;',
	1,
	'',
	"f57c1c29-4558-4a7f-a6c0-8e63c3525c72");
INSERT INTO O_TPARM
	VALUES ("3a0868ea-d2ec-46a9-be94-055232671057",
	"65bb570c-4216-4b3b-937e-52f695c91f76",
	'signal_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8ebe30b6-b0b8-4ba8-936a-04db3fda27ae",
	'');
INSERT INTO O_TPARM
	VALUES ("ebca0428-2d1a-4e12-9481-c054a327754a",
	"65bb570c-4216-4b3b-937e-52f695c91f76",
	'transition_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3a0868ea-d2ec-46a9-be94-055232671057",
	'');
INSERT INTO O_TPARM
	VALUES ("8ebe30b6-b0b8-4ba8-936a-04db3fda27ae",
	"65bb570c-4216-4b3b-937e-52f695c91f76",
	'interface_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a2c0316e-cf40-4bca-9e3b-55f77569ecc9",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'hasValidSignals',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// State Machine.hasValidSignals()
select one packageableElem related by self->SM_ASM[R517]->O_OBJ[R519]->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];

  containingComponentId = package.getContainingComponentId();
  select any containingComponent from instances of C_C where
                                           selected.Id == containingComponentId;
  select any ifRef related by containingComponent->C_PO[R4010]->C_IR[R4016] 
                                        where selected.Id == param.interface_id;

select many signals related by ifRef->C_I[R4012]->C_EP[R4003]->C_AS[R4004];
for each sig in signals
  if self.canAssignSignal(signal_id:sig.Id, transition_id:param.transition_id,
                                                          interface_id:ifRef.Id)
    return true;
  end if;
end for;
return false;',
	1,
	'',
	"be57e684-8728-4293-9c2c-77d701bc01bd");
INSERT INTO O_TPARM
	VALUES ("460f15ac-54b7-4c87-a735-8c0ad888831c",
	"a2c0316e-cf40-4bca-9e3b-55f77569ecc9",
	'interface_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("1ef45798-9330-434e-9c6f-1b239984c46a",
	"a2c0316e-cf40-4bca-9e3b-55f77569ecc9",
	'transition_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"460f15ac-54b7-4c87-a735-8c0ad888831c",
	'');
INSERT INTO O_TFR
	VALUES ("09cc98a3-3ca6-4f92-bf13-d15f643c74b6",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'getContainingComponentId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'select one clazz related by self->SM_ASM[R517]->O_OBJ[R519];
if(empty clazz)
  select one clazz related by self->SM_ISM[R517]->O_OBJ[R518];
end if;
return clazz.getContainingComponentId();',
	1,
	'',
	"0e51a9e7-6eb4-46d3-848f-def771c807b6");
INSERT INTO O_TFR
	VALUES ("b2e0fd03-71e2-48fe-afc1-58e64c5d5f8e",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'getContainerId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// State Machine.getContainerId()
select one clazz related by self->SM_ASM[R517]->O_OBJ[R519];
if(empty clazz)
  select one clazz related by self->SM_ISM[R517]->O_OBJ[R518];
end if;
return clazz.getContainerId();',
	1,
	'',
	"f4a38e0a-826a-4098-b0e2-773dc475284e");
INSERT INTO O_TFR
	VALUES ("8dd47547-1b69-4d33-842d-96ed55a4b49d",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'pasteStateMachineEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any evt from instances of SM_EVT where (selected.SMevt_ID == param.id);
if(not_empty evt)
  select one existingMachine related by evt->SM_SM[R502];
  if(not_empty existingMachine)
    unrelate existingMachine from evt across R502;
  end if;
  relate self to evt across R502;
  select one ism related by self->SM_ISM[R517];
  if(not_empty ism)
    evt.Mning = ::getUniqueInitialNameInParent( 
      instance: evt.convertToInstance(), 
      name: evt.Mning, parent:ism.convertToInstance());
  else
    select one asm related by self->SM_ASM[R517];
    evt.Mning = ::getUniqueInitialNameInParent( 
      instance: evt.convertToInstance(), 
      name: evt.Mning, parent:asm.convertToInstance());    
  end if;
  evt.setUniqueNumber(checkForDuplicate:false);
  select one sem related by evt->SM_SEVT[R525];
  sem.createDefaultMatrixEntries();
  // for each data item copied associate it with
  // self
  select many items related by evt->SM_EVTDI[R532];
  for each item in items
    select one existingSm related by item->SM_SM[R516];
    if(not_empty existingSm)
      unrelate item from existingSm across R516;
    end if;
    relate item to self across R516;
  end for;
end if;',
	1,
	'',
	"b2e0fd03-71e2-48fe-afc1-58e64c5d5f8e");
INSERT INTO O_TPARM
	VALUES ("71329653-0d77-4804-a684-cd4e886421f2",
	"8dd47547-1b69-4d33-842d-96ed55a4b49d",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("39c8b659-3870-416a-946c-9a64c3c48a91",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'canCopyStateMachineEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any evt from instances of SM_EVT where (selected.SMevt_ID == param.id);
if(not_empty evt)
  select one poly related by evt->SM_PEVT[R525];
  if(not_empty poly)
    return false;
  end if;
  select one nonlocal related by evt->SM_SEVT[R525]->SM_NLEVT[R526];
  if(not_empty nonlocal)
    return false;
  end if;
else
  return false;
end if;
return true;',
	1,
	'',
	"8dd47547-1b69-4d33-842d-96ed55a4b49d");
INSERT INTO O_TPARM
	VALUES ("87948a1c-c8d3-4232-b805-59aade59177d",
	"39c8b659-3870-416a-946c-9a64c3c48a91",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("54cebd07-6736-4691-b76f-8825b699617a",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'removeIncompleteSignalEvents',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// for each signal event in this machine, convert
// it to a local one if necessary
select many evts related by self->SM_EVT[R502];
for each evt in evts
  select one sigEvt related by evt->SM_SEVT[R525]->SM_SGEVT[R526];
  if(not_empty sigEvt)
    // for all transitions that this event is assigned to
    select many transitions related by evt->SM_SEVT[R525]->SM_SEME[R503]
                                                 ->SM_NSTXN[R504]->SM_TXN[R507];
    for each transition in transitions
      // have the transition update the signal
      transition.updateAssignedSignal();
    end for;
  end if;
end for;',
	1,
	'',
	"39c8b659-3870-416a-946c-9a64c3c48a91");
INSERT INTO O_TFR
	VALUES ("bc7b7191-a9b9-444e-88c9-cc8d395bed0b",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	'getPath',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result= "";
select one classSM related by self->SM_ASM[R517];
select one instSM related by self->SM_ISM[R517];
if (not_empty classSM)
    select one modelClass related by classSM->O_OBJ[R519];
    result ="::Class Based State Machine::"+modelClass.getPath(path:modelClass.Name,includeSelf:true);
elif (not_empty instSM)
    select one modelClass related by instSM->O_OBJ[R518];
    result ="::Instance Based State Machine::"+modelClass.getPath(path:modelClass.Name,includeSelf:true);
end if; 

return result;

',
	1,
	'',
	"54cebd07-6736-4691-b76f-8825b699617a");
INSERT INTO O_NBATTR
	VALUES ("918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_BATTR
	VALUES ("918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_ATTR
	VALUES ("918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	"00000000-0000-0000-0000-000000000000",
	'SM_ID',
	'Full Name: State Machine Identifier',
	'',
	'SM_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f3202b31-d9f6-4e7d-b43a-4bc1d57d3b70",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_BATTR
	VALUES ("f3202b31-d9f6-4e7d-b43a-4bc1d57d3b70",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_ATTR
	VALUES ("f3202b31-d9f6-4e7d-b43a-4bc1d57d3b70",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	"918c8926-3597-4f97-bdc4-a65cf9de1666",
	'Descrip',
	'Full Name: Description
User_Visible:false',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("22f333ef-ef05-4df2-b1e2-14eda9910a5b",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_BATTR
	VALUES ("22f333ef-ef05-4df2-b1e2-14eda9910a5b",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_ATTR
	VALUES ("22f333ef-ef05-4df2-b1e2-14eda9910a5b",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	"f3202b31-d9f6-4e7d-b43a-4bc1d57d3b70",
	'Config_ID',
	'Full Name: Configuration Identifier
Description: The component ID of  this state machine.
impl_detail: true
min_value: 0
max_value: 510
readonly: true
User_Visible:false
',
	'',
	'Config_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_OIDA
	VALUES ("918c8926-3597-4f97-bdc4-a65cf9de1666",
	"a1150e32-8c3e-4e21-8295-75b0c795b02d",
	0,
	'SM_ID');
INSERT INTO O_ID
	VALUES (1,
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO O_ID
	VALUES (2,
	"a1150e32-8c3e-4e21-8295-75b0c795b02d");
INSERT INTO PE_PE
	VALUES ("a1150e32-8c3e-4e21-8295-75b0c795b02d",
	1,
	"3314c083-3e42-4dfd-8a60-9305d01957ef",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("3314c083-3e42-4dfd-8a60-9305d01957ef",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'State Machine',
	'Classes (O_OBJ) that have interesting behavior are given lifecycles. These lifecycles are described using state machines (SM_SM). A state machine consists of states, events, transitions and state actions. The state machine exists for each instance of the class for which it has been modeled (SM_ISM). A state machine can also be an assigner state machine (SM_ASM) of which only one can exists for all class instances. The purpose of the assigner state machine is to act as a single point of control through which competing requests are serialized.',
	501,
	'../State Machine.xtuml');
