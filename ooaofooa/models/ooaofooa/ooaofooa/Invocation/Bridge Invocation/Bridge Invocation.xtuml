-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("d392dc0a-0309-487d-a403-a78db9ce3f0c",
	'Bridge Invocation',
	620,
	'ACT_BRG',
	'This class represents the invocation of an External Entity Bridge.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("d8e525f1-3ecf-4a74-a27e-82c0bc6e7485",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one brg related by self->S_BRG[R674];
if ( not empty brg )
  unrelate self from brg across R674;
end if;

select many parm_set related by self->V_PAR[R628];
for each parm in parm_set 
  unrelate self from parm across R628;
  parm.dispose();
end for;

delete object instance self;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("e66e6955-14a2-4004-bb4b-bf3a22f3c472",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	'execute',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Invocation:Bridge Invocation.execute()
select one body related by self ->ACT_SMT[R603]->ACT_BLK[R602]->ACT_ACT[R601];   

select one brg related by self->S_BRG[R674];
select one ee related by brg->S_EE[R19];

// Get the top stack frame
select any stack_frame from instances of I_STF where
                                selected.Stack_Frame_ID == param.stack_frame_id;
if empty stack_frame
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Invocation.execute: " +
                      "Could not get stack frame to retrieve parameter value.",path:pathMsg);  
end if;

// Execute the bridge
select one body related by brg->ACT_BRB[R697]->ACT_ACT[R698];
select any statement related by body->ACT_BLK[R601]->ACT_SMT[R602];
if (not_empty statement and not ee.isRealized)
  // Setup the parameter values within the newly created stack frame
  // We discard the result because it just tells us if we''re going yet deeper
  // in the call tree. This can happen if a parameter is itself a call, but
  // we do not need to do anything different in that case.
  discard = self.setupParameterValues(stack_frame_id: param.stack_frame_id,
                                   target_stack_frame_id: GD::NULL_UNIQUE_ID());
else
  // Select the parameter and arguments for this bridge invocation
  select many parms related by brg->S_BPARM[R21];
  select many args related by self->V_PAR[R628];
  // do not attempt any realized execution unless the user has the EE
  // configured as realized
  if(not ee.isRealized)
    // log an error so that the user knows that nothing
    // will be done
	pathMsg = "<No Path Available - Empty instance>";
	if (not_empty body)
	  pathMsg = body.getPath();
	end if;
	USER::logError(msg:"External Entity: " + ee.Name
						    + " is modeled and the bridge: "
            + brg.Name + " has no OAL to execute.  Skipping bridge invocation.",
						path:pathMsg);
    for each arg in args
      stack_frame.popValue(value_id:arg.Value_ID);
    end for;
    return;
  end if;
  for each parm in parms
    for each arg in args
      if (parm.Name == arg.Name)
        select one act_val related by arg->V_VAL[R800];
        act_val.computeValue(stack_frame_id: stack_frame.Stack_Frame_ID);
        select any result related by stack_frame->I_VSF[R2951] where
                                          selected.Value_ID == act_val.Value_ID;
        select one rtVal related by result->RV_RVL[R3305];
        if (empty rtVal)
          // Result requires computation.
          // Return and let the new stack frame execute
          return;    
        end if;
      end if;
    end for;
  end for;
  // We could not find OAL to execute, try to execute an automatically wired
  // bridge instead.
  // Check for wiring
  select one function related by brg->S_AW[R3200]->S_SYNC[R3201];   
  if (not_empty function)
    // Found a matching function name in the domain, now we need to 
    // setup the stack frame and parameters and execute it.
    select one func_body related by function->ACT_FNB[R695]->ACT_ACT[R698];

    sf_id = func_body.createStackFrameForBridge(stack_frame_id_caller:
                                                    stack_frame.Stack_Frame_ID);

    if(sf_id != GD::NULL_UNIQUE_ID())

      success = self.setupParameterValues(target_stack_frame_id: sf_id,
                                    stack_frame_id: stack_frame.Stack_Frame_ID);
      if(not success)
        select any targetFrame from instances of I_STF
                                       where (selected.Stack_Frame_ID == sf_id);
        if(not_empty targetFrame)
          select one targetStack related by targetFrame->I_STACK[R2929];
          if(empty targetStack)
            // there is no action currently executing in the
            // target engine, pop the created target frame to
            // allow execution
            select one targetStack related by targetFrame->I_STACK[R2943];
            targetStack.pop(disposeFrame:true);
            // recompute the parameter values
            discard = self.setupParameterValues(target_stack_frame_id: sf_id,
                                    stack_frame_id: stack_frame.Stack_Frame_ID);
          end if;
        end if;
      end if;
    end if; 
    return; 
  end if;
  // We could not find OAL or a wired domain function to execute, try to execute  
  // realized code instead.  
  
  // Set up the bridge arguments 
  
  VM::resetValues();

    // if a system was not found via the component,
    //  must be in a generic package 
    select one sys related by ee->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
    if (empty sys)
      select one sys related by ee->PE_PE[R8001]->C_C[R8003]->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
    end if;
  // Find the first parameter in the ordered relationship.  Use the ordered
  // relationship so the user can can the parameter order in the model to macth
  // the order in the realized code.
  select any parm related by brg->S_BPARM[R21];
  firstParm = parm; 
  while (not_empty firstParm)
	    select one firstParm related by parm->S_BPARM[R55.''succeeds''];
	    if (not_empty firstParm)
	      parm = firstParm;
	    end if;
  end while;
  
  
  while (not_empty parm)
    for each arg in args
      if (parm.Name == arg.Name)
        select one cval related by arg->V_VAL[R800];
        select one ctype related by parm->S_DT[R22];
        select any result related by stack_frame->I_VSF[R2951] where
                                             selected.Value_ID == cval.Value_ID;
        select one rtVal related by result->RV_RVL[R3305];
        isByRef = false;
        if (parm.By_Ref == 1)
          isByRef = true;
          newValue = GD::convertToBPDataType(type: ctype.Name,
                                                       value: rtVal.getValue());
          rtVal.setValue(value:newValue);
          cval.setValue(stack_frame_id: stack_frame.Stack_Frame_ID,
                               value: newValue, member_id:GD::NULL_UNIQUE_ID());
        end if;

        VM::addArgumentValue(value:rtVal.getValue(), type:ctype.Name,
                                                                byRef: isByRef);
      end if;
    end for;
    select one parm related by parm->S_BPARM[R55.''precedes''];
  end while;
  // Look for a user''s class that matches the EE name
  if(ee.Realized_Class_Path != "")
    VM::addUserClassPath(System_ID:sys.Sys_ID, path:ee.Realized_Class_Path);
  else
    VM::setUserClassPath(System_ID:sys.Sys_ID);
  end if;
  success = VM::loadClass(system_id: sys.Sys_ID, name:ee.Key_Lett);
  if (success)
    // Execute a method matching the bridge
    success = VM::execute(stack_frame_id:param.stack_frame_id, name: brg.Name);
    if (success)    
      // Now convert any by ref parameters back to the original data type
      for each parm in parms
        for each arg in args
          if (parm.By_Ref == 1 and parm.Name == arg.Name)
            select one cval related by arg->V_VAL[R800];
            select one ctype related by parm->S_DT[R22];
            select any result related by stack_frame->I_VSF[R2951] where
                                             selected.Value_ID == cval.Value_ID;
            select one rtVal related by result->RV_RVL[R3305];
            select one udt related by ctype->S_UDT[R17]; // is it core?
            if (not_empty udt)// if not, check user data type
              id = udt.getCoreType();
              select any dt_pe from instances of PE_PE where (selected.Element_ID == id);
              select one ctype related by dt_pe->S_DT[R8001];
            end if;
            newValue = GD::convertFromBPDataType(type: ctype.Name, value:
                                                              rtVal.getValue());
            cval.setValue(stack_frame_id: stack_frame.Stack_Frame_ID,
                               value: newValue, member_id:GD::NULL_UNIQUE_ID());
          end if;
        end for;
      end for;
    end if;
  end if;
  for each arg in args
    stack_frame.popValue(value_id:arg.Value_ID);
  end for;
end if;                                   

',
	1,
	'',
	"d8e525f1-3ecf-4a74-a27e-82c0bc6e7485");
INSERT INTO O_TPARM
	VALUES ("fe8abf83-b935-4854-ab55-6e73170d1a56",
	"e66e6955-14a2-4004-bb4b-bf3a22f3c472",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("79deebc8-c8fe-4f0b-8414-0c7a480d1343",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	'setupParameterValues',
	'Initializes the parameters passing to a bridge invocation.',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Invocation:Bridge Invocation.setupParameterValues
select one body related by self ->ACT_SMT[R603]->ACT_BLK[R602]->ACT_ACT[R601];   
select one brg related by self->S_BRG[R674];
select many args related by self->V_PAR[R628];
// Grab the stack frame(should be the new top stack frame)
select any stack_frame from instances of I_STF where
                                selected.Stack_Frame_ID == param.stack_frame_id;
if (empty stack_frame)
  //Invalid stack frame ID!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Invocation.setupParameterValues: " +
                  "Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
  select any stack from instances of I_STACK;
  select one new_stack_frame related by stack->I_STF[R2929];
end if;
// Grab the stack as well
select one stack related by stack_frame->I_STACK[R2929];
if (empty stack)  
  //Invalid stack frame ID!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Invocation.setupParameterValues: " +
                               "Failure to retieve stack. Using random stack.",path:pathMsg);
  select any stack from instances of I_STACK;
  select one new_stack_frame related by stack->I_STF[R2929];
end if;

select one outer_block related by brg->ACT_BRB[R697]->
                                                   ACT_ACT[R698]->ACT_BLK[R666];
if (not_empty outer_block)
  for each arg in args
    // Seach for a bridge parameter with the same name as the actual parameter
    select any bridge_param related by brg->S_BPARM[R21] where
                                                      selected.Name == arg.Name;  
    if (empty bridge_param)
      pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Invocation.setupParameterValues: " +
                               "did not find a corresponding bridge parameter",path:pathMsg);
    else
      // We have found the matching bridge parameter and actual parameter
      // Now set the value of the parameter value related to the bridge
      // parameter to the actual parameter''s value
      if (bridge_param.By_Ref == 0)  // by value
        select one act_val related by arg->V_VAL[R800];
        act_val.computeValue(stack_frame_id: stack_frame.Stack_Frame_ID);
        select any result related by stack_frame->I_VSF[R2951] where
                                          selected.Value_ID == act_val.Value_ID;
        select one rtVal related by result->RV_RVL[R3305];
        if (empty rtVal)
          // result requires computation. Let the new stack frame execute
          return false;    
        end if;
      end if;
    end if;
  end for;
  // If we get here, all computation of arguments was completed,
  //  prepare for execution of the bridge
  select one body related by brg->ACT_BRB[R697]->ACT_ACT[R698];
  sf = body.createStackFrame(stack_id:stack.Stack_ID,
                 invoking_stack_frame_or_component_id: GD::NULL_UNIQUE_ID(),
                                                                enqueue: false);
  for each arg in args
    // Create a new local value for each argument
    loc_id = outer_block.newLocalValue(stack_frame_id: sf);
    select any local related by outer_block->I_BSF[R2923]->
                                 L_LCL[R3000] where selected.Local_ID == loc_id;
    select one local_val related by local->L_LVL[R3001];
    select any bridge_param related by brg->S_BPARM[R21] where
                                                      selected.Name == arg.Name;
    select one act_val related by arg->V_VAL[R800];
    if (not_empty bridge_param and bridge_param.By_Ref == 0)  // by value
      // Find the local value and set it with the actual parameter value
      select any result related by stack_frame->I_VSF[R2951] where
                                          selected.Value_ID == act_val.Value_ID;
      select one rtVal related by result->RV_RVL[R3305];
      create object instance lrtVal of RV_RVL;
      relate lrtVal to local across R3306;
      select one dt related by bridge_param->S_DT[R22];
      relate lrtVal to dt across R3307;
      lrtVal.copyValue(from:rtVal.RuntimeValue_ID);
    else  // assuming by ref
      relate local_val to act_val across R3010;
    end if;
    // Relate the new local value to the bridge parameter so that
    // it can be found when the parameter value is referenced.
    relate bridge_param to local across R3009;
    stack_frame.popValue(value_id:arg.Value_ID);
  end for;
else
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Bridge Invocation.setupParameterValues: " +
                                          "did not find an outer bridge block",path:pathMsg);
end if;
return true;',
	1,
	'',
	"e66e6955-14a2-4004-bb4b-bf3a22f3c472");
INSERT INTO O_TPARM
	VALUES ("8d0fea32-1aed-48ba-b7a4-7823aa5aa928",
	"79deebc8-c8fe-4f0b-8414-0c7a480d1343",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("3d458f92-9f72-4f83-8285-118e29ae9b72",
	"79deebc8-c8fe-4f0b-8414-0c7a480d1343",
	'target_stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8d0fea32-1aed-48ba-b7a4-7823aa5aa928",
	'');
INSERT INTO O_REF
	VALUES ("d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"4d86df89-3b77-4674-a012-aa0a9cd0fc4e",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	"5f0b491d-77ee-4127-b869-32acbecf0b34",
	"22eaa3da-37fd-45b4-98c1-d1f72fcdf9d0",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Statement',
	'Statement_ID',
	'R603');
INSERT INTO R_RGO_PROXY
	VALUES ("d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"4d86df89-3b77-4674-a012-aa0a9cd0fc4e",
	'../../Body/Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	'../../Body/Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("5f0b491d-77ee-4127-b869-32acbecf0b34",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'../../Body/Statement/Statement.xtuml');
INSERT INTO O_ATTR
	VALUES ("5f0b491d-77ee-4127-b869-32acbecf0b34",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"00000000-0000-0000-0000-000000000000",
	'Statement_ID',
	'

',
	'',
	'Statement_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	0,
	"7f087367-409e-4293-a6d5-4963f035bc11",
	"261c7b7f-63ec-45d2-8c0f-c2737fad8701",
	"8b43123d-d2a3-49d1-abb1-0ef604ba98f2",
	"3d969cb0-6b0b-4954-b06f-88ff0235392d",
	"1e76854b-7c94-4db7-9158-6f14da5cb31c",
	"7d02357a-2ce5-428b-817d-cee6cfb99163",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Bridge',
	'Brg_ID',
	'R674.''is an invocation of''');
INSERT INTO R_RGO_PROXY
	VALUES ("d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"261c7b7f-63ec-45d2-8c0f-c2737fad8701",
	"8b43123d-d2a3-49d1-abb1-0ef604ba98f2",
	'../Invocation.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	0,
	"261c7b7f-63ec-45d2-8c0f-c2737fad8701",
	"3d969cb0-6b0b-4954-b06f-88ff0235392d",
	'../Invocation.xtuml');
INSERT INTO O_RATTR
	VALUES ("1e76854b-7c94-4db7-9158-6f14da5cb31c",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	1,
	'Brg_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'../../Domain/Bridge/Bridge.xtuml');
INSERT INTO O_ATTR
	VALUES ("1e76854b-7c94-4db7-9158-6f14da5cb31c",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"5f0b491d-77ee-4127-b869-32acbecf0b34",
	'Brg_ID',
	'

',
	'',
	'Brg_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0d0c3b10-63dd-4b49-b246-ef965a20d792",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_BATTR
	VALUES ("0d0c3b10-63dd-4b49-b246-ef965a20d792",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_ATTR
	VALUES ("0d0c3b10-63dd-4b49-b246-ef965a20d792",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"1e76854b-7c94-4db7-9158-6f14da5cb31c",
	'bridgeNameLineNumber',
	'',
	'',
	'bridgeNameLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5c430137-082e-4740-b4a1-494ea199f018",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_BATTR
	VALUES ("5c430137-082e-4740-b4a1-494ea199f018",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_ATTR
	VALUES ("5c430137-082e-4740-b4a1-494ea199f018",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"0d0c3b10-63dd-4b49-b246-ef965a20d792",
	'bridgeNameColumn',
	'',
	'',
	'bridgeNameColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6dfca417-5c04-409d-bc82-ac71e20c4b4c",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_BATTR
	VALUES ("6dfca417-5c04-409d-bc82-ac71e20c4b4c",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_ATTR
	VALUES ("6dfca417-5c04-409d-bc82-ac71e20c4b4c",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"5c430137-082e-4740-b4a1-494ea199f018",
	'externalEntityKeyLettersLineNumber',
	'',
	'',
	'externalEntityKeyLettersLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("02696746-0af5-4d6e-bfba-562ad3f688ca",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_BATTR
	VALUES ("02696746-0af5-4d6e-bfba-562ad3f688ca",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_ATTR
	VALUES ("02696746-0af5-4d6e-bfba-562ad3f688ca",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	"6dfca417-5c04-409d-bc82-ac71e20c4b4c",
	'externalEntityKeyLettersColumn',
	'',
	'',
	'externalEntityKeyLettersColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_OIDA
	VALUES ("5f0b491d-77ee-4127-b869-32acbecf0b34",
	"d392dc0a-0309-487d-a403-a78db9ce3f0c",
	0,
	'Statement_ID');
INSERT INTO O_ID
	VALUES (1,
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO O_ID
	VALUES (2,
	"d392dc0a-0309-487d-a403-a78db9ce3f0c");
INSERT INTO PE_PE
	VALUES ("d392dc0a-0309-487d-a403-a78db9ce3f0c",
	1,
	"f32f7bad-c1a4-43a8-8652-05993f749e71",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("f32f7bad-c1a4-43a8-8652-05993f749e71",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Invocation',
	'This subsystem captures the concepts of call and return. It covers
calls to operations, bridges and functions and includes the return
statement.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Invocation.xtuml');
