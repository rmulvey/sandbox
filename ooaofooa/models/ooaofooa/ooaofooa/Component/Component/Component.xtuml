-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("635d3b9b-edc6-456d-888d-7375eef81516",
	'Component',
	4000,
	'C_C',
	'A component defines the content of a system.  Its associations with other
components are defined through interfaces that are either provided or required
by the component.

A Component is related to an Interface through two different link classes,
Requirement and Provision.  The links are setup when either the Provision or
Requirement is formalized against an interface that is defined in an Interface
Diagram',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2f602e0f-6a49-4e06-8a04-b30a067516b5",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many ports related by self->C_PO[R4010];
for each port in ports
  unrelate self from port across R4010;
  port.dispose();
end for;

select many bodyInComponents related by self->ACT_BIC[R694];
for each bic in bodyInComponents
  select one body related by bic->ACT_ACT[R694];
  unrelate self from body across R694 using bic;
  delete object instance bic;
end for;

select many dics related by self->PA_DIC[R9002];
for each dic in dics
  select one delegation related by dic->C_DG[R9002];
  unrelate self from delegation across R9002 using dic;
  // no need to dispose the delegation, it will get
  // disposed later
  delete object instance dic;
end for;

select many sics related by self->PA_SIC[R9000];
for each sic in sics
  select one satisfaction related by sic->C_SF[R9000];
  unrelate self from satisfaction across R9000 using sic;
  // no need to dispose satisfaction, it will get
  // disposed later
  delete object instance sic;
end for;

select many executionEngines related by self->I_EXE[R2955];
for each engine in executionEngines
  unrelate engine from self across R2955;
  engine.dispose();
end for;

select many compParts related by self->SQ_COP[R955];
for each compPart in compParts
  compPart.unformalize();
end for;
self.clearScope();
// dispose Packagable Elements
select many pes related by self ->PE_PE[R8003];
for each pe in pes
  unrelate self from pe across R8003;
  pe.dispose();
end for;
select one pe related by self->PE_PE[R8001];
if (not_empty pe)
  unrelate self from pe across R8001;
  pe.dispose();
end if;
select many comVis related by self->PE_CVS[R8004];
for each comV in comVis
  select one pe related by comV->PE_PE[R8004];
  unrelate self from pe across R8004 using comV;
  delete object instance comV;
end for;
select many comRSs related by self->PE_CRS[R8007];
for each comRS in comRSs
  comRS.dispose();
end for;

delete object instance self;',
	1,
	'',
	"674a2565-c057-473e-81fa-ac716bf466e2");
INSERT INTO O_TFR
	VALUES ("eb4c0aa5-1db3-4b4f-8320-e6d30e7cf672",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'name = ::getUniqueInitialName( 
    instance: self.convertToInstance(), 
    candidateName: "Unnamed Component" );
success = ::getNewElementName(name:name,instance: self.convertToInstance(),validateName:true);    
if ( success!="") 
 self.Name=success;
else 
 self.dispose();
end if;        ',
	1,
	'',
	"fcc68512-5fa8-4570-9d4c-a619c7c787b1");
INSERT INTO O_TFR
	VALUES ("674a2565-c057-473e-81fa-ac716bf466e2",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'return this;',
	0,
	'',
	"1bdd7e68-0869-400b-85b3-ef991960dad4");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("1bdd7e68-0869-400b-85b3-ef991960dad4",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'actionFilter',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'if(param.name == "can")
  if(param.value == "launchVerifier")
    return not self.isBeingVerified();
  elif param.value == "make public"
    select one pe related by self->PE_PE[R8001];
    select one pkg related by pe->EP_PKG[R8000];
    if not_empty pkg
      if not_empty pe 
        return pe.Visibility != Visibility::Public;
      end if;
    end if;
  elif param.value == "make protected"
    select one pe related by self->PE_PE[R8001];
    select one pkg related by pe->EP_PKG[R8000];
    if not_empty pkg
      if not_empty pe 
        return pe.Visibility != Visibility::Protected;
      end if;
    end if;
  elif param.value == "make private"
    select one pe related by self->PE_PE[R8001];
    select one pkg related by pe->EP_PKG[R8000];
    if not_empty pkg
      if not_empty pe 
        return pe.Visibility != Visibility::Private;
      end if;
    end if;
  end if;
elif(param.name == "new")
  if(param.value == "package")
    return true;
  end if;  
elif (param.name == "has")
  if (param.value == "realized components")
    return self.hasRealizedComponents();
  end if;
end if;
return false;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("b9fa8387-3a81-4151-936f-9076712c5339",
	"1bdd7e68-0869-400b-85b3-ef991960dad4",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("536b935e-5e69-44cb-9185-2faa1d9a0a62",
	"1bdd7e68-0869-400b-85b3-ef991960dad4",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b9fa8387-3a81-4151-936f-9076712c5339",
	'');
INSERT INTO O_TFR
	VALUES ("ab6a1196-dacc-4635-8e72-3ca8fbb15e3d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_compartment_text',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result = "";
postResult = "";
if (param.at == Justification::Center)
  return self.Label;
end if;
return result;',
	1,
	'',
	"5f1ce446-4510-46db-8ea5-1c86afedb82e");
INSERT INTO O_TPARM
	VALUES ("ad5dd49d-747d-4d56-9c20-98cbfe9bf82e",
	"ab6a1196-dacc-4635-8e72-3ca8fbb15e3d",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	"00000000-0000-0000-0000-000000000000",
	'Justification',
	'The Justification data type is used to specify text at a given location in a compartment.
------------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TPARM
	VALUES ("45239395-dd96-4e42-80d5-f1bbb6654af1",
	"ab6a1196-dacc-4635-8e72-3ca8fbb15e3d",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"cd6da753-25c8-440e-ba37-880135892a10",
	'');
INSERT INTO O_TPARM
	VALUES ("cd6da753-25c8-440e-ba37-880135892a10",
	"ab6a1196-dacc-4635-8e72-3ca8fbb15e3d",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"ad5dd49d-747d-4d56-9c20-98cbfe9bf82e",
	'');
INSERT INTO O_TFR
	VALUES ("ec9ea55a-8654-47b5-a53a-c74dfa00920d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_entries',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"eca1d7ac-13ad-4923-b976-894b32596346");
INSERT INTO O_TPARM
	VALUES ("d79d5eee-0228-41b1-ad67-9f4bab570a9d",
	"ec9ea55a-8654-47b5-a53a-c74dfa00920d",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2b29d48e-9385-4615-90a8-36b99a326855",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::Component;',
	1,
	'',
	"ec9ea55a-8654-47b5-a53a-c74dfa00920d");
INSERT INTO S_DT_PROXY
	VALUES ("05be3a7b-3886-4857-8a5e-5c08c37293ab",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("eca1d7ac-13ad-4923-b976-894b32596346",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_compartments',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"ab6a1196-dacc-4635-8e72-3ca8fbb15e3d");
INSERT INTO O_TFR
	VALUES ("c5645287-aab6-4550-85ec-0731d77d4989",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_text_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::None;',
	1,
	'',
	"2b29d48e-9385-4615-90a8-36b99a326855");
INSERT INTO O_TPARM
	VALUES ("09bd2820-f379-477f-82f3-16937c98d014",
	"c5645287-aab6-4550-85ec-0731d77d4989",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"adaccc75-9ad7-4ad3-9f5c-25e5f1fc9520",
	'');
INSERT INTO O_TPARM
	VALUES ("2294896a-3521-430a-a421-077ea93c6814",
	"c5645287-aab6-4550-85ec-0731d77d4989",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("adaccc75-9ad7-4ad3-9f5c-25e5f1fc9520",
	"c5645287-aab6-4550-85ec-0731d77d4989",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"2294896a-3521-430a-a421-077ea93c6814",
	'');
INSERT INTO O_TFR
	VALUES ("1815cf9d-5aaa-497a-8deb-e8dc5fa4f630",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getPath',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'path = "";
if param.includeSelf == true
  path = self.Name;
end if;
if(param.path != "")
  path = path + "::" + param.path;
end if;
select one pkg related by self->PE_PE[R8001]->EP_PKG[R8000];
if (not_empty pkg)
  return pkg.getPath(path:path);
end if;
select one comp related by self->PE_PE[R8001]->C_C[R8003];
if (not_empty comp)
  return comp.getPath(path:path, includeSelf:true);
end if;
return "";',
	1,
	'',
	"96d9b369-cad1-4786-8b51-d735997dce28");
INSERT INTO O_TPARM
	VALUES ("f1e0cdd1-3b6f-4525-a17b-b9d418cd426c",
	"1815cf9d-5aaa-497a-8deb-e8dc5fa4f630",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("9aa73838-3d07-46c8-bbde-54ba32251dab",
	"1815cf9d-5aaa-497a-8deb-e8dc5fa4f630",
	'includeSelf',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f1e0cdd1-3b6f-4525-a17b-b9d418cd426c",
	'');
INSERT INTO O_TFR
	VALUES ("c7f62ce8-2027-4c96-82c9-b7cd7bdeeaf8",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'manyMultAllowed',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'return true;',
	1,
	'',
	"6bf36be4-162b-47d7-8aae-d9a2f1ee4a44");
INSERT INTO O_TFR
	VALUES ("af0d768a-ef3a-46e1-9d57-aa3e11463843",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Component::newComponent()
  create object instance component of C_C;
  // create Packageable Element supertype and hook up to this component.
  create object instance pe of PE_PE;
  relate component to pe across R8001;
  relate self to pe across R8003;
  component.initialize();
  pe.type = ElementTypeConstants::COMPONENT;
  pe.initialize();
  return component.Id;
',
	1,
	'',
	"c7f62ce8-2027-4c96-82c9-b7cd7bdeeaf8");
INSERT INTO O_TFR
	VALUES ("2ff1e310-940f-44c0-aaeb-c83e912e3c15",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Create empty variable of type inst_ref<Component>

select any component related by self->PE_PE[R8003]->C_C[R8001]
	                                          where (selected.Id == param.from);

if(empty component)
  if(param.from == self.Id)
    component = self;
  end if;
end if;

select any requirement from instances of C_R
                                    where (selected.Requirement_Id == param.to);
select any importedRef from instances of CL_IIR where (selected.Id == param.to);
if(not_empty importedRef) and (not_empty component)
  return component.initializeProvision(requirement_id:importedRef.Id,
                               provision_id:GD::NULL_UNIQUE_ID(), proceed:true);
end if;
if(not_empty requirement) and (not_empty component)
  return component.initializeProvision(
                                      requirement_id:requirement.Requirement_Id,
                               provision_id:GD::NULL_UNIQUE_ID(), proceed:true);
end if;
if(empty requirement and not_empty component)
  return component.initializeProvision(requirement_id:GD::NULL_UNIQUE_ID(),
                               provision_id:GD::NULL_UNIQUE_ID(), proceed:true);
end if;
return false;
',
	1,
	'',
	"6584cffa-1645-4deb-a25e-a2b3332aa1aa");
INSERT INTO O_TPARM
	VALUES ("b267f717-fd44-41a0-9bd8-0a0577143f20",
	"2ff1e310-940f-44c0-aaeb-c83e912e3c15",
	'from',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4084f389-defb-409e-bdaf-68a71943c2ac",
	"2ff1e310-940f-44c0-aaeb-c83e912e3c15",
	'to',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3f8a3579-150c-4d83-acc1-77fe3f96ddfd",
	'');
INSERT INTO O_TPARM
	VALUES ("3f8a3579-150c-4d83-acc1-77fe3f96ddfd",
	"2ff1e310-940f-44c0-aaeb-c83e912e3c15",
	'fromIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"b267f717-fd44-41a0-9bd8-0a0577143f20",
	'');
INSERT INTO O_TPARM
	VALUES ("cc472b50-ad4a-4f9f-8c8b-a531c35a33be",
	"2ff1e310-940f-44c0-aaeb-c83e912e3c15",
	'toIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"4084f389-defb-409e-bdaf-68a71943c2ac",
	'');
INSERT INTO O_TFR
	VALUES ("647c99c4-3a52-4022-8150-91d61abdbe7b",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Create empty variable of type inst_ref<Component>
select any component from instances of C_C
                                        where selected.Id==GD::NULL_UNIQUE_ID();
select any component related by self->PE_PE[R8003]->C_C[R8001]
	                                          where (selected.Id == param.from);

if(empty component)
  if(param.from == self.Id)
    component = self;
  end if;
end if;
select any provision from instances of C_P
                                      where (selected.Provision_Id == param.to);
select any importedRef from instances of CL_IIR where (selected.Id == param.to);
if(not_empty provision and not_empty component)
  return component.initializeRequirement(provision_id:provision.Provision_Id,
                             requirement_id:GD::NULL_UNIQUE_ID(), proceed:true);
end if;
if(not_empty importedRef) and (not_empty component)
  return component.initializeRequirement(provision_id:importedRef.Id,
                             requirement_id:GD::NULL_UNIQUE_ID(), proceed:true);
end if;
if(not_empty component)
  return component.initializeRequirement(provision_id:GD::NULL_UNIQUE_ID(),
                             requirement_id:GD::NULL_UNIQUE_ID(), proceed:true);
end if;
return false;',
	1,
	'',
	"2ff1e310-940f-44c0-aaeb-c83e912e3c15");
INSERT INTO O_TPARM
	VALUES ("79011824-92f8-42c5-888c-e6d37834daab",
	"647c99c4-3a52-4022-8150-91d61abdbe7b",
	'from',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e5e5e87b-2bd4-43ab-b76c-6566afbb27f3",
	"647c99c4-3a52-4022-8150-91d61abdbe7b",
	'fromIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"79011824-92f8-42c5-888c-e6d37834daab",
	'');
INSERT INTO O_TPARM
	VALUES ("e40b43b0-fe0b-4821-83e4-e454d987ad59",
	"647c99c4-3a52-4022-8150-91d61abdbe7b",
	'to',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e5e5e87b-2bd4-43ab-b76c-6566afbb27f3",
	'');
INSERT INTO O_TPARM
	VALUES ("a42de710-c4fd-42f5-88c7-2dc1970aa0cf",
	"647c99c4-3a52-4022-8150-91d61abdbe7b",
	'toIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e40b43b0-fe0b-4821-83e4-e454d987ad59",
	'');
INSERT INTO O_TFR
	VALUES ("6584cffa-1645-4deb-a25e-a2b3332aa1aa",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newImportedComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::newimportedComponent()
  create object instance icomponent of CL_IC;
  
  create object instance pe of PE_PE;
  relate icomponent to pe across R8001;
  relate self to pe across R8003;
',
	1,
	'',
	"0cb8302a-6299-4c20-985e-ba1f1f1df806");
INSERT INTO O_TFR
	VALUES ("0cb8302a-6299-4c20-985e-ba1f1f1df806",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newDelegation',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Component.newDelegation()
select one pe related by self->PE_PE[R8001];
sourceIsSelf = false;
if(param.from == self.Id)
  sourceIsSelf = true;
elif(param.to == self.Id)
  sourceIsSelf = true;
end if;

select any component from instances of C_C where selected.Id==GD::NULL_UNIQUE_ID();

	select any component related by self->PE_PE[R8003]->C_C[R8001] where (selected.Id == param.to);
	if(empty component)
		select any component related by self->PE_PE[R8003]->C_C[R8001] where (selected.Id == param.from);
	end if;

select any destImportRef from instances of CL_IIR where (selected.Id == param.to);
if(empty destImportRef)
  select any destImportRef from instances of CL_IIR where (selected.Id == param.from);
end if;

select any destReference from instances of C_IR where selected.Id==GD::NULL_UNIQUE_ID();
	select any destReference related by self->PE_PE[R8003]->C_C[R8001]->C_PO[R4010]->C_IR[R4016] where (selected.Id == param.to);
	if(empty destReference)
		select any destReference related by self->PE_PE[R8003]->C_C[R8001]->C_PO[R4010]->C_IR[R4016] where (selected.Id == param.from);
	end if;


if(empty destReference and not_empty destImportRef)
  select one destReference related by destImportRef->C_IR[R4701];
end if;
select any srcReference related by self->C_PO[R4010]->C_IR[R4016] where (selected.Id == param.from);
if(empty srcReference)
  select any srcReference related by self->C_PO[R4010]->C_IR[R4016] where (selected.Id == param.to);
end if;
if(sourceIsSelf)
  // ambiguous, we do not know what
  // to create in this situation so
  // disallow
  if(empty destReference)
    return false;
  else
    // allow creation of delegation as
    // well as create a new interface reference
    // for self
    create object instance reference of C_IR;
    create object instance delegation of C_DG;
      create object instance dlgPe of PE_PE;
      dlgPe.type = ElementTypeConstants::DELEGATION;
      dlgPe.initialize();
      relate dlgPe to delegation across R8001;
      relate self to dlgPe across R8003;
    if(not empty destImportRef)
      relate destImportRef to delegation across R4704;
    end if;
    create object instance refInDelegation of C_RID;
    create object instance port of C_PO;
    relate port to reference across R4016;
    relate port to self across R4010;
    port.initialize();
    relate reference to delegation across R4013 using refInDelegation;
    relate destReference to delegation across R4014;
    if(not_empty destImportRef)
      relate delegation to destImportRef across R4704;
    end if;
    select one provision related by destReference->C_P[R4009];
    if(not_empty provision)
      create object instance new_provision of C_P;
      relate new_provision to reference across R4009;
      new_provision.initialize();
    else
      create object instance requirement of C_R;
      relate requirement to reference across R4009;
      requirement.initialize();
    end if;
    if(destReference.isFormal())
      select one interface related by destReference->C_I[R4012];
      reference.formalize(formalizeOther: false, id: interface.Id);
    end if;
    return true;
  end if;
else
  if(not_empty srcReference)
    if(not_empty component)
      // allow creation of delegation and create a reference
      // in the destination component
      create object instance reference of C_IR;
      create object instance delegation of C_DG;
        create object instance dlgPe of PE_PE;
        dlgPe.type = ElementTypeConstants::DELEGATION;
        dlgPe.initialize();
        relate dlgPe to delegation across R8001;
        relate self to dlgPe across R8003;
      create object instance refInDelegation of C_RID;
      create object instance port of C_PO;
      relate port to reference across R4016;
      relate port to component across R4010;
      port.initialize();
      relate srcReference to delegation across R4013 using refInDelegation;
      relate reference to delegation across R4014;
      select one provision related by srcReference->C_P[R4009];
      if(not_empty provision)
        create object instance new_provision of C_P;
        relate new_provision to reference across R4009;
        new_provision.initialize();
      else
        create object instance requirement of C_R;
        relate requirement to reference across R4009;
        requirement.initialize();
      end if;
      if(srcReference.isFormal())
        select one interface related by srcReference->C_I[R4012];
        reference.formalize(formalizeOther: false, id: interface.Id);
      end if;
      return true;
    elif(not_empty destReference)
      // allow creation of delegation as long as the
      // source reference and dest reference are
      // similar.  This means that both are either
      // provisions or requirements and if formal
      // both are formalized to the same interface
      if(srcReference.isFormal() and destReference.isFormal())
        select one srcInterface related by srcReference->C_I[R4012];
        select one destInterface related by destReference->C_I[R4012];
        if(srcInterface != destInterface)
          return false;
        end if;
      end if;
      select one srcProvision related by srcReference->C_P[R4009];
      if(not_empty srcProvision)
        select one destProvision related by destReference->C_P[R4009];
        if(empty destProvision)
          return false;
        end if;
      else
        select one srcReq related by srcReference->C_R[R4009];
        if(not_empty srcReq)
          select one destReq related by destReference->C_R[R4009];
          if(empty destReq)
            return false;
          end if;
        end if;
      end if;
      create object instance delegation of C_DG;
        create object instance dlgPe of PE_PE;
        dlgPe.type = ElementTypeConstants::DELEGATION;
        dlgPe.initialize();
        relate dlgPe to delegation across R8001;
        relate self to dlgPe across R8003;
      if(not empty destImportRef)
        relate destImportRef to delegation across R4704;
      end if;
      create object instance refInDelegation of C_RID;
      relate delegation to srcReference across R4013 using refInDelegation;
      relate delegation to destReference across R4014;
      if(not_empty destImportRef)
        relate delegation to destImportRef across R4704;
      end if;
      if(srcReference.isFormal())
        if(not destReference.isFormal())
          select one interface related by srcReference->C_I[R4012];
          destReference.formalize(formalizeOther: false, id: interface.Id);
        end if;
      end if;
      if(destReference.isFormal())
        if(not srcReference.isFormal())
          select one interface related by destReference->C_I[R4012];
          srcReference.formalize(formalizeOther: false, id: interface.Id);
        end if;
      end if;
      return true;
    end if;
  end if;
end if;
return false;',
	1,
	'',
	"af0d768a-ef3a-46e1-9d57-aa3e11463843");
INSERT INTO O_TPARM
	VALUES ("2c484fe4-8c0e-4dc2-99fe-e0efff17e769",
	"0cb8302a-6299-4c20-985e-ba1f1f1df806",
	'from',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("8d06f474-32ad-439d-9160-55097c5da9de",
	"0cb8302a-6299-4c20-985e-ba1f1f1df806",
	'fromIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"2c484fe4-8c0e-4dc2-99fe-e0efff17e769",
	'');
INSERT INTO O_TPARM
	VALUES ("af46abbb-f027-482d-9fca-00bb2ea1495a",
	"0cb8302a-6299-4c20-985e-ba1f1f1df806",
	'toIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"9de39d6c-4e25-468d-8c70-daef080ee51b",
	'');
INSERT INTO O_TPARM
	VALUES ("9de39d6c-4e25-468d-8c70-daef080ee51b",
	"0cb8302a-6299-4c20-985e-ba1f1f1df806",
	'to',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8d06f474-32ad-439d-9160-55097c5da9de",
	'');
INSERT INTO O_TFR
	VALUES ("0d04d759-ed1d-4940-8238-25f0b65b011c",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'interfacePackageIsAlongParentPath',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
*  Check that the interface package given exists either at the
*  system level or along the parent path of this component.
*
*/
  return false;
',
	1,
	'',
	"75caff47-2411-4eee-a484-9e1ff7f01faa");
INSERT INTO O_TPARM
	VALUES ("3ec0fae3-3214-40cb-b714-a5bfb75b5b7b",
	"0d04d759-ed1d-4940-8238-25f0b65b011c",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("90e3d180-a902-4bb9-9bed-42d49ece70d7",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'initializeProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
 *  The rules for creating provided interfaces are:
 *
 *   * Common rules
 *     1. Allow to whitespace
 *     2. Allow to requirement if no other provision
 *        already satisfies the interface
 *     3. If both interfaces (Provision and Requirement) are already
 *        formalized, allow satisfaction only if the interfaces match.
 *     4. Formalize requirement if this provision is formalized.  
 *     5. Formalize provision if destination requirement
 *        is formalized.  
 *     6. If a satisfaction already exists to the given provision do not
 *        attempt to satisfy (return false).
 *
 * This routine is used when a new provision is being created as well as when 
 * a existing provision is being connected to a requirement.  In the case where
 * a new provision is being created the param.provision_id will be empty.
 */
  select one system related by self->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
  if (empty system)
    rootCompIdInPkg = self.getRootComponentId();
    select any rootComponent from instances of C_C
                                         where (selected.Id == rootCompIdInPkg);
    select one package related by rootComponent->PE_PE[R8001]->EP_PKG[R8000];
    select one system related by rootComponent->PE_PE[R8001]->EP_PKG[R8000]
                                                                 ->S_SYS[R1405];
  end if;

select any requirement from instances of C_R
                        where (selected.Requirement_Id == param.requirement_id);
select any importedRef from instances of CL_IIR
                                    where (selected.Id == param.requirement_id);

if(not_empty importedRef)
  select one requirement related by importedRef->C_IR[R4701]->C_R[R4009];
end if;
if(not_empty requirement)
  select many satisfactions related by requirement->C_SF[R4002];
  for each satisfaction in satisfactions
    if(not satisfaction.satisfiesWithImportedReq())
      select one satisfiedProvision related by satisfaction->C_P[R4002];
      // common rule 2 
      if(not_empty satisfiedProvision) and (empty importedRef)
        return false;
      end if;
    else
      // if this satisfaction is made with
      // the drawn to imported ref do not
      // allow
      select one satImportRef related by satisfaction->CL_IR[R4706];
      select one importedReq related by importedRef->CL_IR[R4703];
      if(satImportRef == importedReq)
        return false;
      end if;
    end if;
  end for;
end if;

// If the provision was passed-in use it, otherwise create it.
isNewProvision = false;
select any provision from instances of C_P 
                       where (selected.Provision_Id == param.provision_id);

// if the provision is empty, see if the element to initialize
// is an imported provision
select any importedProvisionRef from instances of CL_IIR
                                      where (selected.Id == param.provision_id);
if(empty provision)
  if(not_empty importedProvisionRef)
    select one provision related by importedProvisionRef->C_IR[R4701]
                                                                   ->C_P[R4009];
  end if;
end if;
if (empty provision and param.proceed)
  isNewProvision = true;
  create object instance provision of C_P;
  create object instance interfaceRef of C_IR;
  create object instance port of C_PO;
  relate provision to interfaceRef across R4009;
  relate interfaceRef to port across R4016;
  relate port to self across R4010;
  provision.initialize();
  port.initialize();
end if;

if(not_empty requirement)
  // If src and target are both formalized, but to different interfaces, 
  // then return false
  formalizeTarget = empty importedRef;
  formalizeSource = empty importedProvisionRef;
  select one targetInterface related by requirement->C_IR[R4009]->C_I[R4012];
  select one srcInterface related by provision->C_IR[R4009]->C_I[R4012];
  if ((not_empty srcInterface) and (not_empty targetInterface))
    if(targetInterface.Id != srcInterface.Id)
      // common rule 3
      return false;
    else 
      // If they are both already formalized, to the same interface
      // they do not need to be formalized again.
      formalizeTarget = false;
      formalizeSource = false;
    end if;
  end if;
  
  if(param.proceed)
    create object instance satisfaction of C_SF;

     // create Packageable Element supertype and hook it up . . . 
      create object instance pe of PE_PE;
      relate satisfaction to pe across R8001;
      if(not_empty importedRef)
        select one importedComp related by importedRef->CL_POR[R4708]->CL_IC[R4707];
        select one epPkg related by importedComp->PE_PE[R8001]->EP_PKG[R8000];
        select one comp related by importedComp->PE_PE[R8001]->C_C[R8003];
        if not_empty epPkg
          relate pe to epPkg across R8000;
        elif not_empty comp
          relate pe to comp across R8003;
        end if;
      else
        select one epPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
        select one comp related by self->PE_PE[R8001]->C_C[R8003];
        if not_empty epPkg
          relate pe to epPkg across R8000;
        elif not_empty comp
          relate pe to comp across R8003;
        end if;
      end if;
      pe.type = ElementTypeConstants::SATISFACTION;
      pe.initialize();
    relate provision to requirement across R4002 using satisfaction;
    if(not_empty importedRef)
      select one importedReq related by importedRef->CL_IR[R4703];
      relate satisfaction to importedReq across R4706;
    end if;
    if(not_empty importedProvisionRef)
      select one importedPro related by importedProvisionRef->CL_IP[R4703];
      create object instance ipins of CL_IPINS;
      relate importedPro to satisfaction across R4705 using ipins;
    end if;
    // formalize the provision if the requirement is formal
    if (not_empty srcInterface and formalizeTarget)
      // common rule 4
      requirement.formalize(Id:srcInterface.Id, formalizePro:false);
    elif (not_empty targetInterface and formalizeSource)
      // common rule 5
      provision.formalize(Id:targetInterface.Id, formalizeReq:false);
    end if;
  end if;
end if;
return true;',
	1,
	'',
	"eb4c0aa5-1db3-4b4f-8320-e6d30e7cf672");
INSERT INTO O_TPARM
	VALUES ("aa4617dd-d502-45b6-95e9-1e99dfd52b23",
	"90e3d180-a902-4bb9-9bed-42d49ece70d7",
	'requirement_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e4dfcbf3-1399-4646-a8c6-c39b8c456782",
	'');
INSERT INTO O_TPARM
	VALUES ("e4dfcbf3-1399-4646-a8c6-c39b8c456782",
	"90e3d180-a902-4bb9-9bed-42d49ece70d7",
	'provision_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("9483fcc6-1bbb-433d-b158-1f3697bb45e8",
	"90e3d180-a902-4bb9-9bed-42d49ece70d7",
	'proceed',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"aa4617dd-d502-45b6-95e9-1e99dfd52b23",
	'This parameter will tell the operation whether or not the model transaction
shall proceed.  If true changes will be made to the model, if false the
operation is used to determine if the provision would be initialized.');
INSERT INTO O_TFR
	VALUES ("75caff47-2411-4eee-a484-9e1ff7f01faa",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'initializeRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
 *  The rules for creating required interfaces are:
 *
 *   * Common rules
 *     1. Allow to whitespace
 *     2. Allow to provision if no other requirements
 *        from the same component are connected to the
 *        destination provision
 *     3. If both interfaces (Provision and Requirement) are already
 *        formalized, allow satisfaction only if the interfaces match.
 *     4. Formalize provision if this requirement is formalized.  
 *     5. Formalize requirement if destination provision
 *        is formalized.  
 *     6. If a satisfaction already exists to the given requirement do not
 *        attempt to satisfy (return false).
 *
 * This routine is used when a new requirement is being created as well as when 
 * a existing requirement is being connected to a provision.  In the case where
 * a new requirement is being created the param.requirement_id will be empty.
 */
  select one system related by self->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
  if (empty system)
    rootCompIdInPkg = self.getRootComponentId();
    select any rootComponent from instances of C_C
                                         where (selected.Id == rootCompIdInPkg);
    select one package related by rootComponent->PE_PE[R8001]->EP_PKG[R8000];
    select one system related by rootComponent->PE_PE[R8001]->EP_PKG[R8000]
                                                                 ->S_SYS[R1405];
  end if;

select any provision from instances of C_P
                            where (selected.Provision_Id == param.provision_id);
select any importedRef from instances of CL_IIR
                                      where (selected.Id == param.provision_id);
if(not_empty importedRef)
  select one provision related by importedRef->C_IR[R4701]->C_P[R4009];
end if;
if(not_empty provision)
  select many reqs related by self->C_PO[R4010]->C_IR[R4016]->C_R[R4009];
  // check to see if any other requirements are connected to destination
  // provision
  for each req in reqs
    select many satisfactions related by req->C_SF[R4002];
    for each satisfaction in satisfactions
      if(not satisfaction.satisfiesWithImportedReq() and empty importedRef)
        select one existProvision related by satisfaction->C_P[R4002];
        if(not_empty existProvision) and (provision == existProvision)
            // common rule 2
            return false;
        end if;
      end if;
    end for;
  end for;
end if;
// If the requirement was passed-in use it, otherwise create it.
isNewRequirement = false;
select any requirement from instances of C_R 
                       where (selected.Requirement_Id == param.requirement_id);
// see if the passed in requirement id is that of
// an imported reference
select any importedReqRef from instances of CL_IIR
                                    where (selected.Id == param.requirement_id);
if(empty requirement)
  if(not_empty importedReqRef)
    select one requirement related by importedReqRef->C_IR[R4701]->C_R[R4009];
  end if;
end if;
if (empty requirement and param.proceed)
  isNewRequirement = true;
  create object instance requirement of C_R;
  create object instance interfaceRef of C_IR;
  create object instance port of C_PO;
  relate requirement to interfaceRef across R4009;
  relate interfaceRef to port across R4016;
  relate port to self across R4010;
  requirement.initialize();
  port.initialize();
else
  // if the element being dragged is
  // an imported reference
  if(not_empty importedReqRef)
    // see if it already is satisfied
    select one importReqSat related by importedReqRef->CL_IR[R4703]
												                  ->C_SF[R4706];
    if(not_empty importReqSat)
      return false;
    end if;
  else
    // check to see if this requirement is already satisfied within
    // the current parent
    select many existingSats related by requirement->C_SF[R4002];
    for each existingSat in existingSats
      if(not existingSat.satisfiesWithImportedReq())
        return false;
      end if;
    end for;
  end if;
end if;
if(not_empty provision)
  // If src and target are both formalized, but to different interfaces, 
  // then return false
  formalizeTarget = empty importedRef;
  formalizeSource = empty importedReqRef;
  select one targetInterface related by provision->C_IR[R4009]->C_I[R4012];
  select one srcInterface related by requirement->C_IR[R4009]->C_I[R4012];
  if ((not_empty srcInterface) and (not_empty targetInterface))
    if(targetInterface.Id != srcInterface.Id)
      // common rule 3
      return false;
    else 
      // If they are both already formalized, to the same interface
      // they do not need to be formalized again.
      formalizeTarget = false;
      formalizeSource = false;
    end if;
  end if;
  
  if(param.proceed)
    create object instance satisfaction of C_SF;

      // create Packageable Element supertype and hook it up . . . 
      create object instance pe of PE_PE;
      relate satisfaction to pe across R8001;
      if(not_empty importedRef)
        select one importedComp related by importedRef->CL_POR[R4708]->CL_IC[R4707];
        select one epPkg related by importedComp->PE_PE[R8001]->EP_PKG[R8000];
        select one comp related by importedComp->PE_PE[R8001]->C_C[R8003];
        if not_empty epPkg
          relate pe to epPkg across R8000;
        elif not_empty comp
          relate pe to comp across R8003;
        end if;
      else
        select one epPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
        select one comp related by self->PE_PE[R8001]->C_C[R8003];
        if not_empty epPkg
          relate pe to epPkg across R8000;
        elif not_empty comp
          relate pe to comp across R8003;
        end if;
      end if;
      pe.type = ElementTypeConstants::SATISFACTION;
      pe.initialize();

    relate provision to requirement across R4002 using satisfaction;
    if(not_empty importedRef)
      select any importedRef related by provision->C_IR[R4009]->CL_IIR[R4701]
    	  where (selected.Id == param.provision_id);
      if(not_empty importedRef)
        select one importedPro related by importedRef->CL_IP[R4703];
        create object instance ipins of CL_IPINS;
        relate importedPro to satisfaction across R4705 using ipins;
      end if;
    end if;
    if(not_empty importedReqRef)
      select one importedReq related by importedReqRef->CL_IR[R4703];
      relate satisfaction to importedReq across R4706;
    end if;
    // formalize the provision if the requirement is formal
    if (not_empty srcInterface and formalizeTarget)
      // common rule 4
      provision.formalize(Id:srcInterface.Id, formalizeReq:false);
    elif (not_empty targetInterface and formalizeSource)
      // common rule 5
      requirement.formalize(Id:targetInterface.Id, formalizePro:false);
    end if;
  end if;
end if;
return true;',
	1,
	'',
	"90e3d180-a902-4bb9-9bed-42d49ece70d7");
INSERT INTO O_TPARM
	VALUES ("bd6f776f-f610-4490-b2f1-7045fb0e3e4d",
	"75caff47-2411-4eee-a484-9e1ff7f01faa",
	'provision_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("13876e2d-e10e-493e-94c7-642b021fa475",
	"75caff47-2411-4eee-a484-9e1ff7f01faa",
	'requirement_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bd6f776f-f610-4490-b2f1-7045fb0e3e4d",
	'');
INSERT INTO O_TPARM
	VALUES ("90372936-3590-41a2-a3ca-802d675474b2",
	"75caff47-2411-4eee-a484-9e1ff7f01faa",
	'proceed',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"13876e2d-e10e-493e-94c7-642b021fa475",
	'This parameter will tell the operation whether or not the model transaction
shall proceed.  If true changes will be made to the model, if false the
operation is used to determine if the requirement would be initialized.');
INSERT INTO O_TFR
	VALUES ("96d9b369-cad1-4786-8b51-d735997dce28",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getNameCompartmentText',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'return "component: " + self.Name;',
	1,
	'',
	"2f602e0f-6a49-4e06-8a04-b30a067516b5");
INSERT INTO O_TFR
	VALUES ("e0cd7a53-bbc3-48f5-84d4-4cc817c2e974",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getProvisionCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'count = 0;
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select many ireferences related by self->C_PO[R4010]->C_IR[R4016];
for each ireference in ireferences
  select one provision related by ireference->C_P[R4009];
  select one provisionPkg related by provision->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
  if (not_empty provision and (outerPkg.Package_ID == provisionPkg.Package_ID))
    select one delegation related by ireference->C_DG[R4014];
    if (param.filterDelegations) 
      if (empty delegation)
        count = count + 1;
      end if;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        count = count+1;
      end if;
    end if;
  end if;
end for;
return count;',
	1,
	'',
	"1815cf9d-5aaa-497a-8deb-e8dc5fa4f630");
INSERT INTO O_TPARM
	VALUES ("d7c5cb07-3ea5-45fc-8d85-94a38a1b4657",
	"e0cd7a53-bbc3-48f5-84d4-4cc817c2e974",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("ecb5e6c0-87ec-4453-9f13-e66181fb8cdc",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getRequirementCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'count = 0;
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select many ireferences related by self->C_PO[R4010]->C_IR[R4016];
for each ireference in ireferences
  select one requirement related by ireference->C_R[R4009];
  select one requirementPkg related by requirement->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
  if (not_empty requirement and (outerPkg.Package_ID == requirementPkg.Package_ID))
    select one delegation related by ireference->C_DG[R4014];
    if (param.filterDelegations)
      if (empty delegation)
        count = count + 1;
      end if;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        count = count+1;
      end if;
    end if;
  end if;
end for;
return count;',
	1,
	'',
	"0b6420bf-47ac-439d-9ed8-eb25ef1666f4");
INSERT INTO O_TPARM
	VALUES ("d80212db-ce5f-4e67-88c9-6c290c87a1ee",
	"ecb5e6c0-87ec-4453-9f13-e66181fb8cdc",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0b6420bf-47ac-439d-9ed8-eb25ef1666f4",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getProvisionID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many ireferences related by self->C_PO[R4010]->C_IR[R4016];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each ireference in ireferences
  select one provision related by ireference->C_P[R4009];
  select one provisionPkg related by provision->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
  if (not_empty provision and (outerPkg.Package_ID == provisionPkg.Package_ID))
    select one delegation related by ireference->C_DG[R4014];
    if (param.filterDelegations)
      if (empty delegation)
        count = count + 1;
      end if;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        count = count+1;
      end if;
    end if;
    if (count == param.index)
      return provision.Provision_Id;
    end if;    
  end if;
end for;
return id;',
	1,
	'',
	"f34ec1d7-ccf3-4442-9227-2935c56e4859");
INSERT INTO O_TPARM
	VALUES ("1ee7412e-4dc3-4c67-892d-409ec78f3acb",
	"0b6420bf-47ac-439d-9ed8-eb25ef1666f4",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a8677866-50db-419a-a55e-fbbd00825c54",
	"0b6420bf-47ac-439d-9ed8-eb25ef1666f4",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1ee7412e-4dc3-4c67-892d-409ec78f3acb",
	'');
INSERT INTO O_TFR
	VALUES ("5f1ce446-4510-46db-8ea5-1c86afedb82e",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getRequirementID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many ireferences related by self->C_PO[R4010]->C_IR[R4016];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each ireference in ireferences
  select one requirement related by ireference->C_R[R4009];
  select one rPkg related by requirement->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
  if (not_empty requirement and (outerPkg.Package_ID == rPkg.Package_ID))
    select one delegation related by ireference->C_DG[R4014];
    if (not param.filterDelegations)
      count = count + 1;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        count = count+1;
      end if;
    end if;
    if (count == param.index)
      return requirement.Requirement_Id;
    end if;    
  end if;
end for;
return id;',
	1,
	'',
	"b4f6f599-e3ae-4fbe-83b7-883559a38f51");
INSERT INTO O_TPARM
	VALUES ("596a566b-b5be-48e9-8da9-eeca8121be31",
	"5f1ce446-4510-46db-8ea5-1c86afedb82e",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("865ebb3b-2ad6-4724-82f5-75283a7144b9",
	"5f1ce446-4510-46db-8ea5-1c86afedb82e",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"596a566b-b5be-48e9-8da9-eeca8121be31",
	'');
INSERT INTO O_TFR
	VALUES ("fcc68512-5fa8-4570-9d4c-a619c7c787b1",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'hasRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any requirement related by self->C_PO[R4010]->C_IR[R4016]->C_R[R4009]
	where (selected.Requirement_Id == param.id);
if(param.considerDelegations) and (not_empty requirement)
  select one delegation related by requirement->C_IR[R4009]->C_DG[R4014];
  select one importedRef related by delegation->CL_IIR[R4704];
  if(empty importedRef)
    if(not_empty delegation)
      return false;
    end if;
  end if;
end if;
return not_empty requirement;',
	1,
	'',
	"4d602449-b233-4c2f-a814-3ada67a3d8e3");
INSERT INTO O_TPARM
	VALUES ("203a1745-e34a-4b6d-ba5a-5e77613fb014",
	"fcc68512-5fa8-4570-9d4c-a619c7c787b1",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"38bfe252-e06b-4707-826f-cea18220c75f",
	'');
INSERT INTO O_TPARM
	VALUES ("38bfe252-e06b-4707-826f-cea18220c75f",
	"fcc68512-5fa8-4570-9d4c-a619c7c787b1",
	'considerDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4d602449-b233-4c2f-a814-3ada67a3d8e3",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'hasProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any provision related by self->C_PO[R4010]->C_IR[R4016]->C_P[R4009]
	where (selected.Provision_Id == param.id);
if(param.considerDelegations) and (not_empty provision)
  select one delegation related by provision->C_IR[R4009]->C_DG[R4014];
  select one importedRef related by delegation->CL_IIR[R4704];
  if(empty importedRef)
    if(not_empty delegation)
      return false;
    end if;
  end if;
end if;
return not_empty provision;',
	1,
	'',
	"c5645287-aab6-4550-85ec-0731d77d4989");
INSERT INTO O_TPARM
	VALUES ("679ec30c-29c8-44cf-8afb-0c148ffbfc30",
	"4d602449-b233-4c2f-a814-3ada67a3d8e3",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"daf5a3b8-2688-43c2-a4f3-24bcd18d275a",
	'');
INSERT INTO O_TPARM
	VALUES ("daf5a3b8-2688-43c2-a4f3-24bcd18d275a",
	"4d602449-b233-4c2f-a814-3ada67a3d8e3",
	'considerDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f34ec1d7-ccf3-4442-9227-2935c56e4859",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getProvisionDelegationID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Component.getProvisionDelegationID()
// Note the includeDelegations argument is deliberately ignored,
// since this operation is always called in the context of delegations.
select many ireferences related by self->C_PO[R4010]->C_IR[R4016];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each ireference in ireferences
  select one provision related by ireference->C_P[R4009];
  select one provisionPkg related by provision->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
  if (not_empty provision and (outerPkg.Package_ID == provisionPkg.Package_ID))
    select one delegation related by ireference->C_DG[R4014];
    if (empty delegation)
      select any delegation related by ireference->C_RID[R4013]->C_DG[R4013];
    end if;
    select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
    if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)       
      count = count + 1;
      if (count == param.index)
        return delegation.Id;
      end if;
    end if;    
  end if;
end for;
return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"e0cd7a53-bbc3-48f5-84d4-4cc817c2e974");
INSERT INTO O_TPARM
	VALUES ("79b76463-af21-405b-b3ee-6d021edcd009",
	"f34ec1d7-ccf3-4442-9227-2935c56e4859",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7102e5f5-69e5-4769-bd24-cb37879db533",
	'');
INSERT INTO O_TPARM
	VALUES ("7102e5f5-69e5-4769-bd24-cb37879db533",
	"f34ec1d7-ccf3-4442-9227-2935c56e4859",
	'includeDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b4f6f599-e3ae-4fbe-83b7-883559a38f51",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getRequirementDelegationID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Component.getRequirementDelegationID()
// Note the includeDelegations argument is deliberately ignored,
// since this operation is always called in the context of delegations.
select many ireferences related by self->C_PO[R4010]->C_IR[R4016];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each ireference in ireferences
  select one requirement related by ireference->C_R[R4009];
  select one rPkg related by requirement->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
  if (not_empty requirement and (outerPkg.Package_ID == rPkg.Package_ID))
    select one delegation related by ireference->C_DG[R4014];
    if (empty delegation)
      select any delegation related by ireference->C_RID[R4013]->C_DG[R4013];
    end if;
    select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
    if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)       
      count = count + 1;
      if (count == param.index)
        return delegation.Id;
      end if;
    end if;    
  end if;
end for;
return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"ecb5e6c0-87ec-4453-9f13-e66181fb8cdc");
INSERT INTO O_TPARM
	VALUES ("dc990c3a-7dad-4a3c-bfb6-e8526c0fbeb8",
	"b4f6f599-e3ae-4fbe-83b7-883559a38f51",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"c482bfea-7f07-4757-a5b5-a8e3c4b70c0e",
	'');
INSERT INTO O_TPARM
	VALUES ("c482bfea-7f07-4757-a5b5-a8e3c4b70c0e",
	"b4f6f599-e3ae-4fbe-83b7-883559a38f51",
	'includeDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("faee8dd0-cebe-4fd1-b38d-a9e36260551d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'parentHasProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any provision related by self->C_PO[R4010]->C_IR[R4016]->C_P[R4009]
	where (selected.Provision_Id == param.id);
return not_empty provision;',
	1,
	'',
	"647c99c4-3a52-4022-8150-91d61abdbe7b");
INSERT INTO O_TPARM
	VALUES ("26749dbe-113e-4953-941e-4bc1ac96d187",
	"faee8dd0-cebe-4fd1-b38d-a9e36260551d",
	'considerDelegation',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("02a10525-b4a4-4b7c-9793-55c1e05e764f",
	"faee8dd0-cebe-4fd1-b38d-a9e36260551d",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"26749dbe-113e-4953-941e-4bc1ac96d187",
	'');
INSERT INTO O_TFR
	VALUES ("ed53c839-2551-4a54-ba1e-ab091f053bbb",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'parentHasRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any requirement related by self->C_PO[R4010]->C_IR[R4016]->C_R[R4009]
	where (selected.Requirement_Id == param.id);
return not_empty requirement;',
	1,
	'',
	"faee8dd0-cebe-4fd1-b38d-a9e36260551d");
INSERT INTO O_TPARM
	VALUES ("9c721b6f-6ec0-4c7b-aafa-207f0c39cde1",
	"ed53c839-2551-4a54-ba1e-ab091f053bbb",
	'considerDelegation',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("223367b4-ced0-4a7b-b066-51492ccc0d3c",
	"ed53c839-2551-4a54-ba1e-ab091f053bbb",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9c721b6f-6ec0-4c7b-aafa-207f0c39cde1",
	'');
INSERT INTO O_TFR
	VALUES ("6bf36be4-162b-47d7-8aae-d9a2f1ee4a44",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'isBeingVerified',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any exeEng related by self->I_EXE[R2955];
return not_empty exeEng;',
	1,
	'',
	"0d04d759-ed1d-4940-8238-25f0b65b011c");
INSERT INTO O_TFR
	VALUES ("e112a3c6-10e8-4c36-b5d0-47e714a33aff",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'isParentExecuting',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Component.isParentExecuting()
select any container related by self->I_EXE[R2955]->I_CIN[R2975];
return not_empty container;
',
	1,
	'',
	"ed53c839-2551-4a54-ba1e-ab091f053bbb");
INSERT INTO O_TFR
	VALUES ("d03d77c4-850c-4fff-ae2b-5998e5515335",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'isExecutingOrIsChildExecuting',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any engine related by self->I_EXE[R2955];
if(not_empty engine)
  return true;
end if;

  select many children related by self->PE_PE[R8003]->C_C[R8001];

  for each child in children
    if(child.isExecutingOrIsChildExecuting())
      return true;
    end if;
  end for;
  select many importedComponentExecutionEngines related by self->PE_PE[R8003]->CL_IC[R8001]->I_EXE[R2963];
  if(not_empty importedComponentExecutionEngines)
    return true;
  end if;
return false;
',
	1,
	'',
	"e112a3c6-10e8-4c36-b5d0-47e714a33aff");
INSERT INTO O_TFR
	VALUES ("4bdd950d-87fb-4f4e-94f8-a7f636a6e4f9",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.Id;',
	1,
	'',
	"d03d77c4-850c-4fff-ae2b-5998e5515335");
INSERT INTO O_TFR
	VALUES ("1f81eb91-5a99-422a-b11b-1d867ed0ae07",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getComponentCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many components from instances of C_C where selected.Id==GD::NULL_UNIQUE_ID();
select many components related by self->PE_PE[R8003]->C_C[R8001];
return cardinality components;',
	1,
	'',
	"4bdd950d-87fb-4f4e-94f8-a7f636a6e4f9");
INSERT INTO O_TFR
	VALUES ("aff69d8c-6acc-4935-8e19-05e094cc1a31",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getComponentId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many components related by self->PE_PE[R8003]->C_C[R8001];
// We''re preincrementing the index
count = -1;
for each component in components
  if (not_empty component)
      count = count+1;
  end if;
  if (count == param.index)
      return component.Id;  
  end if;
end for;
return id;',
	1,
	'',
	"1f81eb91-5a99-422a-b11b-1d867ed0ae07");
INSERT INTO O_TPARM
	VALUES ("ad230b86-8deb-49e8-9891-80e50a69330d",
	"aff69d8c-6acc-4935-8e19-05e094cc1a31",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c626cc28-c62e-495f-ab26-cdab1a00819f",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getComponentRefCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many impComponents related by self->PE_PE[R8003]->CL_IC[R8001];
return cardinality impComponents;
',
	1,
	'',
	"aff69d8c-6acc-4935-8e19-05e094cc1a31");
INSERT INTO O_TFR
	VALUES ("9e544a40-a35d-4acc-8bf7-323b039c9076",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getComponentRefId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
  select many impComponents related by self->PE_PE[R8003]->CL_IC[R8001];
// We''re preincrementing the index
count = -1;
for each impComponent in impComponents
  if (not_empty impComponent)
      count = count+1;
  end if;
  if (count == param.index)
      return impComponent.Id;  
  end if;
end for;
return id;',
	1,
	'',
	"c626cc28-c62e-495f-ab26-cdab1a00819f");
INSERT INTO O_TPARM
	VALUES ("cc93c2ed-9994-4e97-88ef-457fc75e3734",
	"9e544a40-a35d-4acc-8bf7-323b039c9076",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("39b3befe-e5a7-4b78-bcd4-dc7094e48003",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newPackage',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::newPackage()
create object instance package of EP_PKG;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate package to pe across R8001;
rootCompIdInPkg = self.getRootComponentId();
select any rootComponent from instances of C_C where (selected.Id == rootCompIdInPkg);
select one system related by rootComponent->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
relate package to system across R1405;
relate self to pe across R8003;
package.initialize();
pe.type = ElementTypeConstants::PACKAGE;
pe.initialize();',
	1,
	'',
	"9e544a40-a35d-4acc-8bf7-323b039c9076");
INSERT INTO O_TFR
	VALUES ("3a6e8907-12c4-429e-b76a-20f3c8352031",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'collectVisibleElementsForName',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::collectVisibleElementsForName()
// This operation is recursive. It is designed to be called in multiple places,
// both when preparing selection lists and from the parser.
// It originally gets called from the place where a reference is being evaluated
// for visibility. The originating package id is the id of the package that
// contains the reference being evaluated. The originating call takes the form:
// pkg.collectVisibleElementsForName(name:"element name or *",
//                 type:ElementTypeConstants::requiredType,
//                          considerPublicOnly:false, considerParents:true,
//                                          originatingPkgID:self.Package_ID,
//                                       delegatingPkgID: GD::NULL_UNIQUE_ID(),
//                       findFirst:<true for parser use, false for picker use>);
// If findFirst is true, this operation can returns a newline delimited string
// list of duplicate names, if duplicates are found. Otherwise it returns the
// empty string.
// See also: Package.collectElementsForName()
select any originatingComponent from instances of C_C where
                                    selected.Id == param.originatingContainerID;
if self == originatingComponent
  select any resultSet related by self->PE_CRS[R8007] where
                    selected.Name == param.name and selected.Type == param.type;
  if not_empty resultSet
    // search has already been made and cached, just return immediately;
    return;
  else
    // create the search set
    create object instance resultSet of PE_CRS;
    resultSet.Name = param.name;
    resultSet.Type = param.type;
    relate self to resultSet across R8007;
  end if;
  // Visit all child elements
  select many elements related by self->PE_PE[R8003];
  for each element in elements
    // visit all elements, regardless of visibility
    element.collectVisibleElementsForName(name:param.name, type:param.type,
         descending:true, originatingContainerID: param.originatingContainerID,
                                   delegatingPkgID:param.delegatingContainerID,
                                         collectGlobally:param.collectGlobally);
  end for;
else // not originating Component
  // Visit all child elements
  select many elements related by self->PE_PE[R8003];
  for each element in elements
    if element.getVisibilityValue() == Visibility::Public
      element.collectVisibleElementsForName(name:param.name, type:param.type,
         descending:true, originatingContainerID: param.originatingContainerID,
                                   delegatingPkgID:param.delegatingContainerID,
                                         collectGlobally:param.collectGlobally);
    end if;
  end for;
end if;
// Visit all child elements
select many elements related by self->PE_PE[R8003];
for each element in elements
  if element.Visibility == Visibility::Public
      element.collectVisibleElementsForName(name:param.name, type:param.type,
         descending:true, originatingContainerID: param.originatingContainerID,
                                   delegatingPkgID:param.delegatingContainerID,
                                         collectGlobally:param.collectGlobally);
  end if;
end for;
// We now ascend the hierarchy. Note that components are never
// descended when looking for elements, so the delegating package
// is passed as NULL.
select one parentPkg related by self->PE_PE[R8001]->EP_PKG[R8000]->PE_PE[R8001];
if not_empty parentPkg
  parentPkg.collectVisibleElementsForName(name:param.name,
        type:param.type, descending:false,
                      originatingContainerID: param.originatingContainerID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                         collectGlobally:param.collectGlobally);
else
  select one parentComponent related by self->PE_PE[R8001]->C_C[R8003];
  if not_empty parentComponent
    parentComponent.collectVisibleElementsForName(name:param.name,
        type:param.type, originatingContainerID: param.originatingContainerID,
                                    delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                         collectGlobally:param.collectGlobally);
  end if;
end if;',
	1,
	'',
	"39b3befe-e5a7-4b78-bcd4-dc7094e48003");
INSERT INTO O_TPARM
	VALUES ("fad81f71-5081-4824-a1c6-8028d462015d",
	"3a6e8907-12c4-429e-b76a-20f3c8352031",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("6516249b-40d0-40ca-ae25-37eaae30a299",
	"3a6e8907-12c4-429e-b76a-20f3c8352031",
	'type',
	"5af46cdc-b428-4198-958b-aecb9bd29383",
	0,
	'',
	"fad81f71-5081-4824-a1c6-8028d462015d",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5af46cdc-b428-4198-958b-aecb9bd29383",
	"00000000-0000-0000-0000-000000000000",
	'ElementTypeConstants',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TPARM
	VALUES ("7fe6a6c3-ac46-47fd-85dd-eaa21afbb78f",
	"3a6e8907-12c4-429e-b76a-20f3c8352031",
	'originatingContainerID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6516249b-40d0-40ca-ae25-37eaae30a299",
	'');
INSERT INTO O_TPARM
	VALUES ("620e8f7f-ab9d-4b14-884a-7873a8643411",
	"3a6e8907-12c4-429e-b76a-20f3c8352031",
	'delegatingContainerID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7fe6a6c3-ac46-47fd-85dd-eaa21afbb78f",
	'');
INSERT INTO O_TPARM
	VALUES ("6ebb23ce-264c-459a-bdff-3bca72a8a543",
	"3a6e8907-12c4-429e-b76a-20f3c8352031",
	'collectGlobally',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"620e8f7f-ab9d-4b14-884a-7873a8643411",
	'');
INSERT INTO O_TFR
	VALUES ("595ddcb9-9d43-4d12-b261-b0e535405ac6",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newClass',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::newClass()
create object instance clazz of O_OBJ;
// create Packageable Element supertype and hook up to this class.
create object instance pe of PE_PE;
relate clazz to pe across R8001;
relate self to pe across R8003;
clazz.initialize();
pe.type = ElementTypeConstants::CLASS;
pe.initialize();',
	1,
	'',
	"3a6e8907-12c4-429e-b76a-20f3c8352031");
INSERT INTO O_TFR
	VALUES ("5908636c-39ec-4c14-94ad-7c6c22f51414",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newInterface',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component.newInterface
create object instance ifc of C_I;
// create Packageable Element supertype and hook up to this class.
create object instance pe of PE_PE;
relate ifc to pe across R8001;
relate self to pe across R8003;
ifc.initialize();
pe.type = ElementTypeConstants::INTERFACE;
pe.initialize();
',
	1,
	'',
	"595ddcb9-9d43-4d12-b261-b0e535405ac6");
INSERT INTO O_TFR
	VALUES ("d1bef717-d97a-4c49-89c1-9e57c0d32087",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newDatatype',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::newDatatype()

// Create the new data type
create object instance dt of S_DT;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate dt to pe across R8001;
relate pe to self across R8003;
pe.type = ElementTypeConstants::DATATYPE;
pe.initialize();

create object instance udt of S_UDT;
relate dt to udt across R17;

// Default to core integer type
rootCompId = self.getRootComponentId();
select any comp from instances of C_C where selected.Id == rootCompId;
select one pkg related by comp->PE_PE[R8001]->EP_PKG[R8000];
if not_empty pkg
  select one system related by pkg->S_SYS[R1405];
  int_dt_id = GD::NULL_UNIQUE_ID();
  if not_empty system
    int_dt_id = system.getCoreTypeId(name:"integer");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == int_dt_id;
  select one int_dt related by pe->S_DT[R8001]; 
  relate udt to int_dt across R18;
end if;
dt.initialize(newname:"Unnamed Data Type");
pe.initialize();',
	1,
	'',
	"5908636c-39ec-4c14-94ad-7c6c22f51414");
INSERT INTO O_TFR
	VALUES ("4cba5458-69f9-4073-8447-14e281a0b304",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getQualifiedName',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'//Component::getQualifiedName()
result = "";
select one package related by self->PE_PE[R8001]->EP_PKG[R8000];
if not_empty package
  result = package.getQualifiedName();
else
  select one comp related by self->PE_PE[R8001]->C_C[R8003];
  if not_empty comp
    result = comp.getQualifiedName();
  end if;
end if;
if result != ""
  result = result + "::";
end if;
result = result + self.Name;
return result;',
	1,
	'',
	"d1bef717-d97a-4c49-89c1-9e57c0d32087");
INSERT INTO O_TFR
	VALUES ("40a3c620-121a-47f1-9366-5e3140c2d67a",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'newIClass',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::newIClass()
create object instance icl of O_IOBJ;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate icl to pe across R8001;
relate pe to self across R8003;
pe.type = ElementTypeConstants::IMPORTED_CLASS;
pe.initialize();
//
// Note that no class is assigned to this imported
// class at creation time. This is achieved by a separate
// Context Menu action.',
	1,
	'',
	"4cba5458-69f9-4073-8447-14e281a0b304");
INSERT INTO O_TFR
	VALUES ("2b4ab2e8-88e4-47f3-9557-48c987156fbc",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'clearScope',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component.clearScope()
// dispose all search results
select many crs related by self->PE_CRS[R8007];
for each sr in crs
  sr.dispose();
end for;',
	1,
	'',
	"40a3c620-121a-47f1-9366-5e3140c2d67a");
INSERT INTO O_TFR
	VALUES ("881aea0e-dd90-4c3c-9af6-019699fd2cdf",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'rename',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.Name = param.new_name;
',
	1,
	'',
	"2b4ab2e8-88e4-47f3-9557-48c987156fbc");
INSERT INTO O_TPARM
	VALUES ("5c2951eb-9b51-447d-877b-f56e3de5b31d",
	"881aea0e-dd90-4c3c-9af6-019699fd2cdf",
	'new_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("960bbfa2-2d18-4f7c-a24a-d6f0dd22d018",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'initializeClasses',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component.initializeClasses()
select many packages related by self->PE_PE[R8003]->EP_PKG[R8001];
for each childPkg in packages
  childPkg.initializeClasses(compInstID:param.componentInstanceID);
end for;',
	1,
	'',
	"881aea0e-dd90-4c3c-9af6-019699fd2cdf");
INSERT INTO O_TPARM
	VALUES ("f0e1f8c9-ad40-48c9-9172-f6c181bbe4a0",
	"960bbfa2-2d18-4f7c-a24a-d6f0dd22d018",
	'componentInstanceID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b6b7b34c-ac1a-4a6c-87de-e08967763dec",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'canPastePackage',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'return true;
',
	1,
	'',
	"960bbfa2-2d18-4f7c-a24a-d6f0dd22d018");
INSERT INTO O_TFR
	VALUES ("2656ad93-b851-47f6-99f8-d67af0b63c9e",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pastePackage',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Component::pastePackage()
select any pkg from instances of EP_PKG where (selected.Package_ID == param.id);
if(not_empty pkg)
  select one directSystem related by pkg->S_SYS[R1401];
  if(not_empty directSystem)
    unrelate pkg from directSystem across R1401;
  end if;
  select one system related by pkg->S_SYS[R1405];
  if(not_empty system)
    unrelate pkg from system across R1405;
  end if;
  select one pe related by pkg->PE_PE[R8001];  
  // guarantee a unique name for the pasted dt package
  pkg.Name = ::getUniqueInitialNameInParent(instance:pkg.convertToInstance(),
  						name:pkg.Name, parent:self.convertToInstance());
  relate self to pe across R8003;
  sysId = self.getSystemId();
  select any thisSystem from instances of S_SYS where selected.Sys_ID == sysId;
  relate pkg to thisSystem across R1405;
  // associate all children with this
  // system
  pkg.associateWithSystem(sysID:sysId);
  // for any non local event below this package
  // remove incomplete ones (those that are not
  // resolvable)
  pkg.removeIncompleteSignalEvents();
end if;',
	1,
	'',
	"b6b7b34c-ac1a-4a6c-87de-e08967763dec");
INSERT INTO O_TPARM
	VALUES ("c9d0fc49-e490-4bc4-b9dd-01c55d8e679b",
	"2656ad93-b851-47f6-99f8-d67af0b63c9e",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("778d08d6-b502-46bc-8bd6-a0886571628f",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getSystemId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Component.getSystemId()
select one packageableElem related by self->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];
  if not_empty package
    return package.getSystemId();
  elif not_empty component
    return component.getSystemId();
  end if; 
USER::logError(msg:"Component.getSystemId: No parent found.",path:"");
return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"2656ad93-b851-47f6-99f8-d67af0b63c9e");
INSERT INTO O_TFR
	VALUES ("5fa03743-2c17-4840-8104-cea00ba3d4fe",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any component from instances of C_C where (selected.Id == param.id);
if(not_empty component)
  select one pe related by component->PE_PE[R8001];
  relate pe to self across R8003;
  component.rename(new_name: ::getUniqueInitialNameInParent(
                                         instance:component.convertToInstance(),
                        name: component.Name, parent:self.convertToInstance()));
  component.removeIncompleteSignalEvents();
end if;',
	1,
	'',
	"778d08d6-b502-46bc-8bd6-a0886571628f");
INSERT INTO O_TPARM
	VALUES ("8dba3910-9d7b-410e-a63f-637fd65008fa",
	"5fa03743-2c17-4840-8104-cea00ba3d4fe",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("ff6b32b9-e011-46e5-8f72-f1c04cbbd693",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteInterface',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any iface from instances of C_I where (selected.Id == param.id);
if(not_empty iface)
  // guarantee a unique name for the pasted dt package
  iface.Name = ::getUniqueInitialNameInParent(instance:iface.convertToInstance(),
  						name:iface.Name, parent:self.convertToInstance());
  select one pe related by iface->PE_PE[R8001];
  relate pe to self across R8003;
end if;',
	1,
	'',
	"5fa03743-2c17-4840-8104-cea00ba3d4fe");
INSERT INTO O_TPARM
	VALUES ("8991c402-4914-4720-8737-b26059ce1127",
	"ff6b32b9-e011-46e5-8f72-f1c04cbbd693",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f522eeec-afae-4efb-85cb-fed267afa619",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteUserDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any udt from instances of S_UDT where (selected.DT_ID == param.id);
if(not_empty udt)
  select one dt related by udt->S_DT[R17];
  // guarantee a unique name for the pasted dt
  dt.Name = ::getUniqueInitialNameInParent(instance:dt.convertToInstance(),
  						name:dt.Name, parent:self.convertToInstance());
  select one pe related by dt->PE_PE[R8001];
  relate pe to self across R8003;
end if;',
	1,
	'',
	"ff6b32b9-e011-46e5-8f72-f1c04cbbd693");
INSERT INTO O_TPARM
	VALUES ("f434a422-7450-4996-a1bd-3c9f6dedf95c",
	"f522eeec-afae-4efb-85cb-fed267afa619",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("885ba0a2-8ad7-4203-b709-ccaf8ddaebd3",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'associatePackagesWithSystem',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any system from instances of S_SYS where (selected.Sys_ID == param.id);
if(not_empty system)
  select many packages related by self->PE_PE[R8003]->EP_PKG[R8001];
  for each package in packages
    relate package to system across R1405;
    package.associateWithSystem(sysID:param.id);
  end for;
  select many components related by self->PE_PE[R8003]->C_C[R8001];
  for each component in components
    component.associatePackagesWithSystem(id:param.id);
  end for;
end if;',
	1,
	'',
	"f522eeec-afae-4efb-85cb-fed267afa619");
INSERT INTO O_TPARM
	VALUES ("f9ee7796-2329-4557-81a4-fdd3d24cd766",
	"885ba0a2-8ad7-4203-b709-ccaf8ddaebd3",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c0a34b4b-96db-487e-94c6-12292acb03e9",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// no need to hook anything up, all data will be present',
	1,
	'',
	"885ba0a2-8ad7-4203-b709-ccaf8ddaebd3");
INSERT INTO O_TPARM
	VALUES ("e84855f0-d071-4443-afd6-435fa7ae0577",
	"c0a34b4b-96db-487e-94c6-12292acb03e9",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4c2ae31c-40fa-4c39-b66d-902a8f318fe4",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any provision from instances of C_P
                                      where (selected.Provision_Id == param.id);
if(not_empty provision)
  // dispose any satisfactions that are not complete
  // this can occur because the export includes them
  // regardless of whether or not they are complete
  select many satisfactions related by provision->C_SF[R4002];
  for each satisfaction in satisfactions
    select one requirement related by satisfaction->C_R[R4002];
    if(not_empty requirement
                     and Util::isProxy(element:requirement.convertToInstance()))
      // if this satisfaction is connected to an imported requirement, that
      // is not a proxy, we do not want to dispose
      select one importedReq related by satisfaction->CL_IR[R4706];
      if(empty importedReq 
                      or Util::isProxy(element:importedReq.convertToInstance()))
        satisfaction.dispose();
      end if;
    end if;
  end for;
end if;
',
	1,
	'',
	"c0a34b4b-96db-487e-94c6-12292acb03e9");
INSERT INTO O_TPARM
	VALUES ("d9f96cf7-0e07-473d-81fc-29d4c5906920",
	"4c2ae31c-40fa-4c39-b66d-902a8f318fe4",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("7c55cb52-8387-4fa3-9b35-c72eaac321bd",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteComponentReference',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any ref from instances of CL_IC where (selected.Id == param.id);
if(not_empty ref)
    select one pe related by ref->PE_PE[R8001];
    relate pe to self across R8003;
end if;',
	1,
	'',
	"4c2ae31c-40fa-4c39-b66d-902a8f318fe4");
INSERT INTO O_TPARM
	VALUES ("b34214f6-094f-4bad-8ddc-feca2bc32024",
	"7c55cb52-8387-4fa3-9b35-c72eaac321bd",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("37002e98-d240-4e18-98ac-29305d9b1d59",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getPackageId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Component.getPackageId()
result = GD::NULL_UNIQUE_ID();
select one package related by self->PE_PE[R8001]->EP_PKG[R8000];
select one component related by self->PE_PE[R8001]->C_C[R8003];
  if not_empty package
    return package.Package_ID;
  elif not_empty component
    return component.getPackageId();
  end if;   
return result;',
	1,
	'',
	"7c55cb52-8387-4fa3-9b35-c72eaac321bd");
INSERT INTO O_TFR
	VALUES ("3af29104-e3f0-4422-b536-2dbd769ad59b",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'removeIncompleteSignalEvents',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// for any packages under this component make
// sure that we resolve pasted transitions assigned
// to signals
select many packages related by self->PE_PE[R8003]->EP_PKG[R8001];
for each package in packages
  package.removeIncompleteSignalEvents();
end for;
// do the same for all children components
select many components related by self->PE_PE[R8003]->C_C[R8001];
for each component in components
  component.removeIncompleteSignalEvents();
end for;
',
	1,
	'',
	"37002e98-d240-4e18-98ac-29305d9b1d59");
INSERT INTO O_TFR
	VALUES ("95ef2ee4-4738-4515-a184-d8dc98645a32",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteImportedProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any iPro from instances of CL_IP where (selected.Id == param.id);
if(not_empty iPro)
  // dispose any satisfactions that are not complete
  // this can occur because the export includes them
  // regardless of whether or not they are complete
  select many satisfactions related by iPro->CL_IPINS[R4705]->C_SF[R4705];
  for each satisfaction in satisfactions
    select one requirement related by satisfaction->C_R[R4002];
    if(not_empty requirement
                     and Util::isProxy(element:requirement.convertToInstance()))
      // if this satisfaction is connected to an imported requirement, that
      // is not a proxy, we do not want to dispose
      select one importedReq related by satisfaction->CL_IR[R4706];
      if(empty importedReq 
                      or Util::isProxy(element:importedReq.convertToInstance()))
        satisfaction.dispose();
      end if;
    end if;
  end for;
end if;',
	1,
	'',
	"3af29104-e3f0-4422-b536-2dbd769ad59b");
INSERT INTO O_TPARM
	VALUES ("8e36da8b-e55e-4b7b-bd14-5e4919c51619",
	"95ef2ee4-4738-4515-a184-d8dc98645a32",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f2dc8e64-7d68-41ce-8f5a-7c895ecbba59",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'pasteImportedRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// nothing needed here',
	1,
	'',
	"95ef2ee4-4738-4515-a184-d8dc98645a32");
INSERT INTO O_TPARM
	VALUES ("132d6eea-7f88-4be0-bc88-642408e0c37f",
	"f2dc8e64-7d68-41ce-8f5a-7c895ecbba59",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("ee46a443-0e90-47f5-99f6-341e0943d612",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getPkgCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many packages related by self->PE_PE[R8003]->EP_PKG[R8001];
return cardinality packages;',
	1,
	'',
	"f2dc8e64-7d68-41ce-8f5a-7c895ecbba59");
INSERT INTO O_TFR
	VALUES ("013c1e18-c650-4674-9f7c-56ebbd047502",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getPkgId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many packages related by self->PE_PE[R8003]->EP_PKG[R8001];
// We''re preincrementing the index
count = -1;
for each pkg in packages
  if (not_empty pkg)
      count = count+1;
  end if;
  if (count == param.index)
      return pkg.Package_ID;  
  end if;
end for;
return id;',
	1,
	'',
	"ee46a443-0e90-47f5-99f6-341e0943d612");
INSERT INTO O_TPARM
	VALUES ("52c0bece-bd77-4cbe-b115-5fad06f0ba95",
	"013c1e18-c650-4674-9f7c-56ebbd047502",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("75b8bfa4-bc68-43b6-90bc-6fab8baf1648",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getIfaceCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many interfaces related by self->PE_PE[R8003]->C_I[R8001];
return cardinality interfaces;',
	1,
	'',
	"013c1e18-c650-4674-9f7c-56ebbd047502");
INSERT INTO O_TFR
	VALUES ("0704826c-74a2-464f-bb2c-59c1395993ec",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getIfaceId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many ifaces related by self->PE_PE[R8003]->C_I[R8001];
// We''re preincrementing the index
count = -1;
for each iface in ifaces
  if (not_empty iface)
      count = count+1;
  end if;
  if (count == param.index)
      return iface.Id;  
  end if;
end for;
return id;',
	1,
	'',
	"75b8bfa4-bc68-43b6-90bc-6fab8baf1648");
INSERT INTO O_TPARM
	VALUES ("36efbc9b-ff39-4a44-b623-2f24d7324c8a",
	"0704826c-74a2-464f-bb2c-59c1395993ec",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f095e750-c0c5-49eb-ae47-76e84ee7120c",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getUDTCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many udts related by self->PE_PE[R8003]->S_DT[R8001]->S_UDT[R17];
return cardinality udts;',
	1,
	'',
	"0704826c-74a2-464f-bb2c-59c1395993ec");
INSERT INTO O_TFR
	VALUES ("d77ac3b1-dc58-4d7a-ae5f-af864af3d9da",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getUDTId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many udts related by self->PE_PE[R8003]->S_DT[R8001]->S_UDT[R17];
// We''re preincrementing the index
count = -1;
for each udt in udts
  if (not_empty udt)
      count = count+1;
  end if;
  if (count == param.index)
      return udt.DT_ID;  
  end if;
end for;
return id;',
	1,
	'',
	"f095e750-c0c5-49eb-ae47-76e84ee7120c");
INSERT INTO O_TPARM
	VALUES ("2de9a4aa-ab0f-400e-a6df-2ac6ae3dd229",
	"d77ac3b1-dc58-4d7a-ae5f-af864af3d9da",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("60b2d8ff-50ce-4581-9db4-86f9c1690ebc",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'isContainedBy',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Component.isContainedBy() GenericPackages only
select one component related by self->PE_PE[R8001]->C_C[R8003];
select one package related by self->PE_PE[R8001]->EP_PKG[R8000];
if not_empty component
  select one pe related by component->PE_PE[R8001];
  if not empty pe and pe.Element_ID == param.element_id
    return true;
  else
    return component.isContainedBy(element_id:param.element_id);
  end if;
elif not_empty package
  select one pe related by package->PE_PE[R8001];
  if not empty pe and pe.Element_ID == param.element_id
    return true;
  else
    return package.isContainedBy(element_id:param.element_id);
  end if;
else
  return false;
end if;
',
	1,
	'',
	"d77ac3b1-dc58-4d7a-ae5f-af864af3d9da");
INSERT INTO O_TPARM
	VALUES ("89016a18-ec0a-447b-9c67-5dcb1eeeb42e",
	"60b2d8ff-50ce-4581-9db4-86f9c1690ebc",
	'element_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9a30d552-3ac7-42bb-b29c-0db376ef65a4",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getRootComponentId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Component.getRootComponentId
// NOTE: Only intended for use in a generic package context
// Ascends the Component hierarchy to find the top component.
// The "top component" is the first component in this package. Note that
// this package may be nested.  The package could also by under a 
// component.  However, this routine finds the first component in 
// this package.  It does NOT search beyond the package boundary.
select one parentComponent related by self->PE_PE[R8001]->C_C[R8003];
if not_empty parentComponent
  return parentComponent.getRootComponentId();
end if;
return self.Id;',
	1,
	'',
	"60b2d8ff-50ce-4581-9db4-86f9c1690ebc");
INSERT INTO O_TFR
	VALUES ("65d902a7-16d6-463e-9b86-3ccdf56b0f51",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'collectReferencesForSynchronization',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'/**
 *  Collect all elements that require synchronization
 *  For components that is component references if
 *  synchronization type is push.
 */
if(param.syncType == SynchronizationType::Pull)
  // find component references under this component generic
  select many componentRefs related by self->PE_PE[R8003]->CL_IC[R8001];
  for each componentRef in componentRefs
    Util::addElementToList(element: componentRef.convertToInstance(),
                                               elementList:param.referenceList);
    componentRef.collectReferencesForSynchronization(
                    referenceList:param.referenceList, syncType:param.syncType);
  end for;  
else
  // find component references referring to this component
  select many componentRefs related by self->CL_IC[R4201];
  for each componentRef in componentRefs
    Util::addElementToList(element: componentRef.convertToInstance(),
                                               elementList:param.referenceList);
    componentRef.collectReferencesForSynchronization(
                    referenceList:param.referenceList, syncType:param.syncType);
  end for;
end if;
// recursively call for all children
select many pkgs related by self->PE_PE[R8003]->EP_PKG[R8001];
for each pkg in pkgs
  pkg.collectReferencesForSynchronization(referenceList:param.referenceList,
                                                       syncType:param.syncType);
end for;
// all component children
select many components related by self->PE_PE[R8003]->C_C[R8001];
for each component in components
  component.collectReferencesForSynchronization(
                    referenceList:param.referenceList, syncType:param.syncType);
end for;
// port children
select many ports related by self->C_PO[R4010];
for each port in ports
  port.collectReferencesForSynchronization(
                    referenceList:param.referenceList, syncType:param.syncType);
end for;
',
	1,
	'',
	"9a30d552-3ac7-42bb-b29c-0db376ef65a4");
INSERT INTO O_TPARM
	VALUES ("22f1ce75-32b4-4afe-95bd-0df61bb30326",
	"65d902a7-16d6-463e-9b86-3ccdf56b0f51",
	'referenceList',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("afaf4762-112d-4aa9-a83e-32c1864723bf",
	"65d902a7-16d6-463e-9b86-3ccdf56b0f51",
	'syncType',
	"4f33ba55-5c9d-455a-b1bc-43ab2c076b7f",
	0,
	'',
	"22f1ce75-32b4-4afe-95bd-0df61bb30326",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4f33ba55-5c9d-455a-b1bc-43ab2c076b7f",
	"00000000-0000-0000-0000-000000000000",
	'SynchronizationType',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("ec283a55-b0f6-4667-9e2b-2f7c0923e4d6",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'hasRealizedComponents',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'//Package::hasRealizedComponents()
result = false;
if self.isRealized == true
  result = true;
else
  select many packages related by self->PE_PE[R8003]->EP_PKG[R8001];
  for each package in packages
    if package.hasRealizedComponents() == true
      result = true;
      break;
    end if;
  end for;
  select many components related by self->PE_PE[R8003]->C_C[R8001];
  for each component in components
    if component.hasRealizedComponents() == true
      result = true;
      break;
    end if;
  end for;
  select many compRefs related by self->PE_PE[R8003]->CL_IC[R8001];
  for each compRef in compRefs
    select one component related by compRef->C_C[R4201];
    if component.hasRealizedComponents() == true
      result = true;
      break;
    end if;
  end for;
end if;
return result;',
	1,
	'',
	"65d902a7-16d6-463e-9b86-3ccdf56b0f51");
INSERT INTO O_TFR
	VALUES ("6a3a3139-5010-49b4-9449-2c4c54f7ea3c",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'get_name',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'return self.get_compartment_text(at: Justification::Center,
                                                                                 comp_num:1, ent_num:1);',
	1,
	'',
	"ec283a55-b0f6-4667-9e2b-2f7c0923e4d6");
INSERT INTO O_TFR
	VALUES ("2d864c51-599d-4aec-af5f-aab0adaaf62a",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getImportedProvisionCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'count = 0;
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select many importedReferences related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
for each importedReference in importedReferences
  select one innerPkg related by importedReference->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
    count = count+1;
  end if;
end for;
return count;
',
	1,
	'',
	"6a3a3139-5010-49b4-9449-2c4c54f7ea3c");
INSERT INTO O_TPARM
	VALUES ("9fb1636d-90de-44bd-8610-8ad5df1ed1a2",
	"2d864c51-599d-4aec-af5f-aab0adaaf62a",
	'includeDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8499843d-9624-42e3-9e0f-61c39f50890b",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getImportedProvisionID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
  select one innerPkg related by importedRef->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
  count = count+1;
  if (count == param.index)
    return importedRef.Id;
  end if;
  end if;
end for; 
return id; ',
	1,
	'',
	"2d864c51-599d-4aec-af5f-aab0adaaf62a");
INSERT INTO O_TPARM
	VALUES ("4cb80139-a335-4b6f-b267-43c5c01fc864",
	"8499843d-9624-42e3-9e0f-61c39f50890b",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4b411f54-d5e9-4d85-be9b-f188f8107f25",
	"8499843d-9624-42e3-9e0f-61c39f50890b",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"4cb80139-a335-4b6f-b267-43c5c01fc864",
	'');
INSERT INTO O_TFR
	VALUES ("699bdd09-528d-47cf-bab6-1b4df99abb0a",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getImportedProvisionProvisionID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
    select one provision related by importedRef->CL_IIR[R4703]->C_IR[R4701]
    															   ->C_P[R4009];
    select one delegation related by importedRef->CL_IIR[R4703]->C_DG[R4704];
    if(not_empty delegation)
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)       
        count = count + 1;
        if (count == param.index)
          return delegation.Id;
        end if;
      end if;    
    end if;
    if(not_empty provision)
      select one provisionPkg related by provision->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty provisionPkg and outerPkg.Package_ID == provisionPkg.Package_ID)
        count = count + 1;
        if (count == param.index)
          return provision.Provision_Id;
        end if;
      end if;
    end if;
end for;
return id;',
	1,
	'',
	"8499843d-9624-42e3-9e0f-61c39f50890b");
INSERT INTO O_TPARM
	VALUES ("71449382-bff8-4ec5-ad4b-9f135af46743",
	"699bdd09-528d-47cf-bab6-1b4df99abb0a",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a1f61286-e8cb-4ab8-ad53-e72f7d06f4e5",
	"699bdd09-528d-47cf-bab6-1b4df99abb0a",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"71449382-bff8-4ec5-ad4b-9f135af46743",
	'');
INSERT INTO O_TFR
	VALUES ("b1e28be3-4093-4548-a6e8-5b7a88aaddef",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getImportedRequirementCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'count = 0;
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select many importedReferences related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
for each importedReference in importedReferences
  select one innerPkg related by importedReference->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
    count = count+1;
  end if;
end for;
return count;
',
	1,
	'',
	"699bdd09-528d-47cf-bab6-1b4df99abb0a");
INSERT INTO O_TPARM
	VALUES ("af6e50fa-1b97-4935-aff5-ce5f1dcae274",
	"b1e28be3-4093-4548-a6e8-5b7a88aaddef",
	'includeDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3499a624-b12e-4911-ba28-941f02d7f225",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getImportedRequirementID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
  select one innerPkg related by importedRef->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
  count = count+1;
  if (count == param.index)
    return importedRef.Id;
  end if;
  end if;
end for; 
return id; ',
	1,
	'',
	"b1e28be3-4093-4548-a6e8-5b7a88aaddef");
INSERT INTO O_TPARM
	VALUES ("6f893795-488d-46c2-b222-bffd20d19ac5",
	"3499a624-b12e-4911-ba28-941f02d7f225",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("27e6ccb8-267f-4085-8707-d8e0500c8605",
	"3499a624-b12e-4911-ba28-941f02d7f225",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"6f893795-488d-46c2-b222-bffd20d19ac5",
	'');
INSERT INTO O_TFR
	VALUES ("9890db2b-be57-4760-b9c5-cad15f9234bd",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getImportedRequirementRequirementID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
    select one requirement related by importedRef->CL_IIR[R4703]->C_IR[R4701]
    															   ->C_R[R4009];
    select one delegation related by importedRef->CL_IIR[R4703]->C_DG[R4704];
    if(not_empty delegation)
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)       
        count = count + 1;
        if (count == param.index)
          return delegation.Id;
        end if;
      end if;    
    end if;
    if(not_empty requirement)
      select one rPkg related by requirement->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty rPkg and outerPkg.Package_ID == rPkg.Package_ID)
        count = count + 1;
        if (count == param.index)
          return requirement.Requirement_Id;
        end if;
      end if;
    end if;
end for;
return id; ',
	1,
	'',
	"3499a624-b12e-4911-ba28-941f02d7f225");
INSERT INTO O_TPARM
	VALUES ("49356db6-7824-4ebb-bce0-89696d6ed543",
	"9890db2b-be57-4760-b9c5-cad15f9234bd",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"08f4f8cd-3354-4cb4-b55d-540f212696fc",
	'');
INSERT INTO O_TPARM
	VALUES ("08f4f8cd-3354-4cb4-b55d-540f212696fc",
	"9890db2b-be57-4760-b9c5-cad15f9234bd",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("79ac663d-2565-4a41-888b-42874f0df74c",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'hasImportedProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select any importedPro related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703]
	where (selected.Id == param.id);
select one innerPkg related by importedPro->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
if(not_empty importedPro and (outerPkg.Package_ID == innerPkg.Package_ID))
  if(param.considerDelegations)
    select one delegation related by importedPro->CL_IIR[R4703]->C_DG[R4704];
    if(empty delegation)
      return true;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        return true;
      end if;    
    end if;
  end if;
end if; 
return false;',
	1,
	'',
	"9890db2b-be57-4760-b9c5-cad15f9234bd");
INSERT INTO O_TPARM
	VALUES ("dbd681e3-13d2-47f3-8e17-fdad1d52c4d7",
	"79ac663d-2565-4a41-888b-42874f0df74c",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e9cb62c4-43d5-4916-8974-999e4a1c5915",
	'');
INSERT INTO O_TPARM
	VALUES ("e9cb62c4-43d5-4916-8974-999e4a1c5915",
	"79ac663d-2565-4a41-888b-42874f0df74c",
	'considerDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("6770a561-5355-4c03-8c3e-3e0a67ba3c08",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'hasImportedRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select any importedReq related by self->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703]
	where (selected.Id == param.id);
select one innerPkg related by importedReq->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
if(not_empty importedReq and (outerPkg.Package_ID == innerPkg.Package_ID))
  if(param.considerDelegations)
    select one delegation related by importedReq->CL_IIR[R4703]->C_DG[R4704];
    if(empty delegation)
      return true;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        return true;
      end if;    
    end if;
  end if;
end if; 
return false;',
	1,
	'',
	"79ac663d-2565-4a41-888b-42874f0df74c");
INSERT INTO O_TPARM
	VALUES ("53b31052-3697-4c92-80ae-3cbabe20155f",
	"6770a561-5355-4c03-8c3e-3e0a67ba3c08",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c04bd71c-f83e-40e8-8cce-06eedaa68286",
	'');
INSERT INTO O_TPARM
	VALUES ("c04bd71c-f83e-40e8-8cce-06eedaa68286",
	"6770a561-5355-4c03-8c3e-3e0a67ba3c08",
	'considerDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("868afbc4-b057-4bef-a7a6-674e30b38aeb",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getGraphicalRootCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'// The count starts with 1 because we count this component
count = 1;
// find nested components
select many comps related by self->PE_PE[R8003]->C_C[R8001];
if (not_empty comps)
  for each comp in comps
    count = count + comp.getGraphicalRootCount();
  end for;
end if;
// find packages
select many pkgs related by self->PE_PE[R8003]->EP_PKG[R8001];
for each pkg in pkgs
  count = count + pkg.getGraphicalRootCount();
end for;
return count;
',
	1,
	'',
	"6770a561-5355-4c03-8c3e-3e0a67ba3c08");
INSERT INTO O_TFR
	VALUES ("db4b0572-fadf-47ff-a7ab-24cc43d4cf83",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'getGraphicalRoot',
	'',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// The count starts with 1 because we count this component
count = param.currentPosition + 1;
if count == param.indexToFind
  return self.convertToInstance();
end if;
// find nested components
select many comps related by self->PE_PE[R8003]->C_C[R8001];
if (not_empty comps)
  for each comp in comps
    id = comp.getGraphicalRoot(indexToFind:param.indexToFind, currentPosition:count);
    if (id != GD::NULL_INSTANCE()) 
      return id;
    end if;
    count = count + comp.getGraphicalRootCount();
  end for;
end if;
// find packages
select many pkgs related by self->PE_PE[R8003]->EP_PKG[R8001];
for each pkg in pkgs
  id = pkg.getGraphicalRoot(indexToFind:param.indexToFind, currentPosition:count);
  if (id != GD::NULL_INSTANCE())
    return id;
  end if;
  count = count + pkg.getGraphicalRootCount();
end for;
return GD::NULL_INSTANCE();
',
	1,
	'',
	"868afbc4-b057-4bef-a7a6-674e30b38aeb");
INSERT INTO O_TPARM
	VALUES ("9e8eb1f6-de80-4139-949b-b0084153733e",
	"db4b0572-fadf-47ff-a7ab-24cc43d4cf83",
	'indexToFind',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("146ea21e-8026-4daf-9272-0213b2628c6e",
	"db4b0572-fadf-47ff-a7ab-24cc43d4cf83",
	'currentPosition',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"9e8eb1f6-de80-4139-949b-b0084153733e",
	'');
INSERT INTO O_NBATTR
	VALUES ("40733e86-95b7-4a57-9323-b53c72623a61",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("40733e86-95b7-4a57-9323-b53c72623a61",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("40733e86-95b7-4a57-9323-b53c72623a61",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"ee58121f-1b75-41d6-93d9-6a404a61b2a6",
	'Name',
	'Full Name: Component Name',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a4259683-b640-4dc9-bda4-f6590c84af14",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("a4259683-b640-4dc9-bda4-f6590c84af14",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("a4259683-b640-4dc9-bda4-f6590c84af14",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"40733e86-95b7-4a57-9323-b53c72623a61",
	'Descrip',
	'Full Name: Component Description
Description: A textual description of this component.',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2a4608c1-d031-4ca1-8e88-1988f5a2c5a8",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("2a4608c1-d031-4ca1-8e88-1988f5a2c5a8",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("2a4608c1-d031-4ca1-8e88-1988f5a2c5a8",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"a4259683-b640-4dc9-bda4-f6590c84af14",
	'Mult',
	'Full Name: Multiplicity
Description: Multiplicity of the component.  Indicates how many instances of the component may exist.
Data Domain: 0 = one, 1 = many
enum0: One
enum1: Many',
	'',
	'Mult',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("3e090f06-51ac-4a2c-9a7f-996303147598",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	'result = "";
result = self.Name;

if(self.Mult == 1)
  result = result + "[*]";
end if;
select one pe related by self->PE_PE[R8001];
if not_empty pe
  result = pe.getVisibilityAdornment() + result;
end if;
if(self.isRealized)
  if(self.Realized_Class_Path != "")
    result = result + " realized by " +
                               Util::getLastSegmentForPath(path:self.Realized_Class_Path);
  end if;
end if;
self.Label = result;
',
	1);
INSERT INTO O_BATTR
	VALUES ("3e090f06-51ac-4a2c-9a7f-996303147598",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("3e090f06-51ac-4a2c-9a7f-996303147598",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"2a4608c1-d031-4ca1-8e88-1988f5a2c5a8",
	'Label',
	'User_Visible:false
Persistent:false',
	'',
	'Label',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("635d3b9b-edc6-456d-888d-7375eef81516",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"00bf9518-256f-4c57-be7c-a44fcb8a2a12",
	"05fa1d91-2479-4e4d-97fd-25a6c7afe5b8",
	"60a1905f-e390-4af7-8e38-ce84e413b25d",
	"2dd05ced-0023-4566-824a-97200896ff8e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Packageable Element',
	'Element_ID',
	'R8001');
INSERT INTO R_RGO_PROXY
	VALUES ("635d3b9b-edc6-456d-888d-7375eef81516",
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"00bf9518-256f-4c57-be7c-a44fcb8a2a12",
	'../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"05fa1d91-2479-4e4d-97fd-25a6c7afe5b8",
	'../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RATTR
	VALUES ("60a1905f-e390-4af7-8e38-ce84e413b25d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("60a1905f-e390-4af7-8e38-ce84e413b25d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"00000000-0000-0000-0000-000000000000",
	'Id',
	'',
	'',
	'Id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c98096fa-ec77-4913-bdf2-33b73ff34897",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("c98096fa-ec77-4913-bdf2-33b73ff34897",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("c98096fa-ec77-4913-bdf2-33b73ff34897",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"e38fe5d7-747a-4be6-8901-fc89dabfb141",
	'isRealized',
	'Full Name: Realized Component
Description: If true, Verifier will bind to an externally supplied implementation.',
	'',
	'isRealized',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5b3b10be-b7f2-42e3-a6f0-fb1c55ccff8a",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("5b3b10be-b7f2-42e3-a6f0-fb1c55ccff8a",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("5b3b10be-b7f2-42e3-a6f0-fb1c55ccff8a",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"c98096fa-ec77-4913-bdf2-33b73ff34897",
	'Realized_Class_Path',
	'Full Name: Realized Component Path
Description: Specifies where Verifier will look for a realized executable resource.',
	'',
	'Realized_Class_Path',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("60c4f64c-d18e-4906-ab5f-e2e088cff95d",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("60c4f64c-d18e-4906-ab5f-e2e088cff95d",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("60c4f64c-d18e-4906-ab5f-e2e088cff95d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"60a1905f-e390-4af7-8e38-ce84e413b25d",
	'Package_ID',
	'',
	'',
	'Package_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ee58121f-1b75-41d6-93d9-6a404a61b2a6",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("ee58121f-1b75-41d6-93d9-6a404a61b2a6",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("ee58121f-1b75-41d6-93d9-6a404a61b2a6",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"60c4f64c-d18e-4906-ab5f-e2e088cff95d",
	'NestedComponent_Id',
	'',
	'',
	'NestedComponent_Id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e38fe5d7-747a-4be6-8901-fc89dabfb141",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_BATTR
	VALUES ("e38fe5d7-747a-4be6-8901-fc89dabfb141",
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ATTR
	VALUES ("e38fe5d7-747a-4be6-8901-fc89dabfb141",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	"3e090f06-51ac-4a2c-9a7f-996303147598",
	'Root_Package_ID',
	'',
	'',
	'Root_Package_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_OIDA
	VALUES ("60a1905f-e390-4af7-8e38-ce84e413b25d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	0,
	'Id');
INSERT INTO O_ID
	VALUES (1,
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO O_ID
	VALUES (2,
	"635d3b9b-edc6-456d-888d-7375eef81516");
INSERT INTO PE_PE
	VALUES ("635d3b9b-edc6-456d-888d-7375eef81516",
	1,
	"c2aef6af-89fe-4e4a-a894-da16c0b6f512",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("c2aef6af-89fe-4e4a-a894-da16c0b6f512",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Component',
	'// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE

The component subsystem contains the classes necessary to capture the data
required for modeling components.',
	4000,
	'../Component.xtuml');
