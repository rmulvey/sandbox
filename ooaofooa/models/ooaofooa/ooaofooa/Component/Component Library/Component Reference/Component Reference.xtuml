-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("f1e98764-328b-424c-9f63-1aec01d70b20",
	'Component Reference',
	4704,
	'CL_IC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("104d0f43-0afe-4c0f-9cfa-cd9dc6b752e6",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'actionFilter',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'if(param.name == "can")
  select one package related by self->PE_PE[R8001]->EP_PKG[R8000];
  select one component related by self->PE_PE[R8001]->C_C[R8003];
    
  if(param.value == "assign generic pkg")
    
    if(self.isAssigned())
      // disabled until all bugs are resolved
      // with the reassignment feature
      return false;
    end if;
    
    // Restrict based on visibility.
    if (empty package)
      component.clearScope();
      component.collectVisibleElementsForName(name:"", 
             type:ElementTypeConstants::COMPONENT,
             originatingContainerID:component.Id, 
             delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true);
    else
      package.clearScope();
      package.collectVisibleElementsForName(name:"", 
             type:ElementTypeConstants::COMPONENT,
             descending:false,
             originatingContainerID:package.Package_ID, 
             delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true);
    end if;
    select any resultSet related by package->PE_SRS[R8005] where
       selected.Name == "" and selected.Type == ElementTypeConstants::COMPONENT;
    select many results related by resultSet->PE_VIS[R8006]->PE_PE[R8002];   
    if empty package
      select any compResultSet related by component->PE_CRS[R8007] where
                           selected.Name == "" and selected.Type == 
                                                ElementTypeConstants::COMPONENT;
      select many results related by compResultSet->PE_CVS[R8008]->PE_PE[R8004];   
    end if;
    select many comps related by results->C_C[R8001];
    // The isContainedBy() call prevents a component that hosts the
    // imported component from being available
    if(self.isAssigned())
      select one currentComp related by self->C_C[R4201];
      for each comp in comps
        if(self.componentHasMatchingInterfaces(id:comp.Id) and
                           not comp.isContainedBy(element_id:comp.Id) and
                                                not (comp.Id == currentComp.Id))
          return true;
        end if;
      end for;
    else
      for each comp in comps
        candidatePkg = comp.getPackageId();
        if(self.componentHasMatchingInterfaces(id:comp.Id) and
                                     not comp.isContainedBy(element_id:comp.Id))
          return true;
        end if;
      end for;
    end if;
    return false;
  elif(param.value == "unassign")
    return self.isAssigned();
  elif(param.value == "launchVerifier")
    select one component related by self->C_C[R4201];
    select any engine related by self->I_EXE[R2963];
    // it must be formalized and not yet launched
    if((not_empty component) and (empty engine))
      return true;
    else   
      return false;
    end if;
  end if;
end if;
return false;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("cd90a4d9-5ae3-45ef-aef1-a1b74a8f0e2e",
	"104d0f43-0afe-4c0f-9cfa-cd9dc6b752e6",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("dbe221e9-4af7-4006-a47c-80838a6a6be3",
	"104d0f43-0afe-4c0f-9cfa-cd9dc6b752e6",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cd90a4d9-5ae3-45ef-aef1-a1b74a8f0e2e",
	'');
INSERT INTO O_TFR
	VALUES ("6b83b3f7-d270-48ef-9f11-2a05419c5e9d",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'isAssigned',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one component related by self->C_C[R4201];
return not_empty component;',
	1,
	'',
	"f4ecd0b7-1efe-4acc-b900-c7a5d9d14a95");
INSERT INTO O_TFR
	VALUES ("6ad05d29-aafd-4938-a2c7-5592627f0585",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one comp related by self->C_C[R4201];
if(not_empty comp)
  unrelate self from comp across R4201;
end if;
select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708];
for each importedRef in importedRefs
  importedRef.dispose();
end for; 
select many portRefs related by self->CL_POR[R4707];
for each portRef in portRefs
  portRef.dispose();
end for;
select many executionEngines related by self->I_EXE[R2963];
for each engine in executionEngines
  unrelate engine from self across R2963;
  engine.dispose();
end for;
select one pe related by self->PE_PE[R8001];
if (not_empty pe)
  unrelate self from pe across R8001;
  pe.dispose();
end if;
delete object instance self;',
	1,
	'',
	"07feea2b-7ece-4065-9682-1cfd9a6538e1");
INSERT INTO O_TFR
	VALUES ("e89be8db-573a-41ee-b611-8add6a6f1076",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'assignToComp',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Imported Component.assignToComp()
select any comp from instances of C_C where selected.Id == GD::NULL_UNIQUE_ID();
select one packageableElem related by self->PE_PE[R8001]; 
select one contPackage related by packageableElem->EP_PKG[R8000];
select one contComponent related by packageableElem->C_C[R8003];
select any pe from instances of PE_PE where selected.Element_ID == param.Id;
select one comp related by pe->C_C[R8001];
if(not_empty comp)
  if(self.isAssigned())
    select one existingComp related by self->C_C[R4201];
    unrelate self from existingComp across R4201;
    select many formalInterfaces related by comp->C_PO[R4010]->C_IR[R4016];
    for each formalInterface in formalInterfaces
      select many existingImportRefs related by self->CL_POR[R4707]->CL_IIR[R4708];
      for each existingImportRef in existingImportRefs
        select one existingRef related by existingImportRef->C_IR[R4701];
        // if this existing ref is dangling
        // dispose it here and skip
        select one existingIface related by existingRef->C_I[R4012];
        skipDispose = false;
        if(not_empty existingIface and not Util::isProxy(element:existingIface.convertToInstance()))
          skipDispose = true;
        end if;
        if(Util::isProxy(element:existingRef.convertToInstance()) and not skipDispose)
          existingImportRef.dispose();
          continue;
        end if;
        if(existingRef.Formal_Interface_Id
                                        == formalInterface.Formal_Interface_Id)
          // if this ref has already been processed skip
          select one testComp related by existingRef->C_PO[R4016]->C_C[R4010];
          if(testComp != comp)
            // not from the same comp, go ahead and proceed
            select any importedRef related by self->CL_POR[R4707]->CL_IIR[R4708]
                                      where (selected.Ref_Id == existingRef.Id);
            unrelate importedRef from existingRef across R4701;
            relate importedRef to formalInterface across R4701;
            select one currentProvision related by existingRef->C_P[R4009];
            if(not_empty currentProvision)
              select one importedPro related by importedRef->CL_IP[R4703];
              select many satisfactions related by importedPro
                                                 ->CL_IPINS[R4705]->C_SF[R4705];
              for each satisfaction in satisfactions
                select one ipins related by satisfaction->CL_IPINS[R4705];
                select one provision related by formalInterface->C_P[R4009];
                select one otherReq related by satisfaction->C_R[R4002];
                unrelate currentProvision from otherReq across R4002
                                                             using satisfaction;
                relate provision to otherReq across R4002 using satisfaction;
              end for;
            else
              select one currentRequirement related by existingRef->C_R[R4009];
              select one importedReq related by importedRef->CL_IR[R4703];
              select one satisfaction related by importedReq->C_SF[R4706];
              if(not_empty satisfaction)
                select one requirement related by formalInterface->C_R[R4009];
                select one otherPro related by satisfaction->C_P[R4002];
                unrelate currentRequirement from otherPro across R4002 using
              													   satisfaction;
                relate requirement to otherPro across R4002
                                                             using satisfaction;
              end if;            
            end if;
            // break out of the inner for loop as
            // we have processed what we need
            break;
          end if;
        end if;
      end for;
    end for;
  end if;
  relate self to comp across R4201;
  select many formalInterfaces related by comp->C_PO[R4010]->C_IR[R4016];
  for each formalInterface in formalInterfaces
    if(formalInterface.isFormal())
      select any existingImportRef related by self->CL_POR[R4707]->CL_IIR[R4708]->C_IR[R4701]
        							  where (selected.Id == formalInterface.Id);
      if(empty existingImportRef)
        select one provision related by formalInterface->C_P[R4009];
        create object instance newImportedRef of CL_IIR;
        if(not_empty provision)
          create object instance importedPro of CL_IP;
          relate importedPro to newImportedRef across R4703;
        else
          create object instance importedReq of CL_IR;
          relate importedReq to newImportedRef across R4703;
        end if;
        create object instance portRef of CL_POR;
        select one existingPort related by formalInterface->C_PO[R4016];
        relate existingPort to portRef across R4709;
        relate portRef to self across R4707;
        relate portRef to newImportedRef across R4708;
        relate newImportedRef to formalInterface across R4701;
      end if;
    end if;
  end for; 
end if;
',
	1,
	'',
	"104d0f43-0afe-4c0f-9cfa-cd9dc6b752e6");
INSERT INTO O_TPARM
	VALUES ("e7e1b3cd-cf17-4409-ae7d-65353b494c61",
	"e89be8db-573a-41ee-b611-8add6a6f1076",
	'Id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("039f6f33-a087-4b7f-8590-caf484da3583",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'unAssign',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one comp related by self->C_C[R4201];
if(not_empty comp)
  unrelate self from comp across R4201;
  select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708];
  for each importedRef in importedRefs
    importedRef.dispose();
  end for;
end if;',
	1,
	'',
	"5bbe70e6-ec62-483b-9bfc-4abfe1be5735");
INSERT INTO O_TFR
	VALUES ("07feea2b-7ece-4065-9682-1cfd9a6538e1",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'return this;',
	0,
	'',
	"8d4212d5-2474-4875-be9d-bc127c996c42");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("8e7ec808-2d00-44d7-b70a-4a3422c8308a",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'get_compartment_text',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result = "";
if (param.at == Justification::Center)
  if(self.isAssigned())
    result = self.getCachedName();
    select one comp related by self->C_C[R4201];
    if(not Util::isProxy(element:comp.convertToInstance()))
      result = comp.getPath(path:"", includeSelf:true);
      if(self.ClassifierName != "")
        result = result + ":" + self.ClassifierName;
      end if;
      if(self.Mult == 1)
        result = result + "[*]";
      end if;
    end if;
    self.setCachedName(name:result);
  else
    result = "Unassigned Component Reference";
  end if;
end if;
return result;',
	1,
	'',
	"4e652e91-8932-4c0d-90a3-4f476533a72f");
INSERT INTO O_TPARM
	VALUES ("4daa383b-cbc4-4b99-afea-de2a8ae9affe",
	"8e7ec808-2d00-44d7-b70a-4a3422c8308a",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	"00000000-0000-0000-0000-000000000000",
	'Justification',
	'The Justification data type is used to specify text at a given location in a compartment.
------------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TPARM
	VALUES ("c98a7e64-4fee-4f4b-b841-3a84021787e1",
	"8e7ec808-2d00-44d7-b70a-4a3422c8308a",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"f7000384-c89e-4f86-a15a-8eb047879268",
	'');
INSERT INTO O_TPARM
	VALUES ("f7000384-c89e-4f86-a15a-8eb047879268",
	"8e7ec808-2d00-44d7-b70a-4a3422c8308a",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"4daa383b-cbc4-4b99-afea-de2a8ae9affe",
	'');
INSERT INTO O_TFR
	VALUES ("44a17e54-b1c1-4259-9950-1c581f9b32a3",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getElideCompartmentTextAtEnd',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// elide at the front if the given compartment/entry corresponds to
// the class''s path (and name), and a class has been assigned to this instance 
select one component related by self->C_C[R4201];
elideAtFront = false;	// necessary due to bug with boolean expressions
elideAtFront = param.comp_num == 1 and param.ent_num == 0 
	and not_empty component;
return elideAtFront;',
	1,
	'',
	"6ad05d29-aafd-4938-a2c7-5592627f0585");
INSERT INTO O_TPARM
	VALUES ("341559ac-c42a-4941-b2e4-d94a7520576f",
	"44a17e54-b1c1-4259-9950-1c581f9b32a3",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("1e990678-1ff1-4cad-92a4-bbd86b4dd8f1",
	"44a17e54-b1c1-4259-9950-1c581f9b32a3",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"341559ac-c42a-4941-b2e4-d94a7520576f",
	'');
INSERT INTO O_TFR
	VALUES ("303f46df-c9bb-47bd-b654-17078100c0c0",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'get_compartments',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"8e7ec808-2d00-44d7-b70a-4a3422c8308a");
INSERT INTO O_TFR
	VALUES ("059620bd-f5f7-470f-8032-d9800201abb2",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'get_entries',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"303f46df-c9bb-47bd-b654-17078100c0c0");
INSERT INTO O_TPARM
	VALUES ("4ed734e4-81be-4284-89df-5cb777abfa13",
	"059620bd-f5f7-470f-8032-d9800201abb2",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("594ed122-246c-41a1-a6ae-17931de58fcd",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'get_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::Component;',
	1,
	'',
	"059620bd-f5f7-470f-8032-d9800201abb2");
INSERT INTO S_DT_PROXY
	VALUES ("05be3a7b-3886-4857-8a5e-5c08c37293ab",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("49eb8493-6225-4259-b654-43bf065c3075",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'get_text_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::None;',
	1,
	'',
	"594ed122-246c-41a1-a6ae-17931de58fcd");
INSERT INTO O_TPARM
	VALUES ("6016f3df-4c81-408d-80be-f42fb37053cc",
	"49eb8493-6225-4259-b654-43bf065c3075",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("155a51e5-80d7-4f2b-9b2d-e43e71811024",
	"49eb8493-6225-4259-b654-43bf065c3075",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"6016f3df-4c81-408d-80be-f42fb37053cc",
	'');
INSERT INTO O_TPARM
	VALUES ("268d21df-01cf-4a70-b986-6e9c3e50fb90",
	"49eb8493-6225-4259-b654-43bf065c3075",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"155a51e5-80d7-4f2b-9b2d-e43e71811024",
	'');
INSERT INTO O_TFR
	VALUES ("8c872c81-2f27-4a09-8498-5e6c75d706c2",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'manyMultAllowed',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'return true;',
	1,
	'',
	"6b83b3f7-d270-48ef-9f11-2a05419c5e9d");
INSERT INTO O_TFR
	VALUES ("9ea188a3-edf0-4a0d-a0e1-24648978ae63",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'canAssignToComp',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one packageableElem related by self->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

  // do not allow assignment to any parent component in this hierarchy
  parentPackage = package;
  parentComp = component;
  while(not_empty parentPackage or not_empty parentComp)
    if not_empty parentComp and parentComp.Id == param.Id
      return false;
    end if;
    // traverse to container
    select one parentPE related by parentPackage->PE_PE[R8001];
    if empty parentPE
      select one parentPE related by parentComp->PE_PE[R8001];
    end if;
    select one parentPackage related by parentPE->EP_PKG[R8000];
    select one parentComp related by parentPE->C_C[R8003];
  end while;

  select one system related by package->S_SYS[R1405];
  if (empty system)
    rootCompIdInPkg = component.getRootComponentId();
    select any rootComponent from instances of C_C where (selected.Id == rootCompIdInPkg);
    select one system related by rootComponent->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
  end if;
  select any component related by system->EP_PKG[R1405]->PE_PE[R8000]
  								   ->C_C[R8001] where (selected.Id == param.Id);
  if(not_empty component)
    existingCompId = GD::NULL_UNIQUE_ID();
    if(self.isAssigned())
      // if assigned get the component id
      // so that we prevent packages which
      // only contain the component we are
      // assigned to
      select one existingComp related by self->C_C[R4201];
      existingCompId = existingComp.Id;
    end if;
    if(self.componentHasMatchingInterfaces(id:component.Id))
      if(param.checkExistingType)
        if(component.Id == existingCompId)
          return false;
        end if;
      end if;
      return true;
    else
      return false;
    end if;
  end if;
  return true;

',
	1,
	'',
	"e89be8db-573a-41ee-b611-8add6a6f1076");
INSERT INTO O_TPARM
	VALUES ("d28a5ed8-89d7-4382-bd46-b7392b26f389",
	"9ea188a3-edf0-4a0d-a0e1-24648978ae63",
	'Id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'The id of the C_C instance to test.');
INSERT INTO O_TPARM
	VALUES ("d949e299-17cf-4d86-baa3-445a40679fa9",
	"9ea188a3-edf0-4a0d-a0e1-24648978ae63",
	'checkExistingType',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"d28a5ed8-89d7-4382-bd46-b7392b26f389",
	'');
INSERT INTO O_TFR
	VALUES ("00c6ebab-e9a9-4f47-99f0-e3b0b12be398",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedProvisionCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'count = 0;
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select many importedReferences related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
for each importedReference in importedReferences
  select one innerPkg related by importedReference->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
    count = count+1;
  end if;
end for;
return count;
',
	1,
	'',
	"44a17e54-b1c1-4259-9950-1c581f9b32a3");
INSERT INTO O_TPARM
	VALUES ("87f1db66-4196-4d1b-b61a-26ff4d0d0577",
	"00c6ebab-e9a9-4f47-99f0-e3b0b12be398",
	'includeDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fe1047d7-e78b-48e2-b772-ee79317524c5",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedRequirementCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'count = 0;
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select many importedReferences related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
for each importedReference in importedReferences
  select one innerPkg related by importedReference->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
    count = count+1;
  end if;
end for;
return count;
',
	1,
	'',
	"348837ae-a5b9-456d-b1a4-f6429098732a");
INSERT INTO O_TPARM
	VALUES ("2856d166-b77a-4dc7-beb7-eea8ad2c0202",
	"fe1047d7-e78b-48e2-b772-ee79317524c5",
	'includeDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("248a9b1c-5921-471d-9223-7d209a167e70",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedProvisionID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
  select one innerPkg related by importedRef->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
  count = count+1;
  if (count == param.index)
    return importedRef.Id;
  end if;
  end if;
end for;
return id;',
	1,
	'',
	"00c6ebab-e9a9-4f47-99f0-e3b0b12be398");
INSERT INTO O_TPARM
	VALUES ("1244c38a-23a5-47d9-b579-3f7a6a5f72e5",
	"248a9b1c-5921-471d-9223-7d209a167e70",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("f17b9be8-3941-45ff-a618-863414359395",
	"248a9b1c-5921-471d-9223-7d209a167e70",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1244c38a-23a5-47d9-b579-3f7a6a5f72e5",
	'');
INSERT INTO O_TFR
	VALUES ("994ccbc8-ff84-4061-aa83-b753cfb6e75f",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedRequirementID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
  select one innerPkg related by importedRef->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
  if (outerPkg.Package_ID == innerPkg.Package_ID)
  count = count+1;
  if (count == param.index)
    return importedRef.Id;
  end if;
  end if;
end for;
return id;',
	1,
	'',
	"fe1047d7-e78b-48e2-b772-ee79317524c5");
INSERT INTO O_TPARM
	VALUES ("c366022c-774c-4fde-bc04-9a1fbedfa2da",
	"994ccbc8-ff84-4061-aa83-b753cfb6e75f",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4722d5d5-737e-4dfd-ae02-23adbb983134",
	"994ccbc8-ff84-4061-aa83-b753cfb6e75f",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"c366022c-774c-4fde-bc04-9a1fbedfa2da",
	'');
INSERT INTO O_TFR
	VALUES ("f4ecd0b7-1efe-4acc-b900-c7a5d9d14a95",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'hasImportedRequirement',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select any importedReq related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703]
	where (selected.Id == param.id);
select one innerPkg related by importedReq->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
if(not_empty importedReq and (outerPkg.Package_ID == innerPkg.Package_ID))
  select one delegation related by importedReq->CL_IIR[R4703]->C_DG[R4704];
  if(param.considerDelegations)
    if(empty delegation)
      return true;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        return true;
      end if;    
    end if;
  end if;
end if;
return false;
',
	1,
	'',
	"2b83487a-b1f4-49ee-a7b8-dc422b8c24aa");
INSERT INTO O_TPARM
	VALUES ("003aa758-2fc6-43c6-8df1-3fa0b3eb57d2",
	"f4ecd0b7-1efe-4acc-b900-c7a5d9d14a95",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2d9c059a-ac65-4b92-a0cf-4010b64edef1",
	'');
INSERT INTO O_TPARM
	VALUES ("2d9c059a-ac65-4b92-a0cf-4010b64edef1",
	"f4ecd0b7-1efe-4acc-b900-c7a5d9d14a95",
	'considerDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2b83487a-b1f4-49ee-a7b8-dc422b8c24aa",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'hasImportedProvision',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
select any importedPro related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703]
	where (selected.Id == param.id);
select one innerPkg related by importedPro->CL_IIR[R4703]->CL_POR[R4708]->CL_IC[R4707]->PE_PE[R8001]->EP_PKG[R8000];
if(not_empty importedPro and (outerPkg.Package_ID == innerPkg.Package_ID))
  select one delegation related by importedPro->CL_IIR[R4703]->C_DG[R4704];
  if(param.considerDelegations)
    if(empty delegation)
      return true;
    else
      // if including delegations, only include those in the same package
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)
        return true;
      end if;    
    end if;
  end if;
end if;
return false;',
	1,
	'',
	"49eb8493-6225-4259-b654-43bf065c3075");
INSERT INTO O_TPARM
	VALUES ("122a22a0-8640-4c5b-a445-0155c47c853a",
	"2b83487a-b1f4-49ee-a7b8-dc422b8c24aa",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"66546e1b-2806-483f-98ee-59d2ddb46fde",
	'');
INSERT INTO O_TPARM
	VALUES ("66546e1b-2806-483f-98ee-59d2ddb46fde",
	"2b83487a-b1f4-49ee-a7b8-dc422b8c24aa",
	'considerDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("348837ae-a5b9-456d-b1a4-f6429098732a",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedProvisionProvisionID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
    select one provision related by importedRef->CL_IIR[R4703]->C_IR[R4701]
    															   ->C_P[R4009];
    select one delegation related by importedRef->CL_IIR[R4703]->C_DG[R4704];
    if(not_empty delegation)
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)       
        count = count + 1;
        if (count == param.index)
          return delegation.Id;
        end if;
      end if;    
    end if;
    if(not_empty provision)
      select one provisionPkg related by provision->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty provisionPkg and outerPkg.Package_ID == provisionPkg.Package_ID)
        count = count + 1;
        if (count == param.index)
          return provision.Provision_Id;
        end if;
      end if;
    end if;
end for;
return id;',
	1,
	'',
	"248a9b1c-5921-471d-9223-7d209a167e70");
INSERT INTO O_TPARM
	VALUES ("7d458436-b51f-4226-9c3e-e1611df68022",
	"348837ae-a5b9-456d-b1a4-f6429098732a",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e52ae407-61c1-4632-923d-a5a4099a95e3",
	"348837ae-a5b9-456d-b1a4-f6429098732a",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7d458436-b51f-4226-9c3e-e1611df68022",
	'');
INSERT INTO O_TFR
	VALUES ("4e652e91-8932-4c0d-90a3-4f476533a72f",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedRequirementRequirementID',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
select one outerPkg related by self->PE_PE[R8001]->EP_PKG[R8000];
// We''re preincrementing the index
count = -1;
for each importedRef in importedRefs
    select one requirement related by importedRef->CL_IIR[R4703]->C_IR[R4701]
    															   ->C_R[R4009];
    select one delegation related by importedRef->CL_IIR[R4703]->C_DG[R4704];
    if(not_empty delegation)
      select one dPkg related by delegation->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty dPkg and outerPkg.Package_ID == dPkg.Package_ID)       
        count = count + 1;
        if (count == param.index)
          return delegation.Id;
        end if;
      end if;    
    end if;
    if(not_empty requirement)
      select one rPkg related by requirement->C_IR[R4009]->C_PO[R4016]->C_C[R4010]->PE_PE[R8001]->EP_PKG[R8000];
      if (not_empty rPkg and outerPkg.Package_ID == rPkg.Package_ID)
        count = count + 1;
        if (count == param.index)
          return requirement.Requirement_Id;
        end if;
      end if;
    end if;
end for;
return id;',
	1,
	'',
	"994ccbc8-ff84-4061-aa83-b753cfb6e75f");
INSERT INTO O_TPARM
	VALUES ("e252c590-cc42-49d7-b5f2-649badcc8c2d",
	"4e652e91-8932-4c0d-90a3-4f476533a72f",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"03bbceae-ecf8-47fa-a752-b9ff1003708d",
	'');
INSERT INTO O_TPARM
	VALUES ("03bbceae-ecf8-47fa-a752-b9ff1003708d",
	"4e652e91-8932-4c0d-90a3-4f476533a72f",
	'filterDelegations',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("85c774fa-aafd-479b-826c-970d0e3e090f",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'componentHasMatchingInterfaces',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// if this imported component is not assigned, or assigned
// to a component with no imported refs then it''s allowed
if(not self.isAssigned())
  return true; 
else
  // it is also allowed if assigned, but the currently
  // assigned component has no interface references that
  // are formal
  select any importedRef related by self->CL_POR[R4707]->CL_IIR[R4708];
  if(empty importedRef)
    return true;
  end if;
end if;


  select any compPe from instances of PE_PE
                                        where (selected.Element_ID == param.id);
  select one component related by compPe->C_C[R8001];
  
  if(not_empty component)
		rootCompIdInPkg = component.getRootComponentId();
        select any rootComponent from instances of C_C
                                         where (selected.Id == rootCompIdInPkg);
        select one package related by rootComponent->PE_PE[R8001]
                                                                ->EP_PKG[R8000];
        select one system related by rootComponent->PE_PE[R8001]
                                                  ->EP_PKG[R8000]->S_SYS[R1405];
// This code is commented out for now.  See this issue for more information:
// https://support.onefact.net/redmine/issues/8052
// The above issue must uncomment the below code.

    select any system from instances of S_SYS where (selected.Sys_ID == GD::NULL_UNIQUE_ID());
    if(not_empty system)
      select many importedRefs related by self->CL_POR[R4707]->CL_IIR[R4708]->C_IR[R4701];
      for each importedRef in importedRefs
        select one importedInterface related by importedRef->C_I[R4012];
        select many compInterfaces related by component->C_PO[R4010]->C_IR[R4016]
						                  ->C_P[R4009]->C_IR[R4009]->C_I[R4012];
        select one provision related by importedRef->C_P[R4009];
        if(empty provision)
          select many compInterfaces related by component->C_PO[R4010]
                             ->C_IR[R4016]->C_R[R4009]->C_IR[R4009]->C_I[R4012];
        end if;
        if(cardinality compInterfaces == 0)
          return false;
        end if;
        foundMatch = false;
        for each compInterface in compInterfaces
          id = importedRef.findMatchingInterface(system_id:system.Sys_ID,
                                                                   pe:param.id);
          if(id == compInterface.Id)
            foundMatch = true;
          end if;
        end for;
        if(not foundMatch)
          return false;
        end if;
      end for;
    end if;
  end if;
return true;',
	1,
	'',
	"9ea188a3-edf0-4a0d-a0e1-24648978ae63");
INSERT INTO O_TPARM
	VALUES ("9cdbd990-3e55-4f04-9298-b448ab8b55fc",
	"85c774fa-aafd-479b-826c-970d0e3e090f",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8d4212d5-2474-4875-be9d-bc127c996c42",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'componentHasUnusableInterfaces',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
 *  See if the given component has any interfaces that
 *  are not accessible in the parent of this imported
 *  component
 */
select one packageableElem related by self->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one comp related by packageableElem->C_C[R8003];

  select any pe from instances of PE_PE where selected.Element_ID == param.id;
  select one candidateComponent related by pe->C_C[R8001];
  if(not_empty candidateComponent)
    select many irs related by candidateComponent->C_PO[R4010]->C_IR[R4016];
    for each ir in irs
      select one interface related by ir->C_I[R4012];
      if not_empty interface
        if not_empty comp
          comp.collectVisibleElementsForName(name:interface.Name,
                                   type:ElementTypeConstants::INTERFACE,
                          originatingContainerID:comp.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
        else
          package.collectVisibleElementsForName(name:interface.Name,
                  type:ElementTypeConstants::INTERFACE, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
        end if;
        select any resultSet related by comp->PE_CRS[R8007] where
                                 selected.Name == interface.Name and 
                               selected.Type == ElementTypeConstants::INTERFACE; 
        select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
        if not_empty package
          select any pkgResultSet related by package->PE_SRS[R8005] where
                                    selected.Name == interface.Name and 
                               selected.Type == ElementTypeConstants::INTERFACE; 
          select many results related by pkgResultSet->
                                                    PE_VIS[R8006]->PE_PE[R8002];
        end if;
        // We don''t care if more than one interface meets the criterion
        // because the parser will show an error when it is referenced
        if empty results  // so a simple empty test is sufficient
          return true;
        end if;
      end if;
    end for;
    // if we get here then there were none that were unusable
    return false;
  end if;

return true;',
	1,
	'',
	"85c774fa-aafd-479b-826c-970d0e3e090f");
INSERT INTO O_TPARM
	VALUES ("372707d9-2114-4414-80e2-e4c86c7c2bf5",
	"8d4212d5-2474-4875-be9d-bc127c996c42",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5bbe70e6-ec62-483b-9bfc-4abfe1be5735",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'resolveComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one componentProxy related by self->C_C[R4201];
// if the component is not actually a proxy this imported
// component has already been handled
if(not_empty componentProxy) and
                    (Util::isProxy(element:componentProxy.convertToInstance()))
                       and (not Util::isProxy(element:self.convertToInstance()))
  name = componentProxy.Name;
  
  select any resolvedComp from instances of C_C
                          where (selected.Id == GD::NULL_UNIQUE_ID());
                            
  select one packageableElem related by self->PE_PE[R8001];
  select one package related by packageableElem->EP_PKG[R8000];
  select one component related by packageableElem->C_C[R8003];  
  
    if (not_empty package)
      select one system related by package->S_SYS[R1405];
    else
      rootCompIdInPkg = component.getRootComponentId();
      select any rootComponent from instances of C_C
                                         where (selected.Id == rootCompIdInPkg);
      select one package related by rootComponent->PE_PE[R8001]->EP_PKG[R8000];
      select one system related by package->S_SYS[R1405];
    end if;
	select one packageableElement related by self->PE_PE[R8001];
	packageableElement.resolveComponentRelativeToSelf(expected_name:name);
	select many resolvedComps related by package->PE_VIS[R8002]->
                                                     PE_PE[R8002]->C_C[R8001];
    if (empty resolvedComps)
      select many resolvedComps related by component->PE_CVS[R8004]->
                       			                      PE_PE[R8004]->C_C[R8001];
    end if;	
  
  for each comp in resolvedComps
    if(self.canAssignToComp(Id:comp.Id, checkExistingType:true))
       resolvedComp = comp;
       break;
    end if;
  end for;
  // if one was not resolved
  if(empty resolvedComp)
    // unassign this comp
	self.unAssign();
  else
    // update all of the imported refereces
    // to point at valid interfaces
    self.updateImportedReferences(Id:resolvedComp.Id);
    // otherwise associate the found component
    self.assignToComp(Id:resolvedComp.Id);
  end if;
end if;',
	1,
	'',
	"8c872c81-2f27-4a09-8498-5e6c75d706c2");
INSERT INTO O_TFR
	VALUES ("a6ae2ca4-a313-46b4-82ef-77b2852292c5",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'updateImportedReferences',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any resolvedCompPe from instances of PE_PE
                                        where (selected.Element_ID == param.Id);
select any resolvedComp from instances of C_C
                                    where (selected.Id == GD::NULL_UNIQUE_ID());
if(empty resolvedCompPe)
  select any resolvedComp from instances of C_C where (selected.Id == param.Id);
else
  select one resolvedComp related by resolvedCompPe->C_C[R8001];
end if;
if(not_empty resolvedComp)
  select many importedReferences related by self->CL_POR[R4707]->CL_IIR[R4708];
  for each importedReference in importedReferences
    select one reference related by importedReference->C_IR[R4701];
    select one proxyInterface related by reference->C_I[R4012];
    if(not_empty proxyInterface and
                      Util::isProxy(element:proxyInterface.convertToInstance()))

        select one package related by resolvedCompPe->EP_PKG[R8000];
        select one component related by resolvedCompPe->C_C[R8003];
        select one system related by package->S_SYS[R1405];
        if (empty system)
          rootCompIdInPkg = component.getRootComponentId();
          select any rootComponent from instances of C_C
                                         where (selected.Id == rootCompIdInPkg);
          select one package related by rootComponent->PE_PE[R8001]
                                                                ->EP_PKG[R8000];
          select one system related by rootComponent->PE_PE[R8001]
                                                  ->EP_PKG[R8000]->S_SYS[R1405];
        end if;
        id = reference.findMatchingInterface(system_id:system.Sys_ID, pe:resolvedCompPe.Element_ID);
        if(id != GD::NULL_UNIQUE_ID())
          select any ifacePe from instances of PE_PE where (selected.Element_ID == id);
          select one interface related by ifacePe->C_I[R8001];
          if(not_empty interface)
            unrelate reference from proxyInterface across R4012;
            relate reference to interface across R4012; 
          end if;
        end if;

    end if;
  end for;
end if;',
	1,
	'',
	"039f6f33-a087-4b7f-8590-caf484da3583");
INSERT INTO O_TPARM
	VALUES ("a2494f3f-6405-4ee7-b257-bdcad6a15e30",
	"a6ae2ca4-a313-46b4-82ef-77b2852292c5",
	'Id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("76f6d1b0-2772-485e-8bc5-47341adb3cce",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'isParentExecuting',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Component Instance.isParentExecuting()
select any container related by self->I_EXE[R2963]->I_CIN[R2975];
return not_empty container;
',
	1,
	'',
	"a6ae2ca4-a313-46b4-82ef-77b2852292c5");
INSERT INTO O_TFR
	VALUES ("4c6965c3-a51b-49b0-b5e1-472aea0ec787",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getImportedComponentNumber',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select one component related by self->C_C[R4201];
if(not_empty component)
  count = 0;
  select many icomps related by component->CL_IC[R4201];
  for each icomp in icomps
    count = count + 1;
    if(icomp == self)
      return count;
    end if;
  end for;
end if;
return 1;',
	1,
	'',
	"76f6d1b0-2772-485e-8bc5-47341adb3cce");
INSERT INTO O_TFR
	VALUES ("c59e09a3-0aa7-4623-b3f5-32a8e2679116",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'isExecuting',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Component Reference.isExecuting()
// TBD This is used to determine whether a Component Reference tree entry should
// show in the Session Explorer. The selection is actually incorrect, since it
// will make the entry appear under all components that nest this component
// reference, whether or not an instance was started for that component. For
// now, it is a reasonable interpretation.
select any instance related by self->I_EXE[R2963];
return not_empty instance;',
	1,
	'',
	"4c6965c3-a51b-49b0-b5e1-472aea0ec787");
INSERT INTO O_TFR
	VALUES ("27c122f7-519a-485e-976b-54eb918ffd2b",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.Id;',
	1,
	'',
	"c59e09a3-0aa7-4623-b3f5-32a8e2679116");
INSERT INTO O_TFR
	VALUES ("ce9d009f-fdc8-4cf7-965d-252a1d15ae0c",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getConfigurationInheritanceElementId',
	'',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'select one component related by self->C_C[R4201];
if(not_empty component)
  return component.convertToInstance();
end if;
return self.convertToInstance();',
	1,
	'',
	"27c122f7-519a-485e-976b-54eb918ffd2b");
INSERT INTO O_TFR
	VALUES ("536118a7-552b-4ea1-9fd2-77c9cf6a2cc0",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'isSynchronized',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/**
 *  Determine if this reference is synchronized
 */
// not synchronized if referring to a torn down component
select one component related by self->C_C[R4201];
if(empty component)
  // synchronized as the reference is not formal
  return true;
end if;
if(Util::isProxy(element:component.convertToInstance()))
  // is a proxy, means the referred to component is missing
  return false;
end if;
// see if the parent is missing or a proxy
select one pe related by component->PE_PE[R8001];
if(empty pe)
  return false;
end if;
// now check to see if there are additional interface references added
select many interfaceRefs related by component->C_PO[R4010]->C_IR[R4016];
for each interfaceRef in interfaceRefs
  if(interfaceRef.isFormal())
    select any localRef related by self->CL_POR[R4707]->CL_IIR[R4708]->C_IR[R4701]
                                         where (selected.Id == interfaceRef.Id);
    if(empty localRef)
      // not synchronized
      return false;
    end if;
  end if;
end for;
return true;',
	1,
	'',
	"ce9d009f-fdc8-4cf7-965d-252a1d15ae0c");
INSERT INTO O_TFR
	VALUES ("7ad6b498-5e3d-4eca-980a-b2858351bc5e",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'synchronize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'/**
 * Synchronize this reference, which is simply to unassign it
 */
// only unassign if the referenced component is a proxy
select one component related by self->C_C[R4201];
select one pe related by component->PE_PE[R8001];
if(Util::isProxy(element:component.convertToInstance()) or
                                   (empty pe))
  self.unAssign();
else
  // we need to add local imported references for any not
  // already handled
  select many interfaceRefs related by component->C_PO[R4010]->C_IR[R4016];
  for each interfaceRef in interfaceRefs
    select any localRef related by self->CL_POR[R4707]->CL_IIR[R4708]->C_IR[R4701]
                                         where (selected.Id == interfaceRef.Id);
    if(empty localRef and interfaceRef.isFormal())
      // create a local ref
      select one provision related by interfaceRef->C_P[R4009];
      create object instance importedRef of CL_IIR;
      if(not_empty provision)
        create object instance importedPro of CL_IP;
        relate importedPro to importedRef across R4703;
      else
        create object instance importedReq of CL_IR;
        relate importedReq to importedRef across R4703;        
      end if;
      create object instance portRef of CL_POR;
      select one existingPort related by interfaceRef->C_PO[R4016];
      relate existingPort to portRef across R4709;
      relate portRef to self across R4707;
      relate importedRef to portRef across R4708;
      relate importedRef to interfaceRef across R4701;
    end if;
  end for;
end if;',
	1,
	'',
	"536118a7-552b-4ea1-9fd2-77c9cf6a2cc0");
INSERT INTO O_TFR
	VALUES ("8142e19b-eca8-4fcc-aed6-3a1016430741",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'collectChanges',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'/**
 *  Collect changes that will occur once this reference is synchronized
 */
// for a component reference this will be is formalization state, satisfaction,
// as well as its imported interface references
if(not self.isSynchronized())
  select one comp related by self->C_C[R4201]; 
  select one pe related by comp->PE_PE[R8001];
  if(Util::isProxy(element:comp.convertToInstance()) or
                                   (empty pe))
    // we only need to collect the unassign change
    Util::createElementChange(changeList: param.changeList,
                                        elementChanged:self.convertToInstance(),
                                     isRemoval:true, changeLabel:"Unassigned");
  else
    select many interfaceRefs related by comp->C_PO[R4010]->C_IR[R4016];
    for each interfaceRef in interfaceRefs
      if(interfaceRef.isFormal())
        select any localRef related by self->CL_POR[R4707]->CL_IIR[R4708]->C_IR[R4701]
                                         where (selected.Id == interfaceRef.Id);
        if(empty localRef)
          Util::createElementChange(changeList:param.changeList, elementChanged:
                                      self.convertToInstance(), isRemoval:false,
                           changeLabel:interfaceRef.interfaceName() + " added");
        end if;
      end if;
    end for;
  end if;
end if;',
	1,
	'',
	"7ad6b498-5e3d-4eca-980a-b2858351bc5e");
INSERT INTO O_TPARM
	VALUES ("b7ca2ebf-ccdd-41b5-9488-6a3e381bdedf",
	"8142e19b-eca8-4fcc-aed6-3a1016430741",
	'changeList',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b871a85f-5060-4c73-a2b7-c82ff51fdc59",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'collectReferencesForSynchronization',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'/*
 *  Collect imported interface references (for push or pull)
 */
select many importedProvisions related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
for each importedPro in importedProvisions
  Util::addElementToList(elementList:param.referenceList,
                                       element:importedPro.convertToInstance());
end for;
select many importedRequirements related by self->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];
for each importedReq in importedRequirements
  Util::addElementToList(elementList:param.referenceList,
                                       element:importedReq.convertToInstance());    
end for;',
	1,
	'',
	"8142e19b-eca8-4fcc-aed6-3a1016430741");
INSERT INTO O_TPARM
	VALUES ("644da746-5038-4a72-9074-4cf2d306a63f",
	"b871a85f-5060-4c73-a2b7-c82ff51fdc59",
	'referenceList',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4cdd9b40-6890-4700-81a7-1203455af379",
	"b871a85f-5060-4c73-a2b7-c82ff51fdc59",
	'syncType',
	"4f33ba55-5c9d-455a-b1bc-43ab2c076b7f",
	0,
	'',
	"644da746-5038-4a72-9074-4cf2d306a63f",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4f33ba55-5c9d-455a-b1bc-43ab2c076b7f",
	"00000000-0000-0000-0000-000000000000",
	'SynchronizationType',
	'',
	'',
	'../../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("d14d6c3e-e643-4fc8-bda0-f49d124ce39a",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'getCachedName',
	'Translate:native',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'	return m_name;',
	0,
	'',
	"b871a85f-5060-4c73-a2b7-c82ff51fdc59");
INSERT INTO O_TFR
	VALUES ("bea59630-e61d-43b0-879b-d5e6936fb8d9",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'setCachedName',
	'Translate:native',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'	m_name = p_Name;',
	0,
	'',
	"d14d6c3e-e643-4fc8-bda0-f49d124ce39a");
INSERT INTO O_TPARM
	VALUES ("010ae5a9-22d9-4fd1-8d66-e5c053820cef",
	"bea59630-e61d-43b0-879b-d5e6936fb8d9",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("472e8aab-05c6-44ca-965a-02c98be35a83",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'isReferringToDefaultComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one component related by self->C_C[R4201];
if(not_empty component)
  return Util::isProxy(element:component.convertToInstance());
end if;
return true;',
	1,
	'',
	"bea59630-e61d-43b0-879b-d5e6936fb8d9");
INSERT INTO O_TFR
	VALUES ("08493d51-9e3e-4f79-b8ec-ed4b7336acc7",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'canReferToComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one comp related by self->C_C[R4201];
select one pe related by self->PE_PE[R8001];
isAccessible = true;
if(not_empty pe)
  // need to verify that the component in question
  // is accessible
  isAccessible = pe.isElementVisibleToSelf(type:
                            ElementTypeConstants::COMPONENT, elementId:comp.Id);
end if;
return isAccessible and self.canAssignToComp(Id:comp.Id,
                                                      checkExistingType: false);',
	1,
	'',
	"472e8aab-05c6-44ca-965a-02c98be35a83");
INSERT INTO O_NBATTR
	VALUES ("e5ba07c8-41a9-4482-a502-b346412c657d",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_BATTR
	VALUES ("e5ba07c8-41a9-4482-a502-b346412c657d",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ATTR
	VALUES ("e5ba07c8-41a9-4482-a502-b346412c657d",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"eb9b4c17-e37c-43fb-b03e-89a4e8cdd3ef",
	'Mult',
	'Full Name: Multiplicity
Description: Multiplicity of the component.  Indicates how many instances of the component may exist.
Data Domain: 0 = one, 1 = many
enum0: One
enum1: Many',
	'',
	'Mult',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("19557fcf-0d1e-470d-82a7-07785d070292",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_BATTR
	VALUES ("19557fcf-0d1e-470d-82a7-07785d070292",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ATTR
	VALUES ("19557fcf-0d1e-470d-82a7-07785d070292",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"e5ba07c8-41a9-4482-a502-b346412c657d",
	'ClassifierName',
	'Full Name: Classifier Name',
	'',
	'ClassifierName',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("99a66ce9-a2e0-47cd-8cfa-206ce39966c7",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	'result = self.getCachedName();
if(self.isAssigned())
  select one comp related by self->C_C[R4201];
  if(not Util::isProxy(element:comp.convertToInstance()))
    result = comp.getPath(path:"", includeSelf:true);
    if(self.ClassifierName != "")
      result = result + ":" + self.ClassifierName;
    end if;
  end if;
else
  result = "Unassigned Imported Component";
end if;
self.setCachedName(name:result);
self.Name = result;',
	1);
INSERT INTO O_BATTR
	VALUES ("99a66ce9-a2e0-47cd-8cfa-206ce39966c7",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ATTR
	VALUES ("99a66ce9-a2e0-47cd-8cfa-206ce39966c7",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"19557fcf-0d1e-470d-82a7-07785d070292",
	'Name',
	'User_Visible:false',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5bad266a-ae3b-4b7f-841d-a56c2e87f137",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_BATTR
	VALUES ("5bad266a-ae3b-4b7f-841d-a56c2e87f137",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ATTR
	VALUES ("5bad266a-ae3b-4b7f-841d-a56c2e87f137",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"99a66ce9-a2e0-47cd-8cfa-206ce39966c7",
	'Descrip',
	'Full Name: Imported Component Description
Description: A textual description of this imported component.',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("f1e98764-328b-424c-9f63-1aec01d70b20",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"ece1e288-5578-4f41-ab6d-8bbf8a4596c8",
	"05fa1d91-2479-4e4d-97fd-25a6c7afe5b8",
	"0e87d28d-a1e8-4326-80ba-f4f8c3a2a985",
	"6ad119f0-8afb-4237-94df-1ad7c1b2a21c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Packageable Element',
	'Element_ID',
	'R8001');
INSERT INTO R_RGO_PROXY
	VALUES ("f1e98764-328b-424c-9f63-1aec01d70b20",
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"ece1e288-5578-4f41-ab6d-8bbf8a4596c8",
	'../../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"05fa1d91-2479-4e4d-97fd-25a6c7afe5b8",
	'../../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RATTR
	VALUES ("0e87d28d-a1e8-4326-80ba-f4f8c3a2a985",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("0e87d28d-a1e8-4326-80ba-f4f8c3a2a985",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"00000000-0000-0000-0000-000000000000",
	'Id',
	'',
	'',
	'Id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("f1e98764-328b-424c-9f63-1aec01d70b20",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	0,
	"60a1905f-e390-4af7-8e38-ce84e413b25d",
	"03a4bb55-6d6a-4fa5-a745-1e80963dac66",
	"6dc78fd0-569b-4a30-87aa-442c7b728e4b",
	"7a677073-cf70-4409-895d-a23d29ff6044",
	"eeb54065-c4b9-4ac0-a16f-1f4314115038",
	"0d4be116-ba6e-4df5-bc01-5f8bef482e33",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Component',
	'Id',
	'R4201.''represents''');
INSERT INTO R_RGO_PROXY
	VALUES ("f1e98764-328b-424c-9f63-1aec01d70b20",
	"03a4bb55-6d6a-4fa5-a745-1e80963dac66",
	"6dc78fd0-569b-4a30-87aa-442c7b728e4b",
	'../Component Library.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("60a1905f-e390-4af7-8e38-ce84e413b25d",
	"635d3b9b-edc6-456d-888d-7375eef81516",
	0,
	"03a4bb55-6d6a-4fa5-a745-1e80963dac66",
	"7a677073-cf70-4409-895d-a23d29ff6044",
	'../Component Library.xtuml');
INSERT INTO O_RATTR
	VALUES ("eeb54065-c4b9-4ac0-a16f-1f4314115038",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_ATTR
	VALUES ("eeb54065-c4b9-4ac0-a16f-1f4314115038",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"0e87d28d-a1e8-4326-80ba-f4f8c3a2a985",
	'AssignedComp_Id',
	'',
	'AssignedComp_',
	'Id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("aadf4ce6-15ef-4a1c-b365-cd95efc153b1",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_BATTR
	VALUES ("aadf4ce6-15ef-4a1c-b365-cd95efc153b1",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ATTR
	VALUES ("aadf4ce6-15ef-4a1c-b365-cd95efc153b1",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"eeb54065-c4b9-4ac0-a16f-1f4314115038",
	'ParentComp_Id',
	'',
	'',
	'ParentComp_Id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("eb9b4c17-e37c-43fb-b03e-89a4e8cdd3ef",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_BATTR
	VALUES ("eb9b4c17-e37c-43fb-b03e-89a4e8cdd3ef",
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ATTR
	VALUES ("eb9b4c17-e37c-43fb-b03e-89a4e8cdd3ef",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	"aadf4ce6-15ef-4a1c-b365-cd95efc153b1",
	'Component_Package_ID',
	'',
	'',
	'Component_Package_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_OIDA
	VALUES ("0e87d28d-a1e8-4326-80ba-f4f8c3a2a985",
	"f1e98764-328b-424c-9f63-1aec01d70b20",
	0,
	'Id');
INSERT INTO O_ID
	VALUES (1,
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO O_ID
	VALUES (2,
	"f1e98764-328b-424c-9f63-1aec01d70b20");
INSERT INTO PE_PE
	VALUES ("f1e98764-328b-424c-9f63-1aec01d70b20",
	1,
	"e03e8363-19c3-465a-a0ee-6d35d800e63b",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("e03e8363-19c3-465a-a0ee-6d35d800e63b",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Component Library',
	'',
	4700,
	'../Component Library.xtuml');
