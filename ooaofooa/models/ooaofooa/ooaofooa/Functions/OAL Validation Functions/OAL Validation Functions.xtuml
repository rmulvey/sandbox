-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'OAL Validation Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("ad90345a-6c63-49b5-b81f-e041efaf9b19",
	112,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	4156,
	3123,
	0,
	0,
	0,
	'',
	'ooaofooa::ooaofooa::Functions::OAL Validation Functions');
INSERT INTO DIM_DIA
	VALUES ("ad90345a-6c63-49b5-b81f-e041efaf9b19",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("21d27358-6712-4266-82cc-1ac752905b31",
	"00000000-0000-0000-0000-000000000000",
	'Action_start',
	'ParserValidateFunction: TRUE',
	'if ( param.a2_type == OalConstants::FUNCTION_TYPE )
  select any func from instances of S_SYNC where (selected.Sync_ID == param.a1_ruleid_name);
  if ( not_empty func )
    select one act related by func->ACT_FNB[R695]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:func.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance fnb of ACT_FNB;
      act.Type = "function";
      relate fnb to func across R695;
      relate fnb to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::OPERATION_TYPE )
  select any tfr from instances of O_TFR where (selected.Tfr_ID == param.a1_ruleid_name);
  if ( not_empty tfr )
    select one act related by tfr->ACT_OPB[R696]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:tfr.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance opb of ACT_OPB;
      if ( tfr.Instance_Based == Scope::Class )
        act.Type = "class operation";
      else
        act.Type = "operation";
      end if;
      relate opb to act across R698;
      relate opb to tfr across R696;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::BRIDGE_TYPE )
  select any brg from instances of S_BRG where (selected.Brg_ID == param.a1_ruleid_name);
  if ( not_empty brg )
    select one act related by brg->ACT_BRB[R697]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:brg.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance brb of ACT_BRB;
      act.Type = "bridge";
      relate brb to brg across R697;
      relate brb to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::STATE_TYPE )
  select any sm_act from instances of SM_ACT where (selected.Act_ID == param.a1_ruleid_name);
  if ( not_empty sm_act )
    select one act related by sm_act->ACT_SAB[R691]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:sm_act.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance sab of ACT_SAB;
      select one asm related by sm_act->SM_SM[R515]->SM_ASM[R517];
      if ( empty asm )
        act.Type = "state";
      else
        act.Type = "class state";
      end if;
      relate sab to sm_act across R691;
      relate sab to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::TRANSITION_TYPE )
  select any sm_act from instances of SM_ACT where (selected.Act_ID == param.a1_ruleid_name);
  if ( not_empty sm_act )
    select one act related by sm_act->ACT_TAB[R688]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:sm_act.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance tab of ACT_TAB;
      select one asm related by sm_act->SM_SM[R515]->SM_ASM[R517];
      if ( empty asm )
        act.Type = "transition";
      else
        act.Type = "class transition";
      end if;
      relate tab to sm_act across R688;
      relate tab to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::MDA_TYPE )
  select any dbattr from instances of O_DBATTR where (selected.Attr_ID == param.a1_ruleid_name);
  if ( not_empty dbattr )
    select one act related by dbattr->ACT_DAB[R693]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:dbattr.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance dab of ACT_DAB;
      act.Type = "derived attribute";
      dab.AttributeWritten = false;
      relate dab to dbattr across R693;
      relate dab to act across R698;
    else
      // need to clear out current data
      select one dab related by act->ACT_DAB[R698];
      dab.AttributeWritten = false;
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::PROV_OPERATION_TYPE )
  select any provOp from instances of SPR_PO where
               selected.Id == param.a1_ruleid_name;
  if not_empty provOp
    select one act related by provOp->ACT_POB[R687]->ACT_ACT[R698];
    if ( empty act )
      create object instance act of ACT_ACT;
      create object instance pob of ACT_POB;
      act.Type = "interface operation";
      relate pob to provOp across R687;
      relate pob to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::PROV_SIGNAL_TYPE )
  select any provSig from instances of SPR_PS where
               selected.Id == param.a1_ruleid_name;
  if not_empty provSig
    select one act related by provSig->ACT_PSB[R686]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:provSig.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance psb of ACT_PSB;
      act.Type = "signal";
      relate psb to provSig across R686;
      relate psb to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::REQ_OPERATION_TYPE )
  select any reqOp from instances of SPR_RO where
               selected.Id == param.a1_ruleid_name;
  if not_empty reqOp
    select one act related by reqOp->ACT_ROB[R685]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:reqOp.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance rob of ACT_ROB;
      act.Type = "interface operation";
      relate rob to reqOp across R685;
      relate rob to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
elif ( param.a2_type == OalConstants::REQ_SIGNAL_TYPE )
  select any reqSig from instances of SPR_RS where
               selected.Id == param.a1_ruleid_name;
  if not_empty reqSig
    select one act related by reqSig->ACT_RSB[R684]->ACT_ACT[R698];
    isDisposed = false;
    if (not_empty act and (not Util::hasSameModelRoot(nrme1:reqSig.convertToInstance(), nrme2:act.convertToInstance() )))
       // If there are different model roots then we must dispose of the ACT_ACT and
       // create a new one because we will no longer be able to find the OAL instance
       // in the other model root.
       act.dispose();
       isDisposed = true;
	end if;
    if ( empty act or isDisposed )
      create object instance act of ACT_ACT;
      create object instance rsb of ACT_RSB;
      act.Type = "signal";
      relate rsb to reqSig across R684;
      relate rsb to act across R698;
    else
      // need to clear out current data
      act.clear_blocks();
    end if;
    act.ReturnFound = false;
    ::set_current_context(context: act.Action_ID );
    return act.Action_ID;
  end if;
end if;
return param.a1_ruleid_name;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("20b66a2c-1664-41d8-9527-9865378833f3",
	"21d27358-6712-4266-82cc-1ac752905b31",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b547a633-fc82-4d56-a201-c9602ff7df56",
	"21d27358-6712-4266-82cc-1ac752905b31",
	'a2_type',
	"bc9f5c28-0e7e-423e-b552-28d39937e63e",
	0,
	'',
	"20b66a2c-1664-41d8-9527-9865378833f3",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc9f5c28-0e7e-423e-b552-28d39937e63e",
	"00000000-0000-0000-0000-000000000000",
	'OalConstants',
	'Bridge:ALS',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("21d27358-6712-4266-82cc-1ac752905b31",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("78d70209-57c8-4149-8f02-edd8be1d021d",
	"00000000-0000-0000-0000-000000000000",
	'Block_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c23ae370-ee74-48ba-b015-118daced57b3",
	"78d70209-57c8-4149-8f02-edd8be1d021d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("79308373-d912-4604-b1f4-c457977e3bd2",
	"00000000-0000-0000-0000-000000000000",
	'Token',
	'Each node in the syntax tree has a token associated with it.
We define the type here so that we can pass this data to the 
verification functions, which then pass it on to error reporting 
function, if the verification fails.
Bridge:ALS',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO S_SPARM
	VALUES ("a4cba05b-8771-4a18-a2b2-3dec63105f44",
	"78d70209-57c8-4149-8f02-edd8be1d021d",
	'a2_isRoot',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"c23ae370-ee74-48ba-b015-118daced57b3",
	'');
INSERT INTO S_SPARM
	VALUES ("84db8ed4-83c7-46ef-81b2-37f8ece9b292",
	"78d70209-57c8-4149-8f02-edd8be1d021d",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a4cba05b-8771-4a18-a2b2-3dec63105f44",
	'');
INSERT INTO S_SPARM
	VALUES ("1b2900d9-ab7c-456a-ac22-68d7bd784ba7",
	"78d70209-57c8-4149-8f02-edd8be1d021d",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"84db8ed4-83c7-46ef-81b2-37f8ece9b292",
	'');
INSERT INTO S_SPARM
	VALUES ("87fafe73-5e9e-40c3-a679-7215ede42f6a",
	"78d70209-57c8-4149-8f02-edd8be1d021d",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1b2900d9-ab7c-456a-ac22-68d7bd784ba7",
	'');
INSERT INTO PE_PE
	VALUES ("78d70209-57c8-4149-8f02-edd8be1d021d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aec0252f-8968-4774-82cc-caeede82ffa2",
	"00000000-0000-0000-0000-000000000000",
	'Action_end',
	'ParserValidateFunction: TRUE',
	'// ::Action_end()
nonEmptyBody = ERR::tokenHasValues(token:param.a1_rule_token);
select any act from instances of ACT_ACT where
                                   selected.Action_ID == param.a3_rule_begin_id;
select any system from instances of S_SYS
                                where (selected.Sys_ID == GD::NULL_UNIQUE_ID());
if not_empty act and act.return_is_required() and not act.ReturnFound
  select one blk related by act->ACT_BLK[R650];
  if act.Type == "bridge" 
    reportError = true;
    select one brg related by act->ACT_BRB[R698]->S_BRG[R697];
    if(not nonEmptyBody)
      select any component from instances of C_C
                          where (selected.Id == brg.getContainingComponentId());
      isRealized = false;
      if(not_empty component)
        isRealized = component.isRealized;
        select any system from instances of S_SYS
                             where (selected.Sys_ID == component.getSystemId());
      end if;
      if(empty system)
        select one package related by brg->S_EE[R19]->PE_PE[R8001]
                                                                ->EP_PKG[R8000];
        select one system related by package->S_SYS[R1405];
      end if;
      if(not isRealized)
        select one ee related by brg->S_EE[R19];
        if(not_empty ee)
          isRealized = ee.isRealized;
        end if;
      end if;
      emptyNonRealizedCheck = PREF::getSystemBoolean(
            name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message", systemName:system.Name);
      emptyRealizedCheck = PREF::getSystemBoolean(
                    name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message_realized", systemName:system.Name);
      reportError = (not isRealized and emptyNonRealizedCheck)
                                         or (isRealized and emptyRealizedCheck);
    end if;
    if(reportError)
      ERR::reportParseError( msg: "Return value required by " + act.Type, token: param.a1_rule_token );
    end if;
  elif  act.Type == "interface operation"
    select one reqBody related by act->ACT_ROB[R698];
    select one proBody related by act->ACT_POB[R698];
    msgDirection = IFDirectionType::ClientServer;
    if not_empty reqBody // Required Operation
    	 select one reqOpr related by reqBody->SPR_RO[R685];
    	 select one reqExPro related by reqOpr->SPR_REP[R4502];
    	 select one exProp related by reqExPro->C_EP[R4500];
    	 select one intOpr related by exProp->C_IO[R4004];
    	 select any component from instances of C_C
    	              where (selected.Id == reqBody.getContainingComponentId());
    	 // If the port is delegated, then skip reporting "missing return statement" error
    	 select any delegated related by reqExPro->C_R[R4500]->C_IR[R4009]->C_RID[R4013]; 
    	 msgDirection = intOpr.Direction;
    	 if  ((empty delegated) and (msgDirection == IFDirectionType::ServerClient)) //From Provided
    	   reportError = true;
           if(not nonEmptyBody)
             isRealized = false;
             if(not_empty component)
               isRealized = component.isRealized;
               select any system from instances of S_SYS
                             where (selected.Sys_ID == component.getSystemId());
             end if;
             emptyNonRealizedCheck = PREF::getSystemBoolean(
                             name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message", systemName:system.Name);
             emptyRealizedCheck = PREF::getSystemBoolean(
                    name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message_realized", systemName:system.Name);
             reportError = (not isRealized and emptyNonRealizedCheck)
                                         or (isRealized and emptyRealizedCheck);
           end if;
           if(reportError)
  			 ERR::reportParseError( msg: "Return value required by " + act.Type,
                                                   token: param.a1_rule_token );
           end if;
    	 end if;       
    elif not_empty proBody // Provided Operation
    	 select one proOpr related by proBody->SPR_PO[R687];
    	 select one proExPro related by proOpr->SPR_PEP[R4503];
    	 select one exProp related by proExPro->C_EP[R4501];
    	 select one intOpr related by exProp->C_IO[R4004];
         select any component from instances of C_C
                      where (selected.Id == proBody.getContainingComponentId());
    	 // If the port is delegated, then skip reporting "missing return statement" error
    	 select any delegated related by proExPro->C_P[R4501]->C_IR[R4009]->C_RID[R4013];
    	 msgDirection = intOpr.Direction; 
    	 if ((empty delegated) and (msgDirection  == IFDirectionType::ClientServer)) // To Provided
    	   reportError = true;
           if(not nonEmptyBody)
             isRealized = false;
             if(not_empty component)
               isRealized = component.isRealized;
               select any system from instances of S_SYS
                             where (selected.Sys_ID == component.getSystemId());
             end if;
             emptyNonRealizedCheck = PREF::getSystemBoolean(
                             name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message", systemName:system.Name);
             emptyRealizedCheck = PREF::getSystemBoolean(
                    name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message_realized", systemName:system.Name);
             reportError = (not isRealized and emptyNonRealizedCheck)
                                         or (isRealized and emptyRealizedCheck);
           end if;
           if(reportError)
  			 ERR::reportParseError( msg: "Return value required by " + act.Type,
                                                   token: param.a1_rule_token );
           end if;

    	 end if;
    end if;
  else
    reportError = true;
    select any component from instances of C_C
                                    where (selected.Id == GD::NULL_UNIQUE_ID());
    select one function related by act->ACT_FNB[R698]->S_SYNC[R695];
    select one operation related by act->ACT_OPB[R698]->O_TFR[R696];
    if(not_empty operation)
      select any component from instances of C_C
                    where (selected.Id == operation.getContainingComponentId());
      if(empty component)
        select one package related by operation->O_OBJ[R115]
                                                  ->PE_PE[R8001]->EP_PKG[R8000];
        select one system related by package->S_SYS[R1405];
      end if;
    end if;
    if(not_empty function)
      select any component from instances of C_C
                    where (selected.Id == function.getContainingComponentId());
      if(empty component)
        select one package related by function->PE_PE[R8001]->EP_PKG[R8000];
        select one system related by package->S_SYS[R1405];
      end if;
    end if;
    if(not nonEmptyBody)
      isRealized = false;
      if(not_empty component)
        isRealized = component.isRealized;
        select any system from instances of S_SYS
                             where (selected.Sys_ID == component.getSystemId());
      end if;
      emptyNonRealizedCheck = PREF::getSystemBoolean(
                             name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message", systemName:system.Name);
      emptyRealizedCheck = PREF::getSystemBoolean(
                    name:"bridgepoint_prefs_enable_error_for_empty_synchronous_message_realized", systemName:system.Name);
      reportError = (not isRealized and emptyNonRealizedCheck)
                                         or (isRealized and emptyRealizedCheck);
    end if;
    if(reportError)
  	  ERR::reportParseError( msg: "Return value required by " + act.Type,
                                                   token: param.a1_rule_token );
    end if;
  end if;
end if;
select one dab related by act->ACT_DAB[R698];
if ( not empty dab )
  if ( not dab.AttributeWritten )
    select one mdattr related by dab->O_DBATTR[R693]->
                                                    O_BATTR[R107]->O_ATTR[R106];
    ERR::reportParseError( 
        msg: "You must assign a value to the derived attribute self." +
                                      mdattr.Name, token: param.a1_rule_token );
  end if;
end if;
return param.a4_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4fd390ff-379d-41d6-af0d-984ca7e04366",
	"aec0252f-8968-4774-82cc-caeede82ffa2",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9c2c79b7-8653-4b26-9895-23c531e6b562",
	"aec0252f-8968-4774-82cc-caeede82ffa2",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4fd390ff-379d-41d6-af0d-984ca7e04366",
	'');
INSERT INTO S_SPARM
	VALUES ("1e4a4cde-c10c-4376-b7d0-ff6651e2908a",
	"aec0252f-8968-4774-82cc-caeede82ffa2",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9c2c79b7-8653-4b26-9895-23c531e6b562",
	'');
INSERT INTO S_SPARM
	VALUES ("4d2399a7-ed68-4b95-9c77-911ed170c139",
	"aec0252f-8968-4774-82cc-caeede82ffa2",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1e4a4cde-c10c-4376-b7d0-ff6651e2908a",
	'');
INSERT INTO S_SPARM
	VALUES ("f35da69e-4ba1-45ac-a703-fed0d94c7c4e",
	"aec0252f-8968-4774-82cc-caeede82ffa2",
	'b1_block1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4d2399a7-ed68-4b95-9c77-911ed170c139",
	'');
INSERT INTO PE_PE
	VALUES ("aec0252f-8968-4774-82cc-caeede82ffa2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cf2a5fb7-7f61-4001-a6b2-9343e649292f",
	"00000000-0000-0000-0000-000000000000",
	'Block_start',
	'ParserValidateFunction: TRUE',
	'if ( param.a2_isRoot)
  select any act from instances of ACT_ACT where (selected.Action_ID == param.a1_ruleid_name);
  if ( not_empty act )
    create object instance blk of ACT_BLK;
    relate blk to act across R612;
    select one first_blk related by act->ACT_BLK[R650];
    if ( empty first_blk )
     // we expect this to be empty
      relate blk to act across R650;
    end if;
    relate blk to act across R699;
    return blk.Block_ID;
  end if;
else
  select any stmt from instances of ACT_SMT 
      where (selected.Statement_ID == param.a1_ruleid_name);
  if ( not_empty stmt )
    create object instance blk of ACT_BLK;
    select one whl related by stmt->ACT_WHL[R603];
    if ( not_empty whl )
      relate blk to whl across R608;
    else
      select one for_stmt related by stmt->ACT_FOR[R603];
      if ( not_empty for_stmt )
        relate blk to for_stmt across R605;
      else
        select one if_stmt related by stmt->ACT_IF[R603];
        if ( not_empty if_stmt )
          select one if_blk related by if_stmt->ACT_BLK[R607];
          if (not_empty if_blk)
            // the currently associated block is an elif or else and
            // it will be hooked to the correct parsed element in
            // if_statement_end (else) or in if_statement_loop3_end (elif).
            // just unrelate it here . . . . 
            unrelate if_stmt from if_blk across R607;
          end if;
          relate blk to if_stmt across R607;
        else
          // internal error
          return GD::NULL_UNIQUE_ID();
        end if;
      end if;
    end if;
    select one enclosing_blk related by stmt->ACT_BLK[R602];
    select one act related by enclosing_blk->ACT_ACT[R699];
    if empty act
      // internal error - enclosing block association is inconsistent with current scope
      return GD::NULL_UNIQUE_ID();
    else
      unrelate enclosing_blk from act across R699;
      relate blk to act across R699;
      relate blk to act across R612;
      return blk.Block_ID;
    end if;
  end if;
end if;
return param.a1_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ca904597-df4a-4fd8-9fa2-a49725b2d3e0",
	"cf2a5fb7-7f61-4001-a6b2-9343e649292f",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("cf737dc1-ddd7-4cd2-9138-6f1e1bff3eab",
	"cf2a5fb7-7f61-4001-a6b2-9343e649292f",
	'a2_isRoot',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"ca904597-df4a-4fd8-9fa2-a49725b2d3e0",
	'');
INSERT INTO PE_PE
	VALUES ("cf2a5fb7-7f61-4001-a6b2-9343e649292f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c5924dd1-e796-4679-a605-88848e60d062",
	"00000000-0000-0000-0000-000000000000",
	'Block_loop1_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("545c94f9-dee9-434a-bea4-c866df85e86c",
	"c5924dd1-e796-4679-a605-88848e60d062",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8b199c00-f623-4cfb-a68e-4468a147a423",
	"c5924dd1-e796-4679-a605-88848e60d062",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"545c94f9-dee9-434a-bea4-c866df85e86c",
	'');
INSERT INTO S_SPARM
	VALUES ("54bc2a2a-d5e6-4e03-b05c-6bb90b7dd42f",
	"c5924dd1-e796-4679-a605-88848e60d062",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8b199c00-f623-4cfb-a68e-4468a147a423",
	'');
INSERT INTO PE_PE
	VALUES ("c5924dd1-e796-4679-a605-88848e60d062",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("32280c09-f9a0-4137-b65c-c798969272cf",
	"00000000-0000-0000-0000-000000000000",
	'Statement_validate',
	'ParserValidateFunction: TRUE',
	'select any stmt from instances of ACT_SMT 
      where ( selected.Statement_ID == param.a6_current_rule_id );
if ( not_empty stmt )
  select one if_stmt related by stmt->ACT_IF[R603];
  select one elif_stmt related by stmt->ACT_E[R603];
  select one else_stmt related by stmt->ACT_EL[R603];
  // the if statement handles the numbering itself
  if ( empty if_stmt and empty elif_stmt and empty else_stmt )
    select one blk related by stmt->ACT_BLK[R602];
    stmt.LineNumber = blk.CurrentLine;
    stmt.StartPosition = blk.CurrentCol;
  end if;
end if;
return param.a6_current_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7427fe36-d36b-44e3-bcfe-debe0dbfd18c",
	"32280c09-f9a0-4137-b65c-c798969272cf",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c4f97fb4-49ff-4c4c-8bb7-060cbf20c12f",
	"32280c09-f9a0-4137-b65c-c798969272cf",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7427fe36-d36b-44e3-bcfe-debe0dbfd18c",
	'');
INSERT INTO S_SPARM
	VALUES ("e6aba774-64f9-4412-8c05-aaba85bd1d7c",
	"32280c09-f9a0-4137-b65c-c798969272cf",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c4f97fb4-49ff-4c4c-8bb7-060cbf20c12f",
	'');
INSERT INTO S_SPARM
	VALUES ("235444f5-06dd-4d79-8008-4ce2618240ab",
	"32280c09-f9a0-4137-b65c-c798969272cf",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e6aba774-64f9-4412-8c05-aaba85bd1d7c",
	'');
INSERT INTO S_SPARM
	VALUES ("333392dc-cd6c-4430-82bb-cd3268440351",
	"32280c09-f9a0-4137-b65c-c798969272cf",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"235444f5-06dd-4d79-8008-4ce2618240ab",
	'');
INSERT INTO PE_PE
	VALUES ("32280c09-f9a0-4137-b65c-c798969272cf",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	"00000000-0000-0000-0000-000000000000",
	'Block_loop1_end',
	'ParserValidateFunction: TRUE',
	'return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("29926c9c-2d94-4261-9355-2f8f04aaa74e",
	"dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("957be468-1269-4115-8cb7-c836818e331c",
	"dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"29926c9c-2d94-4261-9355-2f8f04aaa74e",
	'');
INSERT INTO S_SPARM
	VALUES ("8213ebe1-3dd8-4531-9544-85b536a9a034",
	"dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"957be468-1269-4115-8cb7-c836818e331c",
	'');
INSERT INTO S_SPARM
	VALUES ("8cb7dc29-9bcf-4478-bdbb-0b8256d26458",
	"dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8213ebe1-3dd8-4531-9544-85b536a9a034",
	'');
INSERT INTO S_SPARM
	VALUES ("d7f2eca9-9aa4-4d45-8b70-bbc535dea6e3",
	"dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	'b1_statement3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8cb7dc29-9bcf-4478-bdbb-0b8256d26458",
	'');
INSERT INTO PE_PE
	VALUES ("dd1a2c82-af45-451d-b56c-cdc5e2f70e34",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	"00000000-0000-0000-0000-000000000000",
	'Block_end',
	'ParserValidateFunction: TRUE',
	'
select any block from instances of ACT_BLK
    where ( selected.Block_ID == param.a3_rule_begin_id );

encl_block_id = ::get_enclosing_block( block_id: param.a3_rule_begin_id, rule_token: param.a1_rule_token );

select any enclosing_block from instances of ACT_BLK
        where ( selected.Block_ID == encl_block_id );

select one act related by block->ACT_ACT[R699];
if ( empty act )
   ERR::reportParseError( 
      msg: "Current block not marked as having current scope.",
      token: param.a1_rule_token );
end if;  

unrelate block from act across R699;

if ( not_empty enclosing_block )
  select one act2 related by block->ACT_ACT[R699];
  if ( not_empty act2 )
     ERR::reportParseError( 
        msg: "Non-current block marked as having current scope.",
        token: param.a1_rule_token );
  end if;  
  relate enclosing_block to act across R699;
end if;

return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6784ba49-fb73-4419-8443-8897a94f5b76",
	"32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("358a36fa-fdaa-4ccb-ad65-a9e6e4334e40",
	"32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6784ba49-fb73-4419-8443-8897a94f5b76",
	'');
INSERT INTO S_SPARM
	VALUES ("763ce051-6812-4f3b-b93e-40ab2d2af84f",
	"32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"358a36fa-fdaa-4ccb-ad65-a9e6e4334e40",
	'');
INSERT INTO S_SPARM
	VALUES ("6e13a21d-f9f9-417b-b8bf-0694bb6d62af",
	"32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"763ce051-6812-4f3b-b93e-40ab2d2af84f",
	'');
INSERT INTO S_SPARM
	VALUES ("1ebac9c6-bcc5-4b0f-a0e4-3c14eb20b01f",
	"32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	'b1_statement3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6e13a21d-f9f9-417b-b8bf-0694bb6d62af",
	'');
INSERT INTO PE_PE
	VALUES ("32b8ea8d-18e1-4423-b79d-d8e5c1a2d9be",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7c893f0b-0ae3-4688-9acd-4e6676ef2387",
	"00000000-0000-0000-0000-000000000000",
	'Assignment_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::statement_create();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("77a9f554-2d43-4a01-b86e-3637f0165044",
	"7c893f0b-0ae3-4688-9acd-4e6676ef2387",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7c893f0b-0ae3-4688-9acd-4e6676ef2387",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	"00000000-0000-0000-0000-000000000000",
	'Assignment_expr_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7dec476f-dd82-4bc1-9ac2-d4cc7d9540b6",
	"a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e70555a5-42f5-477b-ab3c-dc7e5b5a9890",
	"a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7dec476f-dd82-4bc1-9ac2-d4cc7d9540b6",
	'');
INSERT INTO S_SPARM
	VALUES ("911035a4-3d48-4bd6-89f0-b6e3ac066bbe",
	"a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e70555a5-42f5-477b-ab3c-dc7e5b5a9890",
	'');
INSERT INTO S_SPARM
	VALUES ("f8f6ca2c-c356-49e4-a2a7-209c963520b7",
	"a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"911035a4-3d48-4bd6-89f0-b6e3ac066bbe",
	'');
INSERT INTO S_SPARM
	VALUES ("914b5415-fa2e-456d-9373-25b967a6d0f3",
	"a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f8f6ca2c-c356-49e4-a2a7-209c963520b7",
	'');
INSERT INTO PE_PE
	VALUES ("a6b77719-53a6-4b9e-83fd-acf4597a4b36",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	"00000000-0000-0000-0000-000000000000",
	'Assignment_statement_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b1_assignment_expr1_id == GD::NULL_UNIQUE_ID() )
  select any stmt from instances of ACT_SMT 
      where ( selected.Statement_ID == param.a3_rule_begin_id );
  if ( not_empty stmt )
    stmt.dispose();
  end if;
end if;
return param.a3_rule_begin_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3e8aa36f-7c7a-4ac3-bff3-c2a86664639a",
	"f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a2c1b69f-2da5-477b-b923-84db1376d95e",
	"f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3e8aa36f-7c7a-4ac3-bff3-c2a86664639a",
	'');
INSERT INTO S_SPARM
	VALUES ("983e30ab-26e3-45c8-a07d-67ec5fdbe2ae",
	"f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a2c1b69f-2da5-477b-b923-84db1376d95e",
	'');
INSERT INTO S_SPARM
	VALUES ("abec491d-fe14-4a6a-a045-e0e15b848a3f",
	"f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"983e30ab-26e3-45c8-a07d-67ec5fdbe2ae",
	'');
INSERT INTO S_SPARM
	VALUES ("d4014768-b956-4773-a92e-951ad83d5a35",
	"f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	'b1_assignment_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"abec491d-fe14-4a6a-a045-e0e15b848a3f",
	'');
INSERT INTO PE_PE
	VALUES ("f0409b0d-cf10-4bb9-92fa-b100a5c27b39",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bd70c766-f0f6-491f-95cb-fde515c1cce1",
	"00000000-0000-0000-0000-000000000000",
	'Break_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b1365ee8-20d8-4a19-a5f6-fe9bde66e0eb",
	"bd70c766-f0f6-491f-95cb-fde515c1cce1",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bd70c766-f0f6-491f-95cb-fde515c1cce1",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f483975f-34ef-4101-96da-69b16ad12703",
	"00000000-0000-0000-0000-000000000000",
	'Break_statement_end',
	'ParserValidateFunction: TRUE',
	'
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one act related by blk->ACT_ACT[R612];
if ( not act.in_loop() )
  ERR::reportParseError( msg: "Break statement can only be used in WHILE and FOR EACH block",
       token: param.a1_rule_token );
else
  stmt_id =  ::statement_create();
  select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
  create object instance brk of ACT_BRK;
  relate brk to stmt across R603;

  return stmt.Statement_ID;
end if;

return GD::NULL_UNIQUE_ID();


',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d0fa3b74-a5d1-45b1-be1e-386f84eabdd5",
	"f483975f-34ef-4101-96da-69b16ad12703",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b906ef06-6f3e-4457-a834-8b680e741e7d",
	"f483975f-34ef-4101-96da-69b16ad12703",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d0fa3b74-a5d1-45b1-be1e-386f84eabdd5",
	'');
INSERT INTO S_SPARM
	VALUES ("b1c0c543-eff2-46b3-b4da-03fcf11051b7",
	"f483975f-34ef-4101-96da-69b16ad12703",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b906ef06-6f3e-4457-a834-8b680e741e7d",
	'');
INSERT INTO S_SPARM
	VALUES ("d5b8e33f-7fdd-4676-b1aa-0bd3c6c2688a",
	"f483975f-34ef-4101-96da-69b16ad12703",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b1c0c543-eff2-46b3-b4da-03fcf11051b7",
	'');
INSERT INTO PE_PE
	VALUES ("f483975f-34ef-4101-96da-69b16ad12703",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5fe0d4f9-4d2c-4aef-8d5d-1dffe7e4491f",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::statement_create();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f73c273d-3ffe-495c-9a89-727e14d1c72a",
	"5fe0d4f9-4d2c-4aef-8d5d-1dffe7e4491f",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5fe0d4f9-4d2c-4aef-8d5d-1dffe7e4491f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("99190ff6-69d4-4199-8d12-9f24d0ad0263",
	"00000000-0000-0000-0000-000000000000",
	'Local_variable_validate',
	'ParserValidateFunction: TRUE',
	'// ::Local_variable_validate()
::self_validate( a1_text: param.a3_text, a2_isLval: param.a2_isLval,
                                                a3_token: param.a1_rule_token );
::sender_validate( a1_name: param.a3_text, a2_isLval: param.a2_isLval,
                                                a3_token: param.a1_rule_token );
if (::selected_validate( name:param.a3_text, rule_token: param.a1_rule_token ))
  // selected is always an r-value
  current_scope = ::get_current_scope();
  select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
  blk.SelectedFound = true;
  create object instance val_inst of V_VAL;
  create object instance slr of V_SLR;
  relate slr to val_inst across R801;

    cur_sys_name = ::getSystemName();
    select any sys from instances of S_SYS where selected.Name == cur_sys_name;
    dt_id = GD::NULL_UNIQUE_ID();
    if not_empty sys
      dt_id = sys.getCoreTypeId(name:"inst_ref<Object>");
    end if;
    select any pe from instances of PE_PE where selected.Element_ID == dt_id;
    select one val_dt related by pe->S_DT[R8001]; 

  if ( not_empty val_dt )
    relate val_inst to val_dt across R820;
  else
    USER::logError(msg: "Internal Error in OAL Validation Function " +
      "Local_variable_validate().  Variable <val_dt> is empty.",path:"PathNotProvided");
  end if;
  relate val_inst to blk across R826;
  return val_inst.Value_ID;
end if;
var_id = ::get_var_in_scope( name: param.a3_text,
                                              rule_token: param.a1_rule_token );
if ( var_id == GD::NULL_UNIQUE_ID() and not param.a2_isLval )
   ::clear_value_data();
   ERR::reportParseError( msg:
           "Variable ->%s<- used in context where it must already exist.",
                                                   token: param.a1_rule_token );
end if;
if (param.a2_isLval)
  if ( var_id != GD::NULL_UNIQUE_ID() )
    select any var_inst from instances of V_VAR where selected.Var_ID == var_id;
    l = ::getLineNumber(rule_token: param.a1_rule_token);
    c = ::getColumn(rule_token: param.a1_rule_token);
    var_inst.addLocation(line: l, col: c );
  else
    current_scope = ::get_current_scope();
    if ( current_scope == GD::NULL_UNIQUE_ID() )
      ERR::reportParseError( msg:
              "Unable to determine context to define variable ->%s<-.  ",
                                                   token: param.a1_rule_token );
    else
      select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
      create object instance trn of V_TRN;
      create object instance var_inst of V_VAR;
      var_inst.Name = param.a3_text;
      l = ::getLineNumber(rule_token: param.a1_rule_token);
      c = ::getColumn(rule_token: param.a1_rule_token);
      var_inst.addLocation(line: l, col: c );
      relate trn to var_inst across R814;
      relate var_inst to block across R823;
      var_id = var_inst.Var_ID;
    end if;
  end if;
else // r-value
  select any var_inst from instances of V_VAR where selected.Var_ID == var_id;
  select one var_dt related by var_inst->S_DT[R848];
  if ( empty var_dt )
    select one inst related by var_inst->V_INT[R814];

    if ( not_empty inst )

        cur_sys_name = ::getSystemName();
        select any sys from instances of S_SYS where
                                                  selected.Name == cur_sys_name;
        dt_id = GD::NULL_UNIQUE_ID();
        if not_empty sys
          dt_id = sys.getCoreTypeId(name:"inst_ref<Object>");
        end if;
        select any pe from instances of PE_PE where selected.Element_ID == dt_id;
        select one var_dt related by pe->S_DT[R8001]; 
        if empty var_dt
          USER::logError(msg: "Internal Error in OAL Validation Function " +
            "Local_variable_validate().  Variable <var_dt> is empty.",path:"PathNotProvided");
        end if;

    else
      select one inst_set related by var_inst->V_INS[R814];
      if ( not_empty inst_set )

          cur_sys_name = ::getSystemName();
          select any sys from instances of S_SYS where
                                                  selected.Name == cur_sys_name;
          dt_id = GD::NULL_UNIQUE_ID();
          if not_empty sys
            dt_id = sys.getCoreTypeId(name:"inst_ref_set<Object>");
          end if;
          select any pe from instances of PE_PE where selected.Element_ID == dt_id;
          select one var_dt related by pe->S_DT[R8001]; 
          if empty var_dt
            USER::logError(msg: "Internal Error in OAL Validation Function " +
               "Local_variable_validate().  Variable <var_dt> (set) is empty.",path:"PathNotProvided");
          end if;

      else
        ERR::reportParseError( msg:
                "Variable ->%s<- has not been data typed yet.  ",
                                                   token: param.a1_rule_token );
      end if;
    end if;
  end if;
  if ( not_empty var_dt )
    create object instance val of V_VAL;
    current_scope = ::get_current_scope();
    select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
    relate val to blk across R826;
    /* TODO -
    orig code: if ( var_dt.Name == "inst_ref<Object>" )

    Does this need to prevent inst_ref<Timer> and inst_ref<Mapping>?
    */
    if ( ::has_substring(p1_base: var_dt.Name, p2_str: "inst_ref<", p3_fromIndex: 0) )
      create object instance t_val of V_IRF;
      relate val to t_val across R801;
      relate t_val to var_inst across R808;
    elif ( ::has_substring(p1_base: var_dt.Name, p2_str: "inst_ref_set<", p3_fromIndex: 0) )
      create object instance t_val of V_ISR;
      relate val to t_val across R801;
      relate t_val to var_inst across R809;
    else
      create object instance t_val of V_TVL;
      relate val to t_val across R801;
      relate t_val to var_inst across R805;
    end if;
    relate val to var_dt across R820;
    val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
    val.setEndPosition();
    return val.Value_ID;
  end if;
end if;
return var_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6fb4fdea-dad9-4b6a-92dd-a05dbe14ff6a",
	"99190ff6-69d4-4199-8d12-9f24d0ad0263",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("eb4ce146-3fc0-415c-a796-7f1e0d351129",
	"99190ff6-69d4-4199-8d12-9f24d0ad0263",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"6fb4fdea-dad9-4b6a-92dd-a05dbe14ff6a",
	'');
INSERT INTO S_SPARM
	VALUES ("f3ced084-be13-4a2c-bc8d-4ad65655a3ec",
	"99190ff6-69d4-4199-8d12-9f24d0ad0263",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eb4ce146-3fc0-415c-a796-7f1e0d351129",
	'');
INSERT INTO S_SPARM
	VALUES ("5bb48d92-81d0-4736-86c7-90b44c9a8c52",
	"99190ff6-69d4-4199-8d12-9f24d0ad0263",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f3ced084-be13-4a2c-bc8d-4ad65655a3ec",
	'');
INSERT INTO S_SPARM
	VALUES ("b8b0cd41-d958-4ba2-a537-8f9d8e64fd6f",
	"99190ff6-69d4-4199-8d12-9f24d0ad0263",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5bb48d92-81d0-4736-86c7-90b44c9a8c52",
	'');
INSERT INTO S_SPARM
	VALUES ("2123e806-18b6-4078-83e9-539cb932d02d",
	"99190ff6-69d4-4199-8d12-9f24d0ad0263",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b8b0cd41-d958-4ba2-a537-8f9d8e64fd6f",
	'');
INSERT INTO PE_PE
	VALUES ("99190ff6-69d4-4199-8d12-9f24d0ad0263",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	"00000000-0000-0000-0000-000000000000",
	'Param_data_access_validate',
	'ParserValidateFunction: TRUE',
	'// ::Param_data_access_validate()
return ::param_validate(a1_rule_token:param.a1_rule_token,
                   a3_text:param.a3_text, b1_value_id:param.a6_current_rule_id);',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e7b5f76d-d7e2-4b3f-891d-63ee706d3a69",
	"bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0ff4d827-a198-4bec-ae39-bb4b3ad80a02",
	"bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e7b5f76d-d7e2-4b3f-891d-63ee706d3a69",
	'');
INSERT INTO S_SPARM
	VALUES ("91eb9645-b74c-4dee-b12f-8ac0518d6b2c",
	"bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0ff4d827-a198-4bec-ae39-bb4b3ad80a02",
	'');
INSERT INTO S_SPARM
	VALUES ("1246fcc1-3eee-4910-bd81-a73cdca6989a",
	"bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"91eb9645-b74c-4dee-b12f-8ac0518d6b2c",
	'');
INSERT INTO S_SPARM
	VALUES ("0e3eefd7-3f33-4636-b9b5-5b27dd52c5d3",
	"bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1246fcc1-3eee-4910-bd81-a73cdca6989a",
	'');
INSERT INTO S_SPARM
	VALUES ("e2404c76-c397-4d2b-9fc8-9b06e55a97bc",
	"bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0e3eefd7-3f33-4636-b9b5-5b27dd52c5d3",
	'');
INSERT INTO PE_PE
	VALUES ("bab83f7d-29bf-45e3-9268-1cf27fb42aba",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e94cb172-702e-4b1b-9943-5719f0675d04",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_invocation_validate',
	'ParserValidateFunction: TRUE',
	'if ( param.a6_current_rule_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL where selected.Value_ID == param.a6_current_rule_id;
  if ( not_empty val )
    select one sdt related by val->S_DT[R820];
    if ( empty sdt )
      ERR::reportParseError( msg: "Value has unknown data type",
           token: param.a1_rule_token );
    else
      select one brg related by val->V_BRV[R801]->S_BRG[R828];
      if ( not_empty brg )
        return ::is_valid_invocation( a1_type: sdt.Name, a2_isRval: param.a2_isRval, a3_id: param.a6_current_rule_id,
            a4_name: "Bridge ->"  + brg.Name, a5_rule_token: param.a1_rule_token );
      end if;
    end if;
  end if;
end if;

return GD::NULL_UNIQUE_ID();












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1e0c17f0-5d3a-4d06-9d14-9030246fe6ca",
	"e94cb172-702e-4b1b-9943-5719f0675d04",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7474dd98-f809-48e6-a97d-35117dd9f37a",
	"e94cb172-702e-4b1b-9943-5719f0675d04",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"1e0c17f0-5d3a-4d06-9d14-9030246fe6ca",
	'');
INSERT INTO S_SPARM
	VALUES ("693c9832-5c3b-4876-ae1a-70d623468175",
	"e94cb172-702e-4b1b-9943-5719f0675d04",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7474dd98-f809-48e6-a97d-35117dd9f37a",
	'');
INSERT INTO S_SPARM
	VALUES ("8ea544cb-2dfc-4160-a415-9d2ef0da7735",
	"e94cb172-702e-4b1b-9943-5719f0675d04",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"693c9832-5c3b-4876-ae1a-70d623468175",
	'');
INSERT INTO S_SPARM
	VALUES ("8cbe281d-cc2f-4f57-8a79-8878ec1901e8",
	"e94cb172-702e-4b1b-9943-5719f0675d04",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8ea544cb-2dfc-4160-a415-9d2ef0da7735",
	'');
INSERT INTO S_SPARM
	VALUES ("8fd9ab8c-25a3-4959-9247-1769cdb36879",
	"e94cb172-702e-4b1b-9943-5719f0675d04",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8cbe281d-cc2f-4f57-8a79-8878ec1901e8",
	'');
INSERT INTO PE_PE
	VALUES ("e94cb172-702e-4b1b-9943-5719f0675d04",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_statement_end',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL
       where ( selected.Value_ID == param.b4_bridge_invocation4_id );
if ( empty val )
  select any val from instances of V_VAL 
         where ( selected.Value_ID == param.b5_bridge_invocation5_id );
end if;
if ( empty val )
  // there was a problem with parsing the value
  select any stmt from instances of ACT_SMT 
        where selected.Statement_ID == param.a3_rule_begin_id;
  stmt.dispose();
  return GD::NULL_UNIQUE_ID();
end if;
if (  param.b1_member1_id != GD::NULL_UNIQUE_ID() )
  return ::Assignment_expr_end( a1_rule_token: param.a1_rule_token, 
      a2_upper_rule_id: param.a3_rule_begin_id,
      a3_rule_begin_id: param.a3_rule_begin_id,
      a4_rule_id: param.a4_rule_id,
      b1_member_id: param.b1_member1_id,
      b2_expr2_id: param.b4_bridge_invocation4_id,
      b3_param_data_access3_id: GD::NULL_UNIQUE_ID(),
      b4_expr4_id: GD::NULL_UNIQUE_ID()
  );
elif (  param.b3_param_data_access3_id != GD::NULL_UNIQUE_ID() )
  // this creates a statement with an AssignToParameter subtype
  return ::Assignment_expr_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule_id: param.a3_rule_begin_id,
        a3_rule_begin_id: param.a3_rule_begin_id,
        a4_rule_id: param.a4_rule_id,
        b1_member_id: GD::NULL_UNIQUE_ID(),
        b2_expr2_id: GD::NULL_UNIQUE_ID(),
        b3_param_data_access3_id: param.b3_param_data_access3_id,
        b4_expr4_id: param.b4_bridge_invocation4_id
  );
else
  select any stmt from instances of ACT_SMT 
                          where selected.Statement_ID == param.a3_rule_begin_id;
  create object instance abrg of ACT_BRG;
  relate stmt to abrg across R603;
  select one brv related by val->V_BRV[R801];
  select one brg related by brv->S_BRG[R828];
  select many parm_set related by brv->V_PAR[R810];
  unrelate brg from brv across R828;
  relate brg to abrg across R674;
	// store the textual position of the bridge name
	abrg.bridgeNameLineNumber = val.LineNumber;
	abrg.bridgeNameColumn = val.StartPosition;
	// store the textual position of the external-entity key-letters; use the 
	// value that is in the bridge-value instance that was created 
	// when the bridge''''s named was parsed, rather than the value in the 
	// current block, since the latter may have been overwritten
	// during the parsing of the bridge''s parameters 
	abrg.externalEntityKeyLettersLineNumber =
	                                     brv.externalEntityKeyLettersLineNumber;
	abrg.externalEntityKeyLettersColumn = brv.externalEntityKeyLettersColumn;
  for each parm in parm_set
    unrelate parm from brv across R810;
    relate parm to abrg across R628;
  end for;
  val.dispose();
  return stmt.Statement_ID;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("70070b1d-a2f1-4fd9-a291-9db083fff09b",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("363a3714-e9d1-4769-8de1-76e440305192",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"70070b1d-a2f1-4fd9-a291-9db083fff09b",
	'');
INSERT INTO S_SPARM
	VALUES ("e1a47012-0ac6-4a9c-a83e-fd6185b7df65",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"363a3714-e9d1-4769-8de1-76e440305192",
	'');
INSERT INTO S_SPARM
	VALUES ("0580f9ee-f90f-4bf6-aeb4-52297a224cd9",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e1a47012-0ac6-4a9c-a83e-fd6185b7df65",
	'');
INSERT INTO S_SPARM
	VALUES ("51e84cb1-a393-4e23-b80d-d0dd5623799f",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'b1_member1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0580f9ee-f90f-4bf6-aeb4-52297a224cd9",
	'');
INSERT INTO S_SPARM
	VALUES ("4912ddf6-e6b9-4786-8efd-b7ff7a7313b1",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'b3_param_data_access3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"51e84cb1-a393-4e23-b80d-d0dd5623799f",
	'');
INSERT INTO S_SPARM
	VALUES ("9b1bfccb-73b0-41cd-8257-f6556bba66aa",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'b4_bridge_invocation4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4912ddf6-e6b9-4786-8efd-b7ff7a7313b1",
	'');
INSERT INTO S_SPARM
	VALUES ("65ac2ee9-3ee0-4c17-81c0-927b4e8cdd67",
	"bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	'b5_bridge_invocation5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9b1bfccb-73b0-41cd-8257-f6556bba66aa",
	'');
INSERT INTO PE_PE
	VALUES ("bf9ac957-bb50-4ea2-8d9e-cd9dc16e666e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f5b18ea5-225c-413c-ab93-3440ab38958e",
	"00000000-0000-0000-0000-000000000000",
	'Control_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("95224f1f-f733-45d0-a9d4-beabffc541ce",
	"f5b18ea5-225c-413c-ab93-3440ab38958e",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f5b18ea5-225c-413c-ab93-3440ab38958e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b67f9bc7-c85b-4a18-a4f4-f4a54c9a5cd9",
	"00000000-0000-0000-0000-000000000000",
	'Control_statement_end',
	'ParserValidateFunction: TRUE',
	'stmt_id = ::statement_create();
select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
if ( not_empty stmt )
  create object instance ctl of ACT_CTL;
  relate stmt to ctl across R603;

  return stmt_id;
end if;
return param.a4_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("87e52ede-2dad-4da1-9f8c-6da796d274c3",
	"b67f9bc7-c85b-4a18-a4f4-f4a54c9a5cd9",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("393b4f59-acdb-4158-ae09-cdf5c0e4cf8a",
	"b67f9bc7-c85b-4a18-a4f4-f4a54c9a5cd9",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"87e52ede-2dad-4da1-9f8c-6da796d274c3",
	'');
INSERT INTO S_SPARM
	VALUES ("78e4187b-95b0-41e7-b1aa-4ebd6faa1e86",
	"b67f9bc7-c85b-4a18-a4f4-f4a54c9a5cd9",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"393b4f59-acdb-4158-ae09-cdf5c0e4cf8a",
	'');
INSERT INTO S_SPARM
	VALUES ("f64a551a-e522-41f4-ba99-ecda0ed0d533",
	"b67f9bc7-c85b-4a18-a4f4-f4a54c9a5cd9",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"78e4187b-95b0-41e7-b1aa-4ebd6faa1e86",
	'');
INSERT INTO PE_PE
	VALUES ("b67f9bc7-c85b-4a18-a4f4-f4a54c9a5cd9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1744180c-82d2-4de9-8df0-606fd8925c75",
	"00000000-0000-0000-0000-000000000000",
	'Continue_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("727beff2-d15f-4d2e-a238-91932ebb155f",
	"1744180c-82d2-4de9-8df0-606fd8925c75",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("1744180c-82d2-4de9-8df0-606fd8925c75",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fcb8f950-0b2b-4b1f-91e6-78672cf5d2dc",
	"00000000-0000-0000-0000-000000000000",
	'Continue_statement_end',
	'ParserValidateFunction: TRUE',
	'
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one act related by blk->ACT_ACT[R612];
if ( not act.in_loop() )
  ERR::reportParseError( msg: "Continue statement can only be used in WHILE and FOR EACH block",
       token: param.a1_rule_token );
else
  stmt_id =  ::statement_create();
  select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
  create object instance con of ACT_CON;
  relate con to stmt across R603;

  return stmt.Statement_ID;
end if;

return GD::NULL_UNIQUE_ID();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8ee27cf6-0884-428e-9ced-82fa0bdcb5d0",
	"fcb8f950-0b2b-4b1f-91e6-78672cf5d2dc",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("89550e16-9bdc-499c-b513-a09110d95896",
	"fcb8f950-0b2b-4b1f-91e6-78672cf5d2dc",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8ee27cf6-0884-428e-9ced-82fa0bdcb5d0",
	'');
INSERT INTO S_SPARM
	VALUES ("e0f65ebc-155b-4755-91b4-07389a6c860e",
	"fcb8f950-0b2b-4b1f-91e6-78672cf5d2dc",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"89550e16-9bdc-499c-b513-a09110d95896",
	'');
INSERT INTO S_SPARM
	VALUES ("8e73770f-69db-4ab5-8609-96efb7e65bcf",
	"fcb8f950-0b2b-4b1f-91e6-78672cf5d2dc",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e0f65ebc-155b-4755-91b4-07389a6c860e",
	'');
INSERT INTO PE_PE
	VALUES ("fcb8f950-0b2b-4b1f-91e6-78672cf5d2dc",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9d25c71a-6b20-4599-afa7-dd33036f6dae",
	"00000000-0000-0000-0000-000000000000",
	'Create_event_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c679d412-5452-4171-8468-7ee6078b83d3",
	"9d25c71a-6b20-4599-afa7-dd33036f6dae",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9d25c71a-6b20-4599-afa7-dd33036f6dae",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b71e850a-6689-428c-b7d2-e695b701797d",
	"00000000-0000-0000-0000-000000000000",
	'Event_spec_validate',
	'ParserValidateFunction: TRUE',
	'// store the textual position of the event target''s key-letters
select any eventSpec from instances of E_ESS 
	where selected.Statement_ID == param.a6_current_rule_id;
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
eventSpec.eventTargetKeyLettersLineNumber = block.currentKeyLettersLineNumber;
eventSpec.eventTargetKeyLettersColumn = block.currentKeyLettersColumn;

return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ce9f72b6-d251-4495-b723-0e8277f1db05",
	"b71e850a-6689-428c-b7d2-e695b701797d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f9248d96-ce77-478a-b340-8ae2d683aa1a",
	"b71e850a-6689-428c-b7d2-e695b701797d",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ce9f72b6-d251-4495-b723-0e8277f1db05",
	'');
INSERT INTO S_SPARM
	VALUES ("d584a76e-74c2-4af2-970a-9b6e5b2779b0",
	"b71e850a-6689-428c-b7d2-e695b701797d",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f9248d96-ce77-478a-b340-8ae2d683aa1a",
	'');
INSERT INTO S_SPARM
	VALUES ("e3b35499-a3ce-4c52-b020-36aa0e5c25bb",
	"b71e850a-6689-428c-b7d2-e695b701797d",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d584a76e-74c2-4af2-970a-9b6e5b2779b0",
	'');
INSERT INTO S_SPARM
	VALUES ("919d8466-e58f-45a3-a1e9-2b194e16cd3f",
	"b71e850a-6689-428c-b7d2-e695b701797d",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e3b35499-a3ce-4c52-b020-36aa0e5c25bb",
	'');
INSERT INTO PE_PE
	VALUES ("b71e850a-6689-428c-b7d2-e695b701797d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	"00000000-0000-0000-0000-000000000000",
	'Create_event_statement_end',
	'ParserValidateFunction: TRUE',
	'select any gen_stmt from instances of ACT_SMT
      where ( selected.Statement_ID == param.b2_event_spec2_id );
select any var from instances of V_VAR where ( selected.Var_ID == param.b1_local_variable1_id );
if ( empty gen_stmt )
  select any ess from instances of ACT_SMT where ( selected.Statement_ID == param.a4_rule_id );
  if ( not_empty ess )
    ess.dispose();
   end if;
  if ( not_empty var )
    if ( not var.Declared )
      var.dispose();
    end if;
  end if;
  // the error has already been output
  return GD::NULL_UNIQUE_ID();
end if;

assign_ok = true;
err_msg = "";
if ( param.b1_local_variable1_id != GD::NULL_UNIQUE_ID() )
  if ( var.Declared )
    select one trn related by var->V_TRN[R814];
    if ( not_empty trn )
      select one dt related by var->S_DT[R848];
        if (dt.Name != "inst<Event>" )
          assign_ok = false;
          err_msg = "Variable ->"+ var.Name +"<- already exists as a different type";
        end if;
    else
      err_msg = "Variable ->"+ var.Name +"<- already exists as a different type";
      assign_ok = false;
    end if;
  end if;
end if;

if ( not assign_ok )
  gen_stmt.dispose();
  ::clear_value_data();
  ERR::reportParseError( msg: err_msg,
          token: param.a1_rule_token );
else
  // migrate the generate statement to a create statement
  select one ess related by gen_stmt->E_ESS[R603];
  select one ges related by ess->E_GES[R701];
  unrelate ges from ess across R701;
  create object instance ces of E_CES;
  relate ces to ess across R701;
  relate ces to var across R710;
  if ( not var.Declared )
    ces.is_implicit = true;

      cur_sys_name = ::getSystemName();
      select any sys from instances of S_SYS where selected.Name == cur_sys_name;
      dt_id = GD::NULL_UNIQUE_ID();
      if not_empty sys
        dt_id = sys.getCoreTypeId(name:"inst<Event>");
      end if;
      select any pe from instances of PE_PE where selected.Element_ID == dt_id;
      select one dt related by pe->S_DT[R8001]; 

    select one trn related by var->V_TRN[R814];
    if ( not_empty dt )
      relate var to dt across R848;
    else
      select one body related by var->ACT_BLK[R823]->ACT_ACT[R601];
      pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg: "Internal Error in OAL Validation Function " +
        "Create_event_statement_end().  Variable <dt> is empty.",path:pathMsg);
    end if;
    var.Declared = true;
  end if;

  select one gsme related by ges->E_GSME[R703];
  if ( not_empty gsme )
    create object instance csme of E_CSME;
    relate csme to ces across R702;
    select one evt related by gsme->SM_EVT[R707];
    relate csme to evt across R706;

    select one gen related by gsme->E_GEN[R705];
    if ( not_empty gen )
      create object instance cei of E_CEI;
      relate cei to csme across R704;
      select one dest related by gen->V_VAR[R712];
      relate dest to cei across R711;
    end if;

    select one gen_a related by gsme->E_GAR[R705];
    if ( not_empty gen_a )
      create object instance cea of E_CEA;
      relate cea to csme across R704;
    end if;

    select one gen_c related by gsme->E_GEC[R705];
    if ( not_empty gen_c )
      create object instance cec of E_CEC;
      relate cec to csme across R704;
    end if;
  else
    select one gee related by ges->E_GEE[R703];
    create object instance cee of E_CEE;
    relate cee to ces across R702;

    select one evt related by gee->S_EEEVT[R709];
    relate cee to evt across R708;
  end if;
  ges.dispose();
  return gen_stmt.Statement_ID;
end if;
return param.a4_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cd326eae-e502-48ea-b280-275f30d97aa1",
	"2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c171ef9f-3852-4f01-b906-4c3d617602b0",
	"2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cd326eae-e502-48ea-b280-275f30d97aa1",
	'');
INSERT INTO S_SPARM
	VALUES ("fc65fbc7-1710-4b4d-badd-66dd90c60101",
	"2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c171ef9f-3852-4f01-b906-4c3d617602b0",
	'');
INSERT INTO S_SPARM
	VALUES ("9e63f7f2-c723-4f9a-a79e-998580cf6ada",
	"2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fc65fbc7-1710-4b4d-badd-66dd90c60101",
	'');
INSERT INTO S_SPARM
	VALUES ("8e4b0e53-125c-4cc7-9c2d-c524499a82e9",
	"2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9e63f7f2-c723-4f9a-a79e-998580cf6ada",
	'');
INSERT INTO S_SPARM
	VALUES ("24b8df69-dd02-46ce-a01f-398b6a740b9f",
	"2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	'b2_event_spec2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8e4b0e53-125c-4cc7-9c2d-c524499a82e9",
	'');
INSERT INTO PE_PE
	VALUES ("2e953c40-3ff6-4eab-acf0-1e6c3d657fbc",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d060a26d-9e2c-4275-80b7-ecea3dc4dcf0",
	"00000000-0000-0000-0000-000000000000",
	'Create_object_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("634a41b5-8a2a-4a92-9948-2dd064affd2e",
	"d060a26d-9e2c-4275-80b7-ecea3dc4dcf0",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d060a26d-9e2c-4275-80b7-ecea3dc4dcf0",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	"00000000-0000-0000-0000-000000000000",
	'Object_keyletters_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  // store the textual position of the key letters
  block.currentKeyLettersLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentKeyLettersColumn = ::getColumn(rule_token: param.a1_rule_token);
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];

  // Check for Class keyletter match for token
  if not_empty component
    component.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::CLASS,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  else
    package.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::CLASS, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                    selected.Name == param.a3_text and 
                                   selected.Type == ElementTypeConstants::CLASS; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                     selected.Name == param.a3_text and 
                                   selected.Type == ElementTypeConstants::CLASS; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  if empty results
    ERR::reportParseError( 
        msg: "Cannot find specified class key letters ->%s<-.", 
                                                   token: param.a1_rule_token );
  elif cardinality results > 1
    ERR::reportParseError( msg:
    "More than one class with key letters ->%s<- You will need to eventually clear this up",
          token: param.a1_rule_token );
  else
    result = GD::NULL_UNIQUE_ID();
    for each clazz in results
      // will iterate only once
      result = clazz.Element_ID;
    end for;
    return result;
  end if;
  return param.a6_current_rule_id;
else
  // store the textual position of the key letters
  block.currentKeyLettersLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentKeyLettersColumn = ::getColumn(rule_token: param.a1_rule_token);
  select many classes from instances of O_OBJ where
                                             selected.Key_Lett == param.a3_text;
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];
    ERR::reportParseError( 
        msg: "Cannot find specified class key letters ->%s<-.", 
        token: param.a1_rule_token );

  return param.a6_current_rule_id;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("70d3685a-241b-4502-98d5-622d9f0dc271",
	"4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4d092f0e-2b51-4175-9751-0ee17cfcae51",
	"4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"70d3685a-241b-4502-98d5-622d9f0dc271",
	'');
INSERT INTO S_SPARM
	VALUES ("e3ef45c1-4438-4752-b2c5-2473ebe3d3d1",
	"4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4d092f0e-2b51-4175-9751-0ee17cfcae51",
	'');
INSERT INTO S_SPARM
	VALUES ("8725d515-eb80-4868-ac79-e4d20a804675",
	"4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e3ef45c1-4438-4752-b2c5-2473ebe3d3d1",
	'');
INSERT INTO S_SPARM
	VALUES ("cd44e7a9-705c-43b1-b2cf-c5326feb5516",
	"4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8725d515-eb80-4868-ac79-e4d20a804675",
	'');
INSERT INTO PE_PE
	VALUES ("4bafa651-b3c8-4990-ac3f-6855b9583f3d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("32847134-1dbe-43bb-8bae-04bdbb355579",
	"00000000-0000-0000-0000-000000000000",
	'Create_object_statement_end',
	'ParserValidateFunction: TRUE',
	'select any obj from instances of O_OBJ where ( selected.Obj_ID == param.b2_object_keyletters2_id );
if empty obj
  select any objPE from instances of PE_PE where
                          selected.Element_ID == param.b2_object_keyletters2_id;
  select one obj related by objPE->O_OBJ[R8001];
end if;
select any var from instances of V_VAR where ( selected.Var_ID == param.b1_local_variable1_id );

assign_ok = true;
err_msg = "";
if ( param.b1_local_variable1_id != GD::NULL_UNIQUE_ID() )
  if ( var.Declared )
    select one int_var related by var->V_INT[R814];
    if ( not_empty int_var )
      select one l_obj related by int_var->O_OBJ[R818];
        if ( l_obj.Obj_ID != obj.Obj_ID)
          assign_ok = false;
          err_msg = "Variable ->"+ var.Name +"<- already exists as a different type";
        end if;
    else
      err_msg = "Variable ->"+ var.Name +"<- does not exist in scope as an object instance variable";
      assign_ok = false;
    end if;
  end if;
end if;

if ( not assign_ok )
  ::clear_value_data();
  ERR::reportParseError( msg: err_msg,
          token: param.a1_rule_token );
else
  stmt_id =  ::statement_create();
  select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;

  if ( param.b1_local_variable1_id != GD::NULL_UNIQUE_ID() )
    create object instance cr of ACT_CR;
    relate cr to stmt across R603;
    relate cr to obj across R671;
    if ( not var.Declared )
      var.migrate_to_int();
      select one inst_ref related by var->V_INT[R814];
      relate inst_ref to obj across R818;
      cr.is_implicit = true;
      var.Declared = true;
      ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var.Var_ID, p3_obj_id:obj.Obj_ID);
    end if;
    relate cr to var across R633;

    // store the textual position of the class key-letters
	current_scope = ::get_current_scope();
	select any block from instances of ACT_BLK
		where (selected.Block_ID == current_scope);
    cr.modelClassKeyLettersLineNumber = block.currentKeyLettersLineNumber;
    cr.modelClassKeyLettersColumn = block.currentKeyLettersColumn;
  else
    create object instance cnv of ACT_CNV;
    relate cnv to stmt across R603;
    relate cnv to obj across R672;

    // store the textual position of the class key-letters
	current_scope = ::get_current_scope();
	select any block from instances of ACT_BLK
		where (selected.Block_ID == current_scope);
    cnv.modelClassKeyLettersLineNumber = block.currentKeyLettersLineNumber;
    cnv.modelClassKeyLettersColumn = block.currentKeyLettersColumn;
  end if;
  return stmt.Statement_ID;
end if;
return param.a3_rule_begin_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d96ccbdb-c822-4568-a293-2954a46f82f7",
	"32847134-1dbe-43bb-8bae-04bdbb355579",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d251e2cf-e12e-4c5c-9e0d-78ca24bf97f8",
	"32847134-1dbe-43bb-8bae-04bdbb355579",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d96ccbdb-c822-4568-a293-2954a46f82f7",
	'');
INSERT INTO S_SPARM
	VALUES ("364cd078-584d-4457-91c2-2cb815c40a76",
	"32847134-1dbe-43bb-8bae-04bdbb355579",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d251e2cf-e12e-4c5c-9e0d-78ca24bf97f8",
	'');
INSERT INTO S_SPARM
	VALUES ("8ebd560e-4a70-44f4-a1a6-685d03570225",
	"32847134-1dbe-43bb-8bae-04bdbb355579",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"364cd078-584d-4457-91c2-2cb815c40a76",
	'');
INSERT INTO S_SPARM
	VALUES ("c4fd77fd-a8d4-407b-8895-15d0a5907df2",
	"32847134-1dbe-43bb-8bae-04bdbb355579",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8ebd560e-4a70-44f4-a1a6-685d03570225",
	'');
INSERT INTO S_SPARM
	VALUES ("cad17ae8-616c-443e-b9ec-8d3738e81c76",
	"32847134-1dbe-43bb-8bae-04bdbb355579",
	'b2_object_keyletters2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c4fd77fd-a8d4-407b-8895-15d0a5907df2",
	'');
INSERT INTO PE_PE
	VALUES ("32847134-1dbe-43bb-8bae-04bdbb355579",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("23c1d860-9b19-42ab-8546-57eaf5d53ed2",
	"00000000-0000-0000-0000-000000000000",
	'Debug_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c560dadc-fb43-4f71-9cb4-ad95aa76bd70",
	"23c1d860-9b19-42ab-8546-57eaf5d53ed2",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("23c1d860-9b19-42ab-8546-57eaf5d53ed2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("31fb84a1-4456-4d52-b170-94c040f640e4",
	"00000000-0000-0000-0000-000000000000",
	'Debug_statement_loop2_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bd4f8dc4-7f5a-45b8-9db4-bed1b51799ff",
	"31fb84a1-4456-4d52-b170-94c040f640e4",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3118309f-f021-4edd-a4c1-46e6fd28b7ad",
	"31fb84a1-4456-4d52-b170-94c040f640e4",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bd4f8dc4-7f5a-45b8-9db4-bed1b51799ff",
	'');
INSERT INTO S_SPARM
	VALUES ("4bc6e663-eaec-4af6-b0cc-c20536586291",
	"31fb84a1-4456-4d52-b170-94c040f640e4",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3118309f-f021-4edd-a4c1-46e6fd28b7ad",
	'');
INSERT INTO PE_PE
	VALUES ("31fb84a1-4456-4d52-b170-94c040f640e4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("98b4a879-911e-40a0-9f6e-0bd5118611f4",
	"00000000-0000-0000-0000-000000000000",
	'Debug_operand_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cdb740b3-1dd5-47e7-ae25-cfa79f96fde0",
	"98b4a879-911e-40a0-9f6e-0bd5118611f4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8f098bf9-23d0-45e9-9597-82fcb471f88e",
	"98b4a879-911e-40a0-9f6e-0bd5118611f4",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cdb740b3-1dd5-47e7-ae25-cfa79f96fde0",
	'');
INSERT INTO S_SPARM
	VALUES ("b0e9a4e8-627f-46ad-ae9a-611187bf112c",
	"98b4a879-911e-40a0-9f6e-0bd5118611f4",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8f098bf9-23d0-45e9-9597-82fcb471f88e",
	'');
INSERT INTO S_SPARM
	VALUES ("226162e2-6b5b-44e0-b871-20d554ad64d9",
	"98b4a879-911e-40a0-9f6e-0bd5118611f4",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b0e9a4e8-627f-46ad-ae9a-611187bf112c",
	'');
INSERT INTO S_SPARM
	VALUES ("1128b70d-f88b-4aaa-9ff0-c6e0ee959ddc",
	"98b4a879-911e-40a0-9f6e-0bd5118611f4",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"226162e2-6b5b-44e0-b871-20d554ad64d9",
	'');
INSERT INTO PE_PE
	VALUES ("98b4a879-911e-40a0-9f6e-0bd5118611f4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	"00000000-0000-0000-0000-000000000000",
	'Debug_statement_loop2_end',
	'ParserValidateFunction: TRUE',
	'return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f593f51d-5e56-414e-ad7a-690bd6f9b6dd",
	"a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b46af6c1-b49e-4296-b2ad-963c5efb41cb",
	"a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f593f51d-5e56-414e-ad7a-690bd6f9b6dd",
	'');
INSERT INTO S_SPARM
	VALUES ("c01a84e3-5108-46a9-9046-071634cf5c16",
	"a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b46af6c1-b49e-4296-b2ad-963c5efb41cb",
	'');
INSERT INTO S_SPARM
	VALUES ("922495f9-9c4a-4511-9542-d86f7dc1b0a8",
	"a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c01a84e3-5108-46a9-9046-071634cf5c16",
	'');
INSERT INTO S_SPARM
	VALUES ("33a6a87d-648b-4014-8da7-32d0201ead5f",
	"a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	'b1_debug_operand1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"922495f9-9c4a-4511-9542-d86f7dc1b0a8",
	'');
INSERT INTO PE_PE
	VALUES ("a6b77bb8-4b0b-4b25-95c2-4dcc563174f7",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2974c05d-7081-413c-93dd-0557169416a4",
	"00000000-0000-0000-0000-000000000000",
	'Debug_statement_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("18b6b0a7-aaee-4805-acb7-c981bd8edae3",
	"2974c05d-7081-413c-93dd-0557169416a4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6901f812-97d2-48b0-9798-3663fabcb597",
	"2974c05d-7081-413c-93dd-0557169416a4",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"18b6b0a7-aaee-4805-acb7-c981bd8edae3",
	'');
INSERT INTO S_SPARM
	VALUES ("3ac62b6b-ba66-4cbe-8d67-0caa43680cdc",
	"2974c05d-7081-413c-93dd-0557169416a4",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6901f812-97d2-48b0-9798-3663fabcb597",
	'');
INSERT INTO S_SPARM
	VALUES ("2ecf2832-b6bb-4872-8a67-2817950dc1b5",
	"2974c05d-7081-413c-93dd-0557169416a4",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3ac62b6b-ba66-4cbe-8d67-0caa43680cdc",
	'');
INSERT INTO S_SPARM
	VALUES ("22062efb-46df-471d-8cb7-314eb022ee0a",
	"2974c05d-7081-413c-93dd-0557169416a4",
	'b1_debug_operand1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2ecf2832-b6bb-4872-8a67-2817950dc1b5",
	'');
INSERT INTO PE_PE
	VALUES ("2974c05d-7081-413c-93dd-0557169416a4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("27cdd59c-bf28-4795-8438-d42a67443ddc",
	"00000000-0000-0000-0000-000000000000",
	'Delete_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("31524c54-5114-468e-a0c6-167934f9e4df",
	"27cdd59c-bf28-4795-8438-d42a67443ddc",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("27cdd59c-bf28-4795-8438-d42a67443ddc",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c00e42d1-61ac-440b-b616-6b5ca25769a9",
	"00000000-0000-0000-0000-000000000000",
	'Inst_ref_var_validate',
	'ParserValidateFunction: TRUE',
	'::self_validate( a1_text: param.a3_text, a2_isLval: false, a3_token: param.a1_rule_token );

var_id = ::get_var_in_scope( name: param.a3_text, rule_token: param.a1_rule_token );

// the inst_ref_var rule is always an r-value
if ( var_id == GD::NULL_UNIQUE_ID()  )
   ::clear_value_data();
   ERR::reportParseError( msg: "Variable ->%s<- used in context where it must already exist",
      token: param.a1_rule_token );
else
  select any var from instances of V_VAR where ( selected.Var_ID == var_id );
  var.addLocation(line: ::getLineNumber(rule_token: param.a1_rule_token), 
        col: ::getColumn(rule_token: param.a1_rule_token) );
  return var_id;
end if;

return param.a6_current_rule_id;






















































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("eb2c4a0d-60d9-43fd-8c1a-c837df461666",
	"c00e42d1-61ac-440b-b616-6b5ca25769a9",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8c7c5845-0a58-4b79-9790-d9601814bac9",
	"c00e42d1-61ac-440b-b616-6b5ca25769a9",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eb2c4a0d-60d9-43fd-8c1a-c837df461666",
	'');
INSERT INTO S_SPARM
	VALUES ("e759d1ea-f41d-4304-8095-a61840f53b54",
	"c00e42d1-61ac-440b-b616-6b5ca25769a9",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8c7c5845-0a58-4b79-9790-d9601814bac9",
	'');
INSERT INTO S_SPARM
	VALUES ("649cc63e-e4a1-4d5b-b165-827e08ab6319",
	"c00e42d1-61ac-440b-b616-6b5ca25769a9",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e759d1ea-f41d-4304-8095-a61840f53b54",
	'');
INSERT INTO S_SPARM
	VALUES ("94732867-3f51-4de3-af1a-b2bda22cd067",
	"c00e42d1-61ac-440b-b616-6b5ca25769a9",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"649cc63e-e4a1-4d5b-b165-827e08ab6319",
	'');
INSERT INTO PE_PE
	VALUES ("c00e42d1-61ac-440b-b616-6b5ca25769a9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("480a5e91-857c-4fc7-bb8a-faad00c91655",
	"00000000-0000-0000-0000-000000000000",
	'Delete_statement_end',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
if ( not_empty blk )
  select any var from instances of V_VAR where (selected.Var_ID == param.b1_inst_ref_var1_id );
  if ( not_empty var )
    select one inst_ref related by var->V_INT[R814];
    if ( empty inst_ref )
      ERR::reportParseError( msg: "Variable ->" + var.Name + "<- does not exist in scope as an object instance variable",
          token: param.a1_rule_token );
    else
      stmt_id =  ::statement_create();
      select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
      create object instance del of ACT_DEL;
      relate stmt to del across R603;
      relate del to var across R634;
      return stmt.Statement_ID;
    end if;
  end if;
end if;
return param.a4_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5b1ee46d-c735-4624-bf0a-07546c92f21c",
	"480a5e91-857c-4fc7-bb8a-faad00c91655",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a49f116c-09ab-404b-ac55-f6f5829f158c",
	"480a5e91-857c-4fc7-bb8a-faad00c91655",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5b1ee46d-c735-4624-bf0a-07546c92f21c",
	'');
INSERT INTO S_SPARM
	VALUES ("d90c8120-63f0-4729-892d-559a04763ed0",
	"480a5e91-857c-4fc7-bb8a-faad00c91655",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a49f116c-09ab-404b-ac55-f6f5829f158c",
	'');
INSERT INTO S_SPARM
	VALUES ("41fbd66e-5c7e-45a3-aebe-e136428c7389",
	"480a5e91-857c-4fc7-bb8a-faad00c91655",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d90c8120-63f0-4729-892d-559a04763ed0",
	'');
INSERT INTO S_SPARM
	VALUES ("b99025f2-cd1b-4e1c-a759-ab7a0018370c",
	"480a5e91-857c-4fc7-bb8a-faad00c91655",
	'b1_inst_ref_var1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"41fbd66e-5c7e-45a3-aebe-e136428c7389",
	'');
INSERT INTO PE_PE
	VALUES ("480a5e91-857c-4fc7-bb8a-faad00c91655",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("73170a37-f91b-4959-b83a-79c12f6c67e9",
	"00000000-0000-0000-0000-000000000000",
	'Empty_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e56f5612-5085-4694-8388-19d7781cdd8e",
	"73170a37-f91b-4959-b83a-79c12f6c67e9",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("73170a37-f91b-4959-b83a-79c12f6c67e9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c238fe43-2ec9-4710-8800-c3b95574873d",
	"00000000-0000-0000-0000-000000000000",
	'Empty_statement_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5fb4c8cf-61ab-4b83-bffd-36beee255774",
	"c238fe43-2ec9-4710-8800-c3b95574873d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("800dd0e9-862f-4900-be36-c9b4bc052bc4",
	"c238fe43-2ec9-4710-8800-c3b95574873d",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5fb4c8cf-61ab-4b83-bffd-36beee255774",
	'');
INSERT INTO S_SPARM
	VALUES ("bd78645d-f5ac-4db8-a3e8-ff4a1daefeec",
	"c238fe43-2ec9-4710-8800-c3b95574873d",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"800dd0e9-862f-4900-be36-c9b4bc052bc4",
	'');
INSERT INTO S_SPARM
	VALUES ("2ea3d524-ed60-4b35-9871-a03d6ff6a08f",
	"c238fe43-2ec9-4710-8800-c3b95574873d",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bd78645d-f5ac-4db8-a3e8-ff4a1daefeec",
	'');
INSERT INTO PE_PE
	VALUES ("c238fe43-2ec9-4710-8800-c3b95574873d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2e00c651-3b37-4acd-840e-c4ed9e52b73e",
	"00000000-0000-0000-0000-000000000000",
	'For_statement_start',
	'ParserValidateFunction: TRUE',
	'	
stmt_id =  ::statement_create();
select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;

create object instance f of ACT_FOR;
relate f to stmt across R603;

select one act related by stmt->ACT_BLK[R602]->ACT_ACT[R612];
act.entered_loop();

return stmt.Statement_ID;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ef7ef4d7-e9aa-437f-81f3-4650f29ba9fc",
	"2e00c651-3b37-4acd-840e-c4ed9e52b73e",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2e00c651-3b37-4acd-840e-c4ed9e52b73e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea1064a3-60be-4e3d-a06c-4322323aabb0",
	"00000000-0000-0000-0000-000000000000",
	'Inst_ref_set_var_validate',
	'ParserValidateFunction: TRUE',
	'
// inst_ref_set_var is always an r-value

var_id = ::get_var_in_scope( name: param.a3_text, rule_token: param.a1_rule_token );

// the inst_ref_set_var rule is always an r-value
if ( var_id == GD::NULL_UNIQUE_ID()  )
   ::clear_value_data();
   ERR::reportParseError( msg: "Variable ->%s<- used in context where it must already exist",
      token: param.a1_rule_token );
else
  select any iter from instances of V_VAR where ( selected.Var_ID == param.a6_current_rule_id );
  if ( not_empty iter  )
    if( not iter.Declared )
      select any iter_set from instances of V_VAR where ( selected.Var_ID == var_id );
      select one iter_set_obj related by iter_set->V_INS[R814]->O_OBJ[R819];
      if ( not_empty iter_set_obj )
        iter.migrate_to_int();
        select one inst_ref related by iter->V_INT[R814];
        relate inst_ref to iter_set_obj across R818;
        iter.Declared = true;
        inst_ref.IsImplicitInFor = true;
        ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:iter.Var_ID,
                                                 p3_obj_id:iter_set_obj.Obj_ID);
      end if;
    else
        select one inst_ref related by iter->V_INT[R814];
        if ( not_empty inst_ref )
          inst_ref.IsImplicitInFor = false;
        end if;
    end if;
  end if;
  select any var from instances of V_VAR where ( selected.Var_ID == var_id );
  var.addLocation(line: ::getLineNumber(rule_token: param.a1_rule_token),
        col: ::getColumn(rule_token: param.a1_rule_token) );
  return var_id;
end if;

return param.a6_current_rule_id;












































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c3b70b8c-ca22-4aaa-b519-580c179fa09d",
	"ea1064a3-60be-4e3d-a06c-4322323aabb0",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c0ed3829-8ab8-4d10-b0a7-449dffab6041",
	"ea1064a3-60be-4e3d-a06c-4322323aabb0",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c3b70b8c-ca22-4aaa-b519-580c179fa09d",
	'');
INSERT INTO S_SPARM
	VALUES ("e413ae47-3441-43b0-895d-653d7215c837",
	"ea1064a3-60be-4e3d-a06c-4322323aabb0",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c0ed3829-8ab8-4d10-b0a7-449dffab6041",
	'');
INSERT INTO S_SPARM
	VALUES ("e2d574db-43c7-4280-bd5d-225db565d5c3",
	"ea1064a3-60be-4e3d-a06c-4322323aabb0",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e413ae47-3441-43b0-895d-653d7215c837",
	'');
INSERT INTO S_SPARM
	VALUES ("84237df4-b2a4-4082-89b7-dc3218c301c0",
	"ea1064a3-60be-4e3d-a06c-4322323aabb0",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e2d574db-43c7-4280-bd5d-225db565d5c3",
	'');
INSERT INTO PE_PE
	VALUES ("ea1064a3-60be-4e3d-a06c-4322323aabb0",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	"00000000-0000-0000-0000-000000000000",
	'For_statement_end',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one act related by blk->ACT_ACT[R612];
act.exitted_loop();

select any fstmt from instances of ACT_FOR
          where ( selected.Statement_ID == param.a3_rule_begin_id );
if ( empty fstmt )
  ::clear_for_data( a1_iter: param.b1_local_variable1_id, a2_block: param.b3_block3_id, a3_stmt_id: param.a3_rule_begin_id );
  ::clear_value_data();
  ERR::reportParseError( msg: "For statement not found.",
        token: param.a1_rule_token );
else
  select one stmt related by fstmt->ACT_SMT[R603];
  select any iter from instances of V_VAR where ( selected.Var_ID == param.b1_local_variable1_id );
  if ( empty iter  )
    ::clear_for_data( a1_iter: param.b1_local_variable1_id, a2_block: param.b3_block3_id, a3_stmt_id: param.a3_rule_begin_id );
    ::clear_value_data();
    ERR::reportParseError( msg: "For iter var not found.",
        token: param.a1_rule_token );
  else
    select any iter_set from instances of V_VAR
        where ( selected.Var_ID == param.b2_inst_ref_set_var2_id );
    select one iter_set_obj related by iter_set->V_INS[R814]->O_OBJ[R819];
    if ( empty iter_set_obj )
      ::clear_for_data( a1_iter: param.b1_local_variable1_id, a2_block: param.b3_block3_id, a3_stmt_id: param.a3_rule_begin_id );
      ::clear_value_data();
      ERR::reportParseError( msg: "Variable ->"+ iter_set.Name +"<- does not exist in scope as an object instance set variable",
          token: param.a1_rule_token );
    elif ( iter.Declared )
      select one v_int related by iter->V_INT[R814];
      if ( empty v_int )
        ::clear_for_data( a1_iter: param.b1_local_variable1_id,  a2_block: param.b3_block3_id, a3_stmt_id: param.a3_rule_begin_id );
        ::clear_value_data();
        ERR::reportParseError( msg: "Variable ->"+ iter.Name +"<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
      else
        select one iter_obj related by v_int->O_OBJ[R818];
        if ( iter_obj.Obj_ID != iter_set_obj.Obj_ID )
          ::clear_for_data( a1_iter: param.b1_local_variable1_id,  a2_block: param.b3_block3_id, a3_stmt_id: param.a3_rule_begin_id );
          ::clear_value_data();
          ERR::reportParseError( msg: "Variable ->"+ iter.Name +"<- already exists as a different type",
              token: param.a1_rule_token );
        end if;
      end if;
    end if;
    relate fstmt to iter across R614;
    relate fstmt to iter_set across R652;
    relate fstmt to iter_set_obj across R670;
    select one inst_ref related by iter->V_INT[R814];
    fstmt.is_implicit = inst_ref.IsImplicitInFor;
  end if;
end if;
return param.a3_rule_begin_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e6a468a6-8f61-4e27-b303-aac45fa970b4",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("75eb3fec-83f2-4cb6-a962-b6871473cff5",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e6a468a6-8f61-4e27-b303-aac45fa970b4",
	'');
INSERT INTO S_SPARM
	VALUES ("199fe77d-705e-4e6b-875e-e38fa09e5cc2",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"75eb3fec-83f2-4cb6-a962-b6871473cff5",
	'');
INSERT INTO S_SPARM
	VALUES ("173434f0-8e56-4c57-8864-ba88b158d619",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"199fe77d-705e-4e6b-875e-e38fa09e5cc2",
	'');
INSERT INTO S_SPARM
	VALUES ("bdfd802f-04be-44a0-b2fe-1f478e2765d6",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"173434f0-8e56-4c57-8864-ba88b158d619",
	'');
INSERT INTO S_SPARM
	VALUES ("b2f2f1ac-2b07-4c1f-b240-5c26f3fb35f6",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'b2_inst_ref_set_var2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bdfd802f-04be-44a0-b2fe-1f478e2765d6",
	'');
INSERT INTO S_SPARM
	VALUES ("2b73bcd3-bda3-4b56-a0e1-c2234120e3fa",
	"1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	'b3_block3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b2f2f1ac-2b07-4c1f-b240-5c26f3fb35f6",
	'');
INSERT INTO PE_PE
	VALUES ("1ea814d1-4b24-4ae6-aac4-f1f34bf955c6",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("01c95915-d3c5-4590-9f02-ee8394f35267",
	"00000000-0000-0000-0000-000000000000",
	'Generate_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("febb7108-bf19-4e18-a7e4-b23d482b32ae",
	"01c95915-d3c5-4590-9f02-ee8394f35267",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("01c95915-d3c5-4590-9f02-ee8394f35267",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e6862ab4-5e71-4afa-acb7-f64724044e60",
	"00000000-0000-0000-0000-000000000000",
	'Generate_statement_end',
	'ParserValidateFunction: TRUE',
	'// ::Generate_statement_end()
if ( param.b2_member_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL 
                              where ( selected.Value_ID == param.b2_member_id );
  select one val_dt related by val->S_DT[R820];
  if ( (empty val_dt) or (val_dt.Name != "inst<Event>") )
    select one attrRef related by val->V_AVL[R801];
    select one tranRef related by val->V_TVL[R801];
    select one membRef related by val->V_MVL[R801];
    message = "";
    
    if (empty val_dt)
      message = "Value has an unknown data type.  ";
    end if;
    
	if (not_empty attrRef)
	  select one attr related by attrRef->O_ATTR[R806];
	  message = message + "Attribute ->" + attr.Name + "<- must be of type inst<Event>";
	elif not_empty tranRef
	  select one var related by tranRef->V_VAR[R805];
	  message = message + "Variable ->" + var.Name + "<- must be of type inst<Event>";
	elif not_empty membRef
	  select one member related by membRef->S_MBR[R836];
	  message = message + "Structure member ->" + member.Name +
	                                           "<- must be of type inst<Event>";
    end if;
    select one attr related by val->V_AVL[R801]->O_ATTR[R806];
    val.dispose();
    ERR::reportParseError( msg: message, token: param.a1_rule_token );
  else
    stmt_id =  ::statement_create();
    select any stmt from instances of ACT_SMT where
                                               selected.Statement_ID == stmt_id;
    create object instance gpre of E_GPR;
    relate gpre to stmt across R603;
    relate val to gpre across R714;
    return stmt_id;
  end if;  
elif ( param.b1_event_spec1_id == GD::NULL_UNIQUE_ID() )
  select any ess from instances of ACT_SMT where
                                      selected.Statement_ID == param.a4_rule_id;
  if ( not_empty ess )
    ess.dispose();
  end if;
end if;
// else the event_spec rule has already created the statement
return param.a4_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("dd753055-be04-4ddf-a5ba-19be85fae7f6",
	"e6862ab4-5e71-4afa-acb7-f64724044e60",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1b9e8ed1-c540-4c7d-a0bc-52d75665229a",
	"e6862ab4-5e71-4afa-acb7-f64724044e60",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"dd753055-be04-4ddf-a5ba-19be85fae7f6",
	'');
INSERT INTO S_SPARM
	VALUES ("d85c9b15-5dc9-48d4-9b4e-cdc9bbb1d32c",
	"e6862ab4-5e71-4afa-acb7-f64724044e60",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1b9e8ed1-c540-4c7d-a0bc-52d75665229a",
	'');
INSERT INTO S_SPARM
	VALUES ("a613b98a-103b-4cf9-8792-2cc61f41e55b",
	"e6862ab4-5e71-4afa-acb7-f64724044e60",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d85c9b15-5dc9-48d4-9b4e-cdc9bbb1d32c",
	'');
INSERT INTO S_SPARM
	VALUES ("3aeb7c75-46a3-47b1-afb3-32ea2dd8a48c",
	"e6862ab4-5e71-4afa-acb7-f64724044e60",
	'b1_event_spec1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a613b98a-103b-4cf9-8792-2cc61f41e55b",
	'');
INSERT INTO S_SPARM
	VALUES ("5d66be74-ca39-4352-88e6-f3a2f36e3e52",
	"e6862ab4-5e71-4afa-acb7-f64724044e60",
	'b2_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3aeb7c75-46a3-47b1-afb3-32ea2dd8a48c",
	'');
INSERT INTO PE_PE
	VALUES ("e6862ab4-5e71-4afa-acb7-f64724044e60",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e3197447-c82d-42ce-9921-2da64ba66a3a",
	"00000000-0000-0000-0000-000000000000",
	'If_statement_start',
	'ParserValidateFunction: TRUE',
	'stmt_id =  ::statement_create();
select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;

create object instance if_stmt of ACT_IF;
relate if_stmt to stmt across R603;

return stmt.Statement_ID;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("16c11c88-7809-4ca6-8f41-8edd01cb1fbe",
	"e3197447-c82d-42ce-9921-2da64ba66a3a",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e3197447-c82d-42ce-9921-2da64ba66a3a",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	"00000000-0000-0000-0000-000000000000",
	'Expr_validate',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL
  where (selected.Value_ID == param.a6_current_rule_id);
if ( not_empty val )
  val.setEndPosition();
end if;
return param.a6_current_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("554a6119-e2c2-4d48-ba1b-9f6a0335944d",
	"b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fb870430-086e-4ac5-acd5-fe7da7487c88",
	"b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"554a6119-e2c2-4d48-ba1b-9f6a0335944d",
	'');
INSERT INTO S_SPARM
	VALUES ("d8b7f8c4-eae4-4b5a-a8fa-881b3fb29c85",
	"b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fb870430-086e-4ac5-acd5-fe7da7487c88",
	'');
INSERT INTO S_SPARM
	VALUES ("65450323-e744-48e1-8b2d-1fbccef8b1c4",
	"b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d8b7f8c4-eae4-4b5a-a8fa-881b3fb29c85",
	'');
INSERT INTO S_SPARM
	VALUES ("d9e06700-565c-44f2-80b8-86a18a948401",
	"b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"65450323-e744-48e1-8b2d-1fbccef8b1c4",
	'');
INSERT INTO PE_PE
	VALUES ("b10334fd-dc9d-45a7-9eb4-a0d9ef5999d8",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("489470c2-9253-444d-b332-530b80dda62c",
	"00000000-0000-0000-0000-000000000000",
	'If_statement_loop3_start',
	'ParserValidateFunction: TRUE',
	'
return param.a2_rule_begin_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("478db9a0-1ce8-461e-93bf-31111ba90af2",
	"489470c2-9253-444d-b332-530b80dda62c",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("43549591-69c2-4a1a-a1b9-3a5578c31b10",
	"489470c2-9253-444d-b332-530b80dda62c",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"478db9a0-1ce8-461e-93bf-31111ba90af2",
	'');
INSERT INTO S_SPARM
	VALUES ("3a10b1f2-7da0-4e80-9344-b9c3bafb17e6",
	"489470c2-9253-444d-b332-530b80dda62c",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"43549591-69c2-4a1a-a1b9-3a5578c31b10",
	'');
INSERT INTO PE_PE
	VALUES ("489470c2-9253-444d-b332-530b80dda62c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	"00000000-0000-0000-0000-000000000000",
	'If_statement_loop3_end',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL where ( selected.Value_ID == param.b3_expr3_id );
if ( empty val  )
  ERR::reportParseError( msg: "Elif expression not found",
        token: param.a1_rule_token );
else
  select one val_dt related by val->S_DT[R820];
  if ( empty val_dt )
    val.dispose();
    ERR::reportParseError( msg: "Elif expression unknown data type",
          token: param.a1_rule_token );
  elif ( val_dt.Name != "boolean" )
    val.dispose();
     ERR::reportParseError( msg: "Elif expression data type is not boolean",
          token: param.a1_rule_token );
  else
      if ( param.b4_block4_id != GD::NULL_UNIQUE_ID() )
        select any if_blk from instances of ACT_BLK where selected.Block_ID == param.b2_block2_id;
        select any elif_blk from instances of ACT_BLK where selected.Block_ID == param.b4_block4_id;

        // re-relate if block back to if statement
        select one istmt related by elif_blk->ACT_IF[R607];
        relate istmt to if_blk across R607;

        // create the Elif statement instance
        stmt_id =  ::statement_create();
        select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
        create object instance elif_stmt of ACT_EL;
        relate elif_stmt to stmt across R603;
        relate elif_stmt to elif_blk across R658;
        relate elif_stmt to istmt across R682;
        select any root_blk from instances of ACT_BLK where selected.Block_ID == param.a2_upper_ruleid_name;
		stmt.LineNumber = root_blk.CurrentLine;
		stmt.StartPosition = root_blk.CurrentCol;
        relate elif_stmt to val across R659;
      end if;
    end if;
  end if;

return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a91fe32b-a2b5-410d-b077-a060fc460e15",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a21edacb-1c32-4fef-9d8e-884f5ed3b49d",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a91fe32b-a2b5-410d-b077-a060fc460e15",
	'');
INSERT INTO S_SPARM
	VALUES ("648ce5f1-12a7-4794-8e96-926565aea6b6",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a21edacb-1c32-4fef-9d8e-884f5ed3b49d",
	'');
INSERT INTO S_SPARM
	VALUES ("3d406f9d-2e63-4feb-9d0d-23328c25bc1f",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"648ce5f1-12a7-4794-8e96-926565aea6b6",
	'');
INSERT INTO S_SPARM
	VALUES ("e508b66b-1c41-470f-83b0-2544d9706981",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'b1_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3d406f9d-2e63-4feb-9d0d-23328c25bc1f",
	'');
INSERT INTO S_SPARM
	VALUES ("13d7e9b9-5f71-4d7f-a575-423e7d9c361c",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'b2_block2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e508b66b-1c41-470f-83b0-2544d9706981",
	'');
INSERT INTO S_SPARM
	VALUES ("90f05ea0-3c93-41ba-a9e1-5a1a7b0a49c0",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'b3_expr3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"13d7e9b9-5f71-4d7f-a575-423e7d9c361c",
	'');
INSERT INTO S_SPARM
	VALUES ("e010fafa-f319-455c-8d7e-225943681b02",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'b4_block4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"90f05ea0-3c93-41ba-a9e1-5a1a7b0a49c0",
	'');
INSERT INTO S_SPARM
	VALUES ("1b404dfb-2ec9-4d1f-8c82-fd5346c20cc6",
	"9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	'b5_block5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e010fafa-f319-455c-8d7e-225943681b02",
	'');
INSERT INTO PE_PE
	VALUES ("9ebf720b-25b9-4362-a3ed-4cd556a489bc",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6c059059-7025-4080-be53-46856e6aca57",
	"00000000-0000-0000-0000-000000000000",
	'If_statement_end',
	'ParserValidateFunction: TRUE',
	'
select any if_stmt from instances of ACT_IF 
          where ( selected.Statement_ID == param.a3_rule_begin_id );
if ( empty if_stmt )
  select any val from instances of V_VAL where ( selected.Value_ID == param.b1_expr1_id );
  if ( not_empty val  )
    val.dispose();
  end if;
     ERR::reportParseError( msg: "If statement not found",
        token: param.a1_rule_token );
else
  select one stmt related by if_stmt->ACT_SMT[R603];
  select any val from instances of V_VAL where ( selected.Value_ID == param.b1_expr1_id );
  if ( empty val  )
    stmt.dispose();
    ERR::reportParseError( msg: "If expression not found",
        token: param.a1_rule_token );
  else
    select one val_dt related by val->S_DT[R820];
    if ( empty val_dt )
      stmt.dispose();
      val.dispose();
       ERR::reportParseError( msg: "If expression unknown data type",
          token: param.a1_rule_token );
    elif ( val_dt.Name != "boolean" )
      stmt.dispose();
      val.dispose();
       ERR::reportParseError( msg: "If expression data type is not boolean",
          token: param.a1_rule_token );
    else
      relate if_stmt to val across R625;
      if ( param.b5_block5_id != GD::NULL_UNIQUE_ID() )
        select any if_blk from instances of ACT_BLK where selected.Block_ID == param.b2_block2_id;
        select any else_blk from instances of ACT_BLK where selected.Block_ID == param.b5_block5_id;
        select one existingBlk related by if_stmt->ACT_BLK[R607];
        if (not_empty existingBlk)
          unrelate if_stmt from existingBlk across R607;
        end if;
        relate if_stmt to if_blk across R607;
        // create the Else statement instance
        stmt_id =  ::statement_create();
        select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
        create object instance else_stmt of ACT_E;
        relate else_stmt to stmt across R603;
        relate else_stmt to else_blk across R606;
        relate else_stmt to if_stmt across R683;
        select any root_blk from instances of ACT_BLK where selected.Block_ID == param.a2_upper_rule_id;
		stmt.LineNumber = root_blk.CurrentLine;
		stmt.StartPosition = root_blk.CurrentCol;
      end if;
    end if;
  end if;
end if;
return param.a3_rule_begin_id;













































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("74574079-281e-4223-bf42-f18f2fd81672",
	"6c059059-7025-4080-be53-46856e6aca57",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bcddbe5b-b7ba-4cb9-a821-bcd7b9e236d8",
	"6c059059-7025-4080-be53-46856e6aca57",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"74574079-281e-4223-bf42-f18f2fd81672",
	'');
INSERT INTO S_SPARM
	VALUES ("e0cf4ac3-5a15-40a9-80db-07e2f27a285f",
	"6c059059-7025-4080-be53-46856e6aca57",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bcddbe5b-b7ba-4cb9-a821-bcd7b9e236d8",
	'');
INSERT INTO S_SPARM
	VALUES ("840cf50c-c199-4ac2-bca7-da3355e3e9ce",
	"6c059059-7025-4080-be53-46856e6aca57",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e0cf4ac3-5a15-40a9-80db-07e2f27a285f",
	'');
INSERT INTO S_SPARM
	VALUES ("02c825c4-d7fc-4be6-8649-782d18a3b4cd",
	"6c059059-7025-4080-be53-46856e6aca57",
	'b1_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"840cf50c-c199-4ac2-bca7-da3355e3e9ce",
	'');
INSERT INTO S_SPARM
	VALUES ("bc2f7457-66c1-4eba-a505-3723bfc8a263",
	"6c059059-7025-4080-be53-46856e6aca57",
	'b2_block2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"02c825c4-d7fc-4be6-8649-782d18a3b4cd",
	'');
INSERT INTO S_SPARM
	VALUES ("471acd54-8f43-4958-a011-399096e26e41",
	"6c059059-7025-4080-be53-46856e6aca57",
	'b3_expr3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bc2f7457-66c1-4eba-a505-3723bfc8a263",
	'');
INSERT INTO S_SPARM
	VALUES ("e705f406-1a54-49b4-9bb8-be452d8f7cdb",
	"6c059059-7025-4080-be53-46856e6aca57",
	'b4_block4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"471acd54-8f43-4958-a011-399096e26e41",
	'');
INSERT INTO S_SPARM
	VALUES ("f9fff34f-1775-4c39-93bd-9c56cc6c92b5",
	"6c059059-7025-4080-be53-46856e6aca57",
	'b5_block5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e705f406-1a54-49b4-9bb8-be452d8f7cdb",
	'');
INSERT INTO PE_PE
	VALUES ("6c059059-7025-4080-be53-46856e6aca57",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("acc40476-4351-488b-9e35-ad8d9a9eff7c",
	"00000000-0000-0000-0000-000000000000",
	'Implicit_assignment_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::Assignment_statement_start(a1_ruleid_name: param.a1_ruleid_name);












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("62daa1ee-908c-4e57-a463-7e09a7701c44",
	"acc40476-4351-488b-9e35-ad8d9a9eff7c",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("acc40476-4351-488b-9e35-ad8d9a9eff7c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("33a7add2-904b-43b1-ae34-a64d2f03979f",
	"00000000-0000-0000-0000-000000000000",
	'Implicit_assignment_statement_end',
	'ParserValidateFunction: TRUE',
	'return ::Assignment_statement_end(a1_rule_token: param.a1_rule_token,
  a2_upper_rule_id: param.a2_upper_rule_id, a3_rule_begin_id: param.a3_rule_begin_id,
  a4_rule_id: param.a4_rule_id, b1_assignment_expr1_id: param.b1_assignment_expr1_id );












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4d680d39-30e3-49f4-b9c5-ea6e0995ef78",
	"33a7add2-904b-43b1-ae34-a64d2f03979f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c6b27f5d-0553-4ef4-bf71-c5286c48b95a",
	"33a7add2-904b-43b1-ae34-a64d2f03979f",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4d680d39-30e3-49f4-b9c5-ea6e0995ef78",
	'');
INSERT INTO S_SPARM
	VALUES ("b7a7cfa1-5503-41ac-bade-43485db00b88",
	"33a7add2-904b-43b1-ae34-a64d2f03979f",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c6b27f5d-0553-4ef4-bf71-c5286c48b95a",
	'');
INSERT INTO S_SPARM
	VALUES ("67384a51-b54a-4d57-8805-5f5d47244442",
	"33a7add2-904b-43b1-ae34-a64d2f03979f",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b7a7cfa1-5503-41ac-bade-43485db00b88",
	'');
INSERT INTO S_SPARM
	VALUES ("803567ff-8804-42b8-bb06-16c1fd33c479",
	"33a7add2-904b-43b1-ae34-a64d2f03979f",
	'b1_assignment_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"67384a51-b54a-4d57-8805-5f5d47244442",
	'');
INSERT INTO PE_PE
	VALUES ("33a7add2-904b-43b1-ae34-a64d2f03979f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5409f8d6-63ed-4283-b784-eb92d954ec95",
	"00000000-0000-0000-0000-000000000000",
	'Implicit_invocation_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::statement_create();

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a73b378c-4750-4256-b626-3298e64a92d9",
	"5409f8d6-63ed-4283-b784-eb92d954ec95",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5409f8d6-63ed-4283-b784-eb92d954ec95",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("604e7471-790e-4f56-80c1-703c105a3a7f",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_validate',
	'ParserValidateFunction: TRUE',
	'// ::Bridge_or_transform_function_validate()
if param.a6_current_rule_id != GD::NULL_UNIQUE_ID()
  select any val from instances of V_VAL where
                                  selected.Value_ID == param.a6_current_rule_id;
  if not_empty val
    select one sdt related by val->S_DT[R820];
    if empty sdt
      ERR::reportParseError( msg: "Value has unknown data type",
           token: param.a1_rule_token );
    else
      select one tfr related by val->V_TRV[R801]->O_TFR[R829];
      if not_empty tfr
        return ::is_valid_invocation( a1_type: sdt.Name,
                                   a2_isRval: param.a2_isRval,
                                     a3_id: param.a6_current_rule_id,
                                       a4_name: "Operation ->"  + tfr.Name,
                                           a5_rule_token: param.a1_rule_token );
      else
        select one brg related by val->V_BRV[R801]->S_BRG[R828];
        if ( not_empty brg )
          return ::is_valid_invocation( a1_type: sdt.Name,
                                   a2_isRval: param.a2_isRval,
                                     a3_id: param.a6_current_rule_id,
                                          a4_name: "Bridge ->"  + brg.Name,
                                           a5_rule_token: param.a1_rule_token );
        else
          select one msv related by val->V_MSV[R801];
          select one ep related by msv->SPR_PEP[R841]->C_EP[R4501]; 
          if(empty ep)
            // if the executable property was not found
            // search for a required executable property
            select one ep related by msv->SPR_REP[R845]->C_EP[R4500];
          end if;
          if not_empty ep
            select one io related by ep->C_IO[R4004];
            if not_empty io
                return ::is_valid_invocation(a1_type: sdt.Name,
                                      a2_isRval: param.a2_isRval,
                                     a3_id: param.a6_current_rule_id,
                             a4_name: "Interface Operation ->"  + io.Name,
                                           a5_rule_token: param.a1_rule_token );
            else
              select one sig related by ep->C_AS[R4004];
              if param.a2_isRval
                token = param.a1_rule_token;
                ::set_token(a1_token:token, a2_line: val.LineNumber,
                               a3_column: val.StartPosition, a4_text: sig.Name);
                ERR::reportParseError( msg: "Signal ->" + sig.Name +
                           "<- cannot be used in an expression", token: token );
              else
                  return ::is_valid_invocation(a1_type: sdt.Name,
                                        a2_isRval: param.a2_isRval,
                                       a3_id: param.a6_current_rule_id,
                                          a4_name: "Signal ->"  + sig.Name,
                                           a5_rule_token: param.a1_rule_token );
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
return GD::NULL_UNIQUE_ID();',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d702fac5-1fee-4272-88af-6c8c5486bf31",
	"604e7471-790e-4f56-80c1-703c105a3a7f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8c189cae-4a5d-4823-a8cc-201b1f5ca063",
	"604e7471-790e-4f56-80c1-703c105a3a7f",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"d702fac5-1fee-4272-88af-6c8c5486bf31",
	'');
INSERT INTO S_SPARM
	VALUES ("f7ccab19-b867-4f3a-8bff-4d864637dcb4",
	"604e7471-790e-4f56-80c1-703c105a3a7f",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8c189cae-4a5d-4823-a8cc-201b1f5ca063",
	'');
INSERT INTO S_SPARM
	VALUES ("98ec92dc-80a0-47c9-9b2b-1d802818273e",
	"604e7471-790e-4f56-80c1-703c105a3a7f",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f7ccab19-b867-4f3a-8bff-4d864637dcb4",
	'');
INSERT INTO S_SPARM
	VALUES ("b43cdae8-6f7d-4ea7-9ace-cec0a997bced",
	"604e7471-790e-4f56-80c1-703c105a3a7f",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"98ec92dc-80a0-47c9-9b2b-1d802818273e",
	'');
INSERT INTO S_SPARM
	VALUES ("62ec0b18-5616-475a-8874-5bb20375bb97",
	"604e7471-790e-4f56-80c1-703c105a3a7f",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b43cdae8-6f7d-4ea7-9ace-cec0a997bced",
	'');
INSERT INTO PE_PE
	VALUES ("604e7471-790e-4f56-80c1-703c105a3a7f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	"00000000-0000-0000-0000-000000000000",
	'Implicit_invocation_statement_end',
	'ParserValidateFunction: TRUE',
	'// validate parameters

select any brv from instances of V_BRV 
   where selected.Value_ID == param.b1_bridge_or_transform_invocation1_id;
if ( not_empty brv )
  return ::Bridge_statement_end( a1_rule_token: param.a1_rule_token, 
      a2_upper_rule_id: param.a2_upper_rule_id,
      a3_rule_begin_id: param.a3_rule_begin_id,
      a4_rule_id: param.a4_rule_id,
      b1_member1_id:GD::NULL_UNIQUE_ID(),
      b3_param_data_access3_id: GD::NULL_UNIQUE_ID(),
      b4_bridge_invocation4_id: GD::NULL_UNIQUE_ID(),
      b5_bridge_invocation5_id: param.b1_bridge_or_transform_invocation1_id );
else
  select any trv from instances of V_TRV 
     where selected.Value_ID == param.b1_bridge_or_transform_invocation1_id;
  if ( not_empty trv )
    return ::Implicit_ib_transform_statement_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule_id: param.a2_upper_rule_id,
        a3_rule_begin_id:  param.a3_rule_begin_id,
        a4_rule_id: param.a4_rule_id,
        b1_transform_ib_invocation1_id: param.b1_bridge_or_transform_invocation1_id );
  else
    select any msv from instances of V_MSV
           where selected.Value_ID == param.b1_bridge_or_transform_invocation1_id;
    if not_empty msv
      return ::Send_statement_end( a1_rule_token: param.a1_rule_token, 
      a2_upper_rule: param.a2_upper_rule_id,
      a3_start_rule: param.a3_rule_begin_id,
      a4_current_rule: param.a4_rule_id,
      a5_member_access_id:GD::NULL_UNIQUE_ID(),
      a6_parameter_access_id: GD::NULL_UNIQUE_ID(),
      a7_message_result_id: GD::NULL_UNIQUE_ID(),
      a8_message_invocation_id: param.b1_bridge_or_transform_invocation1_id );
    end if;
  end if;
end if;

return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("353341a6-f0f1-448e-8e10-ce0eccf293b8",
	"85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3ca0e9e4-cd11-4cc1-967c-b9f66160a696",
	"85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"353341a6-f0f1-448e-8e10-ce0eccf293b8",
	'');
INSERT INTO S_SPARM
	VALUES ("2bc6c2e8-321d-4722-8f59-caa3b2ece995",
	"85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3ca0e9e4-cd11-4cc1-967c-b9f66160a696",
	'');
INSERT INTO S_SPARM
	VALUES ("108bad25-f143-4fb2-92c3-e1d1bb3de13a",
	"85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2bc6c2e8-321d-4722-8f59-caa3b2ece995",
	'');
INSERT INTO S_SPARM
	VALUES ("aa5f3dd9-f6e1-43c4-a68e-f120a79704af",
	"85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	'b1_bridge_or_transform_invocation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"108bad25-f143-4fb2-92c3-e1d1bb3de13a",
	'');
INSERT INTO PE_PE
	VALUES ("85f7ac64-93bd-41b4-9aa0-7a16151bc21c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9d5fd1b9-98d1-4305-8b38-9db6d949eebc",
	"00000000-0000-0000-0000-000000000000",
	'Implicit_ib_transform_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::statement_create();











































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c03a5dd5-aefe-4c04-b289-293b0e2ddd1c",
	"9d5fd1b9-98d1-4305-8b38-9db6d949eebc",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9d5fd1b9-98d1-4305-8b38-9db6d949eebc",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2049ce2d-3628-4230-a374-f6f5a854c07c",
	"00000000-0000-0000-0000-000000000000",
	'Transform_ib_invocation_validate',
	'ParserValidateFunction: TRUE',
	'if ( param.a6_current_rule_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL where selected.Value_ID == param.a6_current_rule_id;
  if ( not_empty val )
    select one sdt related by val->S_DT[R820];
    if ( empty sdt )
      ERR::reportParseError( msg: "Value has unknown data type",
           token: param.a1_rule_token );
    else
      select one tfr related by val->V_TRV[R801]->O_TFR[R829];
      if ( not_empty tfr )
        return ::is_valid_invocation( a1_type: sdt.Name, a2_isRval: param.a2_isRval, a3_id: param.a6_current_rule_id,
              a4_name: "Operation ->"  + tfr.Name, a5_rule_token: param.a1_rule_token );
      end if;
    end if;
  end if;
end if;
return GD::NULL_UNIQUE_ID();












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4978b543-d95b-4674-aa3c-42f2d546c245",
	"2049ce2d-3628-4230-a374-f6f5a854c07c",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c90f6dad-7130-430a-8a3b-b740f0302f89",
	"2049ce2d-3628-4230-a374-f6f5a854c07c",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"4978b543-d95b-4674-aa3c-42f2d546c245",
	'');
INSERT INTO S_SPARM
	VALUES ("b7db54ab-d9d7-4902-a6ed-b20a27460449",
	"2049ce2d-3628-4230-a374-f6f5a854c07c",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c90f6dad-7130-430a-8a3b-b740f0302f89",
	'');
INSERT INTO S_SPARM
	VALUES ("c865a5f4-78c6-4d14-9244-4751462f11c3",
	"2049ce2d-3628-4230-a374-f6f5a854c07c",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b7db54ab-d9d7-4902-a6ed-b20a27460449",
	'');
INSERT INTO S_SPARM
	VALUES ("5df731fe-d343-4a00-b693-690717618c1f",
	"2049ce2d-3628-4230-a374-f6f5a854c07c",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c865a5f4-78c6-4d14-9244-4751462f11c3",
	'');
INSERT INTO S_SPARM
	VALUES ("aaf76595-2aea-44f4-957f-8a91e9673b52",
	"2049ce2d-3628-4230-a374-f6f5a854c07c",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5df731fe-d343-4a00-b693-690717618c1f",
	'');
INSERT INTO PE_PE
	VALUES ("2049ce2d-3628-4230-a374-f6f5a854c07c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4040ea25-6523-4304-aeec-41a0309e42c2",
	"00000000-0000-0000-0000-000000000000",
	'Implicit_ib_transform_statement_end',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL 
       where ( selected.Value_ID == param.b1_transform_ib_invocation1_id );

if ( empty val )
  // there was a problem with parsing the value
  select any stmt from instances of ACT_SMT 
        where selected.Statement_ID == param.a3_rule_begin_id;
  stmt.dispose();
  return GD::NULL_UNIQUE_ID();
end if;

select any stmt from instances of ACT_SMT 
    where ( selected.Statement_ID == param.a3_rule_begin_id );
create object instance act_tfm of ACT_TFM;
relate stmt to act_tfm across R603;
select one trv related by val->V_TRV[R801];
select one tfr related by trv->O_TFR[R829];
select many parm_set related by trv->V_PAR[R811];
unrelate tfr from trv across R829;
relate tfr to act_tfm across R673;

// store the textual position of the operation name
act_tfm.operationNameLineNumber = val.LineNumber;
act_tfm.operationNameColumn = val.StartPosition;

// if the operation is class-based
if (tfr.Instance_Based == Scope::Class)
	// store the textual position of the class key-letters; use the 
	// value that is in the operation-value instance that was created 
	// when the operation''''s named was parsed, rather than the value in the 
	// current block, since the latter may have been overwritten
	// during the parsing of the operation''''s parameters 
	act_tfm.modelClassKeyLettersLineNumber = trv.modelClassKeyLettersLineNumber;
	act_tfm.modelClassKeyLettersColumn = trv.modelClassKeyLettersColumn;
end if;

select one var related by trv->V_VAR[R830];
if ( not_empty var )
  unrelate trv from var across R830;
  relate act_tfm to var across R667;
end if;

for each parm in parm_set
  unrelate parm from trv across R811;
  relate parm to act_tfm across R627;
end for;

val.dispose();

return stmt.Statement_ID;













































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("eef76c2b-613d-4eff-a746-a9b59e8c7860",
	"4040ea25-6523-4304-aeec-41a0309e42c2",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("021066e7-f4c4-4e3b-af32-bffdbf5ce91d",
	"4040ea25-6523-4304-aeec-41a0309e42c2",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"eef76c2b-613d-4eff-a746-a9b59e8c7860",
	'');
INSERT INTO S_SPARM
	VALUES ("7765970b-0869-4ff2-92cc-188718788263",
	"4040ea25-6523-4304-aeec-41a0309e42c2",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"021066e7-f4c4-4e3b-af32-bffdbf5ce91d",
	'');
INSERT INTO S_SPARM
	VALUES ("0dfcf150-ece3-4fb5-a739-1677319ae2e6",
	"4040ea25-6523-4304-aeec-41a0309e42c2",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7765970b-0869-4ff2-92cc-188718788263",
	'');
INSERT INTO S_SPARM
	VALUES ("25072dde-82d2-4ad2-8885-cd15882ef21e",
	"4040ea25-6523-4304-aeec-41a0309e42c2",
	'b1_transform_ib_invocation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0dfcf150-ece3-4fb5-a739-1677319ae2e6",
	'');
INSERT INTO PE_PE
	VALUES ("4040ea25-6523-4304-aeec-41a0309e42c2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c093a714-6199-46e4-9c20-e389bac2e6c6",
	"00000000-0000-0000-0000-000000000000",
	'Relate_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f5f77403-8775-4e39-9cb6-0c7bd93e2e92",
	"c093a714-6199-46e4-9c20-e389bac2e6c6",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c093a714-6199-46e4-9c20-e389bac2e6c6",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	"00000000-0000-0000-0000-000000000000",
	'Relationship_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  // store the textual position of the association number
  block.currentAssociationNumberLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentAssociationNumberColumn =
                                   ::getColumn(rule_token: param.a1_rule_token);
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];

  // Check for Class keyletter match for token
  if not_empty component
    component.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::ASSOCIATION,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  else
    package.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::ASSOCIATION, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                     selected.Name == param.a3_text and 
                             selected.Type == ElementTypeConstants::ASSOCIATION; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                     selected.Name == param.a3_text and 
                             selected.Type == ElementTypeConstants::ASSOCIATION; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  if empty results
    ERR::reportParseError( msg: "Cannot find specified association ->%s<-",
          token: param.a1_rule_token );
  elif cardinality results > 1
    ERR::reportParseError( msg:
      "More than one association with number ->%s<- You will need to eventually clear this up",
          token: param.a1_rule_token );
  else
    result = GD::NULL_UNIQUE_ID();
    for each rel in results
      // will iterate only once
      result = rel.Element_ID;
    end for;
    return result;
  end if;
  return param.a6_current_rule_id;
else
  rel_num = OS::convert_relationship_string( rel: param.a3_text );
  // store the textual position of the association number
  block.currentAssociationNumberLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentAssociationNumberColumn =
                                   ::getColumn(rule_token: param.a1_rule_token);
  select many rel_set from instances of R_REL where ( selected.Numb == rel_num );
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];
    ERR::reportParseError( msg: "Cannot find specified association ->%s<-",
          token: param.a1_rule_token );
  return param.a6_current_rule_id;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fce3c761-67aa-4e72-8b40-1f4bac91c5c8",
	"4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e4a8a0f1-6f96-4ed1-b5ff-192b0cacd9e5",
	"4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fce3c761-67aa-4e72-8b40-1f4bac91c5c8",
	'');
INSERT INTO S_SPARM
	VALUES ("6d1e5d73-a97f-4a5d-8d7c-c5f243a78201",
	"4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e4a8a0f1-6f96-4ed1-b5ff-192b0cacd9e5",
	'');
INSERT INTO S_SPARM
	VALUES ("7afc6272-21a8-4793-9b16-1358371cb0ad",
	"4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6d1e5d73-a97f-4a5d-8d7c-c5f243a78201",
	'');
INSERT INTO S_SPARM
	VALUES ("e722fe64-f4a4-4566-bae4-fcec848aae05",
	"4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7afc6272-21a8-4793-9b16-1358371cb0ad",
	'');
INSERT INTO PE_PE
	VALUES ("4989d1fd-cdbf-40a0-9624-78eb432ffcf4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d4c793a1-99ce-412c-b0a2-9bd111514316",
	"00000000-0000-0000-0000-000000000000",
	'Phrase_validate',
	'ParserValidateFunction: TRUE',
	'// store the textual position of the phrase
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
block.currentAssociationPhraseLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
block.currentAssociationPhraseColumn = ::getColumn(rule_token: param.a1_rule_token);

block.TempBuffer = param.a3_text;
return param.a6_current_rule_id;











































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("96e849d4-6654-430b-ae14-69a70895970b",
	"d4c793a1-99ce-412c-b0a2-9bd111514316",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("42fae7ef-c2f0-4956-a587-16d312939fd6",
	"d4c793a1-99ce-412c-b0a2-9bd111514316",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"96e849d4-6654-430b-ae14-69a70895970b",
	'');
INSERT INTO S_SPARM
	VALUES ("33b9b7da-821c-48ff-af8e-054bf381056a",
	"d4c793a1-99ce-412c-b0a2-9bd111514316",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"42fae7ef-c2f0-4956-a587-16d312939fd6",
	'');
INSERT INTO S_SPARM
	VALUES ("f52e868f-81f7-46c1-b5eb-6ed02cebaba6",
	"d4c793a1-99ce-412c-b0a2-9bd111514316",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"33b9b7da-821c-48ff-af8e-054bf381056a",
	'');
INSERT INTO S_SPARM
	VALUES ("90243040-bd55-4cda-ad53-a768f4f31c7e",
	"d4c793a1-99ce-412c-b0a2-9bd111514316",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f52e868f-81f7-46c1-b5eb-6ed02cebaba6",
	'');
INSERT INTO PE_PE
	VALUES ("d4c793a1-99ce-412c-b0a2-9bd111514316",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("148307cf-c7b2-43be-b866-868a73bd7fbb",
	"00000000-0000-0000-0000-000000000000",
	'Assoc_obj_inst_ref_var_validate',
	'ParserValidateFunction: TRUE',
	'return ::Inst_ref_var_validate( a1_rule_token: param.a1_rule_token,a3_text: param.a3_text,
    a4_rule_ref_id: param.a4_rule_ref_id, a5_upper_rule_id: param.a5_upper_rule_id, 
    a6_current_rule_id: param.a6_current_rule_id );













































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3e15c76b-437f-4079-8ec4-97d7a756d26b",
	"148307cf-c7b2-43be-b866-868a73bd7fbb",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9f890259-6273-4e82-bcf8-98a7fdbf95a7",
	"148307cf-c7b2-43be-b866-868a73bd7fbb",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3e15c76b-437f-4079-8ec4-97d7a756d26b",
	'');
INSERT INTO S_SPARM
	VALUES ("c20d9721-38a6-491e-b541-a470b2b7fc05",
	"148307cf-c7b2-43be-b866-868a73bd7fbb",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9f890259-6273-4e82-bcf8-98a7fdbf95a7",
	'');
INSERT INTO S_SPARM
	VALUES ("4789d8ba-572f-44b0-b14e-37543a647b96",
	"148307cf-c7b2-43be-b866-868a73bd7fbb",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c20d9721-38a6-491e-b541-a470b2b7fc05",
	'');
INSERT INTO S_SPARM
	VALUES ("e93def1c-0052-46e3-aaac-5caee023e880",
	"148307cf-c7b2-43be-b866-868a73bd7fbb",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4789d8ba-572f-44b0-b14e-37543a647b96",
	'');
INSERT INTO PE_PE
	VALUES ("148307cf-c7b2-43be-b866-868a73bd7fbb",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	"00000000-0000-0000-0000-000000000000",
	'Relate_statement_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b5_assoc_obj_inst_ref_var5_id == GD::NULL_UNIQUE_ID() )
  select any r_rel from instances of R_REL where ( selected.Rel_ID == param.b3_relationship3_id );
  select one r_assoc related by r_rel->R_ASSOC[R206];
  if ( not_empty r_assoc )
    ::clear_rel_data( a1_chain_start_val: GD::NULL_UNIQUE_ID(), a2_chain_id: GD::NULL_UNIQUE_ID(), a3_where_val: GD::NULL_UNIQUE_ID() );
     ERR::reportParseError( msg: 
       "Need USING clause for link classes in association ->R" + 
            GD::int_to_string(value: r_rel.Numb) + "<-",
            token: param.a1_rule_token );
  else
    select any one_var from instances of V_VAR 
        where ( selected.Var_ID == param.b1_inst_ref_var1_id );
    select any other_var from instances of V_VAR 
        where ( selected.Var_ID == param.b2_inst_ref_var2_id );
    select one left_obj related by one_var->V_INT[R814]->O_OBJ[R818];
    select one right_obj related by other_var->V_INT[R814]->O_OBJ[R818];
	if (empty left_obj)
	  ERR::reportParseError( msg:  "Variable ->" + one_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
    elif (empty right_obj)
      ERR::reportParseError( msg:  "Variable ->" + other_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
    else
      rel_mult = ::is_valid_relationship(a1_left: left_obj.Obj_ID, a2_right: right_obj.Obj_ID,
      a3_rel: param.b3_relationship3_id, a4_phrase: param.b4_phrase4_id, a5_rule_token: param.a1_rule_token,
      a6_chain_start_val: GD::NULL_UNIQUE_ID(), a7_chain_id: GD::NULL_UNIQUE_ID()  );
      if ( rel_mult != Multiplicity::Unknown )
        stmt_id =  ::statement_create();
        select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
        create object instance rel of ACT_REL;
        relate stmt to rel across R603;

        current_scope = ::get_current_scope();
        select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);

		// store the textual position of the association number
		rel.associationNumberLineNumber = block.currentAssociationNumberLineNumber;
		rel.associationNumberColumn = block.currentAssociationNumberColumn;

        if ( param.b4_phrase4_id == GD::NULL_UNIQUE_ID() )
          rel.relationship_phrase = "";
          else
            rel.relationship_phrase = block.TempBuffer;
            
			// store the textual position of the association phrase
			rel.associationPhraseLineNumber = block.currentAssociationPhraseLineNumber;
			rel.associationPhraseColumn = block.currentAssociationPhraseColumn;
          end if;
          relate rel to one_var across R615;
          relate rel to other_var across R616;
          select any r_rel from instances of R_REL where ( selected.Rel_ID == param.b3_relationship3_id );
          relate rel to r_rel across R653;
          return stmt.Statement_ID;
       else
        // association error -- fall through
       end if;
    end if;
    
  end if;
else
  select any one_var from instances of V_VAR 
        where ( selected.Var_ID == param.b1_inst_ref_var1_id );
  select any other_var from instances of V_VAR 
        where ( selected.Var_ID == param.b2_inst_ref_var2_id );
  select any assoc_var from instances of V_VAR 
        where ( selected.Var_ID == param.b5_assoc_obj_inst_ref_var5_id );
  select one left_obj related by one_var->V_INT[R814]->O_OBJ[R818];
  select one right_obj related by other_var->V_INT[R814]->O_OBJ[R818];
  select one assoc_obj related by assoc_var->V_INT[R814]->O_OBJ[R818];
  if (empty left_obj)
	ERR::reportParseError( msg:  "Variable ->" + one_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
  elif (empty right_obj)
    ERR::reportParseError( msg:  "Variable ->" + other_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );  
  elif (empty assoc_obj)
    ERR::reportParseError( msg:  "Variable ->" + assoc_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );  
  else
    if ( ::is_valid_assoc_relationship(a1_left: left_obj.Obj_ID, a2_right: right_obj.Obj_ID,
      a3_assoc: assoc_obj.Obj_ID,
      a4_rel: param.b3_relationship3_id, a5_phrase: param.b4_phrase4_id, a6_rule_token: param.a1_rule_token,
      a7_chain_start_val: GD::NULL_UNIQUE_ID(), a8_chain_id: GD::NULL_UNIQUE_ID() ) )
      
      stmt_id =  ::statement_create();
      select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
      create object instance rel of ACT_RU;
      relate stmt to rel across R603;

        current_scope = ::get_current_scope();
        select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);

		// store the textual position of the association number
		rel.associationNumberLineNumber = block.currentAssociationNumberLineNumber;
		rel.associationNumberColumn = block.currentAssociationNumberColumn;

      if ( param.b4_phrase4_id == GD::NULL_UNIQUE_ID() )
        rel.relationship_phrase = "";
      else
        rel.relationship_phrase = block.TempBuffer;
            
		// store the textual position of the association phrase
		rel.associationPhraseLineNumber = block.currentAssociationPhraseLineNumber;
		rel.associationPhraseColumn = block.currentAssociationPhraseColumn;
      end if;
      relate rel to one_var across R617;
      relate rel to other_var across R618;
      relate rel to assoc_var across R619;
      select any r_rel from instances of R_REL where ( selected.Rel_ID == param.b3_relationship3_id );
      relate rel to r_rel across R654;
      return stmt.Statement_ID;
    end if;            
  end if;
end if;

return param.a4_rule_id;























































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b4c7b380-cc08-4034-aacd-643a572c5f4c",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("24448197-3319-4f3b-b948-be0e6babb27f",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b4c7b380-cc08-4034-aacd-643a572c5f4c",
	'');
INSERT INTO S_SPARM
	VALUES ("3faacdfe-af59-4497-9874-2f0df4df33cf",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"24448197-3319-4f3b-b948-be0e6babb27f",
	'');
INSERT INTO S_SPARM
	VALUES ("44df892c-b2f1-4288-9344-96bdc3392d53",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3faacdfe-af59-4497-9874-2f0df4df33cf",
	'');
INSERT INTO S_SPARM
	VALUES ("5249d8c6-9841-407a-bc60-4c1a3cca1640",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'b1_inst_ref_var1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"44df892c-b2f1-4288-9344-96bdc3392d53",
	'');
INSERT INTO S_SPARM
	VALUES ("98aa8e10-b12b-4e4a-81a2-8365e6522df1",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'b2_inst_ref_var2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5249d8c6-9841-407a-bc60-4c1a3cca1640",
	'');
INSERT INTO S_SPARM
	VALUES ("91e0695f-00a1-424f-8d9a-12f279dd03ce",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'b3_relationship3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"98aa8e10-b12b-4e4a-81a2-8365e6522df1",
	'');
INSERT INTO S_SPARM
	VALUES ("2f31f73c-e99e-449e-91b8-bf3d12c4570f",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'b4_phrase4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"91e0695f-00a1-424f-8d9a-12f279dd03ce",
	'');
INSERT INTO S_SPARM
	VALUES ("9625d2c0-af22-4df8-a6ef-042af0070be3",
	"b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	'b5_assoc_obj_inst_ref_var5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2f31f73c-e99e-449e-91b8-bf3d12c4570f",
	'');
INSERT INTO PE_PE
	VALUES ("b8818ba8-1fcb-4cdb-af14-a91deb896c3d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("47eaefb6-4b6a-4872-b18e-e9c6bffcb308",
	"00000000-0000-0000-0000-000000000000",
	'Return_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4ad43b3a-b96b-4956-92d6-b54c12bc6603",
	"47eaefb6-4b6a-4872-b18e-e9c6bffcb308",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("47eaefb6-4b6a-4872-b18e-e9c6bffcb308",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2f66f8b3-acdc-46eb-857f-5859714e89b4",
	"00000000-0000-0000-0000-000000000000",
	'Return_statement_end',
	'ParserValidateFunction: TRUE',
	'// ::Return_statement_end()
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
if ( not_empty blk )
  select one act related by blk->ACT_ACT[R612];
  select one func related by act->ACT_FNB[R698]->S_SYNC[R695];
  select any ret_dt from instances of S_DT;
  // Get empty list
  select many dims from instances of S_DIM where selected.elementCount==-1000;

  if ( not_empty func )
    select one ret_dt related by func->S_DT[R25];
    select many dims related by func->S_DIM[R51];
  else
    select one op related by act->ACT_OPB[R698]->O_TFR[R696];
    if ( not_empty op )
      select one ret_dt related by op->S_DT[R116];
      select many dims related by op->S_DIM[R122];
    else
      select one brg related by act->ACT_BRB[R698]->S_BRG[R697];
      if ( not_empty brg )
        select one ret_dt related by brg->S_DT[R20];
        select many dims related by brg->S_DIM[R50];
      else
        select one reqOp related by act->ACT_ROB[R698]->SPR_RO[R685];
        if not_empty reqOp
          select one ret_dt related by reqOp->SPR_REP[R4502]->
                                          C_EP[R4500]->C_IO[R4004]->S_DT[R4008];
          select many dims related by reqOp->SPR_REP[R4502]->
                                         C_EP[R4500]->C_IO[R4004]->S_DIM[R4018];
        else
          select one provOp related by act->ACT_POB[R698]->SPR_PO[R687];
          if not_empty provOp
            select one ret_dt related by provOp->SPR_PEP[R4503]->
                                          C_EP[R4501]->C_IO[R4004]->S_DT[R4008];
            select many dims related by provOp->SPR_PEP[R4503]->
                                         C_EP[R4501]->C_IO[R4004]->S_DIM[R4018];
          else
            // MDA returns are always void

              // if the return dt was not found, check the
              // system level
              sysName = ::getSystemName();
              select any system from instances of S_SYS
                                               where (selected.Name == sysName);
              dt_id = GD::NULL_UNIQUE_ID();
              if not_empty system
                dt_id = system.getCoreTypeId(name:"void");
              end if;
              select any pe from instances of PE_PE where
                                                   selected.Element_ID == dt_id;
              select one ret_dt related by pe->S_DT[R8001]; 

          end if;
        end if;
      end if;
    end if;
  end if;

  if ( param.b1_expr1_id == GD::NULL_UNIQUE_ID() )
    if ( ret_dt.Name != "void" )
      ERR::reportParseError( msg: "Return value required by " + act.Type,
                                                   token: param.a1_rule_token );
    else
      act.ReturnFound = true;
      stmt_id =  ::statement_create();
      select any stmt from instances of ACT_SMT where
                                               selected.Statement_ID == stmt_id;
      create object instance ret of ACT_RET;
      relate stmt to ret across R603;
      return stmt.Statement_ID;
    end if;
  else
    select any val from instances of V_VAL where
                                         selected.Value_ID == param.b1_expr1_id;
    if ( ret_dt.Name == "void" )
      if ( not_empty val )
        val.dispose();
      end if;
      ERR::reportParseError( msg: "Return value not required by " + act.Type,
                                                   token: param.a1_rule_token );
    else
      select one val_dt related by val->S_DT[R820];
      dt = GD::NULL_UNIQUE_ID();
      if ( not_empty val_dt )
        dt = ::data_types_compatible( dt1: ret_dt.DT_ID,
                                              dt2: val_dt.DT_ID, op: "assign" );
      end if;
      if ( dt == GD::NULL_UNIQUE_ID() )
        if ( not_empty val )
          val.dispose();
        end if;
        ERR::reportParseError( msg: "Invalid data type returned for " +
                                         act.Type, token: param.a1_rule_token );
      else
        arrayErrorEncountered = false;
        if (not_empty dims)
          returnDimensions = cardinality dims;
          valDimensions = val.getDimensions();
          if (returnDimensions != valDimensions)
            arrayErrorEncountered = true;
            val.dispose();
            ERR::reportParseError(msg:
                        "Return type has incompatible array depth.",
                                                    token: param.a1_rule_token);
          else
            for each dim in dims
              valueDimSize = val.getArrayLength(dimension:dim.dimensionCount);
              if (valueDimSize != -1  and dim.elementCount != valueDimSize)
                // array size is fixed and does not match the expected size
                arrayErrorEncountered = true;
                val.dispose();
                dimStrValue = GD::int_to_string(value:dim.dimensionCount);
                ERR::reportParseError(msg:
                 "Return type has an incompatible array length for dimension " +
                                                             dimStrValue + ".",
                                                    token: param.a1_rule_token);
                break;
              end if;
            end for;
          end if;
        end if;
        if (not arrayErrorEncountered)
          act.ReturnFound = true;
          stmt_id =  ::statement_create();
          select any stmt from instances of ACT_SMT where
                                               selected.Statement_ID == stmt_id;
          create object instance ret of ACT_RET;
          relate stmt to ret across R603;
          relate ret to val across R668;
          return stmt.Statement_ID;
        end if;
      end if;
    end if;
  end if;
end if;
return param.a4_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("35802d48-9534-466a-a48c-c9957d086d71",
	"2f66f8b3-acdc-46eb-857f-5859714e89b4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("847adacf-f6a5-47d0-937c-cad1c4096b10",
	"2f66f8b3-acdc-46eb-857f-5859714e89b4",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"35802d48-9534-466a-a48c-c9957d086d71",
	'');
INSERT INTO S_SPARM
	VALUES ("2c67890e-46d3-4ee4-8bfd-a1609a27d115",
	"2f66f8b3-acdc-46eb-857f-5859714e89b4",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"847adacf-f6a5-47d0-937c-cad1c4096b10",
	'');
INSERT INTO S_SPARM
	VALUES ("95cbb023-ff48-4034-8fd8-400b5c7c90ba",
	"2f66f8b3-acdc-46eb-857f-5859714e89b4",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2c67890e-46d3-4ee4-8bfd-a1609a27d115",
	'');
INSERT INTO S_SPARM
	VALUES ("8021fe13-b4c9-4311-a86c-ed79996861bf",
	"2f66f8b3-acdc-46eb-857f-5859714e89b4",
	'b1_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"95cbb023-ff48-4034-8fd8-400b5c7c90ba",
	'');
INSERT INTO PE_PE
	VALUES ("2f66f8b3-acdc-46eb-857f-5859714e89b4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b96baddf-dbd7-4d08-b525-4ae8c84b8992",
	"00000000-0000-0000-0000-000000000000",
	'Select_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("04ebf7a1-2c2b-4055-80ca-0d20422e2041",
	"b96baddf-dbd7-4d08-b525-4ae8c84b8992",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b96baddf-dbd7-4d08-b525-4ae8c84b8992",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3f93cf15-b5a7-4372-a062-cc173eda5302",
	"00000000-0000-0000-0000-000000000000",
	'Object_spec_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("121c7fe7-0f41-47b4-b101-bd13e0d7f2e5",
	"3f93cf15-b5a7-4372-a062-cc173eda5302",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2e85d915-cb81-4464-8986-dceddd702923",
	"3f93cf15-b5a7-4372-a062-cc173eda5302",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"121c7fe7-0f41-47b4-b101-bd13e0d7f2e5",
	'');
INSERT INTO S_SPARM
	VALUES ("fbc86aa7-0178-435d-bbcc-02a84e65fbad",
	"3f93cf15-b5a7-4372-a062-cc173eda5302",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2e85d915-cb81-4464-8986-dceddd702923",
	'');
INSERT INTO S_SPARM
	VALUES ("636ec9d6-657e-420c-aa86-eed6c78e9aac",
	"3f93cf15-b5a7-4372-a062-cc173eda5302",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fbc86aa7-0178-435d-bbcc-02a84e65fbad",
	'');
INSERT INTO S_SPARM
	VALUES ("0b103a11-83cd-4289-9807-08cbab4629d5",
	"3f93cf15-b5a7-4372-a062-cc173eda5302",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"636ec9d6-657e-420c-aa86-eed6c78e9aac",
	'');
INSERT INTO PE_PE
	VALUES ("3f93cf15-b5a7-4372-a062-cc173eda5302",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1b94f6af-90c8-4864-b4fa-113e3457460d",
	"00000000-0000-0000-0000-000000000000",
	'Select_statement_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b1_local_variable1_id != GD::NULL_UNIQUE_ID() )
  if ( param.b2_object_spec2_id == GD::NULL_UNIQUE_ID() )
    ::clear_select( var_id: param.b1_local_variable1_id );
    // object_spec error - return zero
    return GD::NULL_UNIQUE_ID();
  end if;
  // one
  select any stmt from instances of ACT_SMT 
          where (selected.Statement_ID ==   param.b2_object_spec2_id );
  select one fio related by stmt->ACT_FIO[R603];
  select one fiw related by stmt->ACT_FIW[R603];
  if ( not_empty fio or not_empty fiw )
    ::clear_select( var_id: param.b1_local_variable1_id );
    if ( not_empty fiw )
      select one val related by fiw->V_VAL[R610];
      val.dispose();
    end if;
    stmt.dispose();
    ERR::reportParseError( msg: "SELECT ONE cannot be used with FROM INSTANCES OF. Use SELECT ANY or SELECT MANY",
        token: param.a1_rule_token );
  else
    return ::process_related_by( a1_local_var: param.b1_local_variable1_id, a2_stmt_id: param.b2_object_spec2_id, 
        a3_mult:"one", a4_rule_token: param.a1_rule_token );
  end if;
elif ( param.b3_local_variable3_id != GD::NULL_UNIQUE_ID() )
  if ( param.b4_object_spec4_id == GD::NULL_UNIQUE_ID() )
    // object_spec error - return zero
    ::clear_select(  var_id: param.b3_local_variable3_id );
    return GD::NULL_UNIQUE_ID();
  end if;
  // any
  select any stmt from instances of ACT_SMT 
          where (selected.Statement_ID ==   param.b4_object_spec4_id );
  select one fio related by stmt->ACT_FIO[R603];
  if ( not_empty fio )
    return ::process_from_instances( a1_local_var: param.b3_local_variable3_id, a2_stmt_id: param.b4_object_spec4_id, 
        a3_mult:"any", a4_rule_token: param.a1_rule_token, a5_has_where: false );
  else
    select one fiw related by stmt->ACT_FIW[R603];
    if ( not_empty fiw )
      return ::process_from_instances( a1_local_var: param.b3_local_variable3_id, a2_stmt_id: param.b4_object_spec4_id, 
        a3_mult:"any", a4_rule_token: param.a1_rule_token, a5_has_where: true );
    else
      return ::process_related_by( a1_local_var: param.b3_local_variable3_id, a2_stmt_id: param.b4_object_spec4_id, 
          a3_mult:"any", a4_rule_token: param.a1_rule_token );
    end if;
  end if;
elif ( param.b5_local_variable5_id != GD::NULL_UNIQUE_ID() )
  if ( param.b6_object_spec6_id == GD::NULL_UNIQUE_ID() )
    ::clear_select(var_id: param.b1_local_variable1_id );
    // object_spec error - return zero
    return GD::NULL_UNIQUE_ID();
  end if;
  // many
  select any stmt from instances of ACT_SMT 
          where (selected.Statement_ID ==   param.b6_object_spec6_id );
  select one fio related by stmt->ACT_FIO[R603];
  if ( not_empty fio )
    return ::process_from_instances( a1_local_var: param.b5_local_variable5_id, a2_stmt_id: param.b6_object_spec6_id, 
        a3_mult:"many", a4_rule_token: param.a1_rule_token, a5_has_where: false );
  else
    select one fiw related by stmt->ACT_FIW[R603];
    if ( not_empty fiw )
      return ::process_from_instances( a1_local_var: param.b5_local_variable5_id, a2_stmt_id: param.b6_object_spec6_id, 
        a3_mult:"many", a4_rule_token: param.a1_rule_token, a5_has_where: true );
    else
      return ::process_related_by( a1_local_var: param.b5_local_variable5_id, a2_stmt_id: param.b6_object_spec6_id, 
          a3_mult:"many", a4_rule_token: param.a1_rule_token );
    end if;
  end if;
else
  // internal error -- should have been caught as a syntax error
  return GD::NULL_UNIQUE_ID();
end if;
return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("36c5f91d-4666-4335-80a6-476d21fd2bbf",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3b320375-9944-45f8-8d34-be06f6f66301",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"36c5f91d-4666-4335-80a6-476d21fd2bbf",
	'');
INSERT INTO S_SPARM
	VALUES ("9dcec34b-ac08-4349-864f-b62cc49562c6",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3b320375-9944-45f8-8d34-be06f6f66301",
	'');
INSERT INTO S_SPARM
	VALUES ("484b67cb-2ec3-4e01-88aa-bbf62c517730",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9dcec34b-ac08-4349-864f-b62cc49562c6",
	'');
INSERT INTO S_SPARM
	VALUES ("2c56584b-affc-4937-80cb-3a3003932ec9",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"484b67cb-2ec3-4e01-88aa-bbf62c517730",
	'');
INSERT INTO S_SPARM
	VALUES ("18197ac1-6f03-488c-8966-d1ccd701fcb0",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'b2_object_spec2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2c56584b-affc-4937-80cb-3a3003932ec9",
	'');
INSERT INTO S_SPARM
	VALUES ("90c5764c-df91-4b60-80e2-70f3e8121857",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'b3_local_variable3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"18197ac1-6f03-488c-8966-d1ccd701fcb0",
	'');
INSERT INTO S_SPARM
	VALUES ("d5f964db-82b0-460a-8272-bc8a1a1ed21e",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'b4_object_spec4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"90c5764c-df91-4b60-80e2-70f3e8121857",
	'');
INSERT INTO S_SPARM
	VALUES ("03e71ce9-f3a8-4416-8bbd-4cf385ec5562",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'b5_local_variable5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d5f964db-82b0-460a-8272-bc8a1a1ed21e",
	'');
INSERT INTO S_SPARM
	VALUES ("f0223dd5-f2ff-47cd-8d3a-af23ddad2b81",
	"1b94f6af-90c8-4864-b4fa-113e3457460d",
	'b6_object_spec6_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"03e71ce9-f3a8-4416-8bbd-4cf385ec5562",
	'');
INSERT INTO PE_PE
	VALUES ("1b94f6af-90c8-4864-b4fa-113e3457460d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d85a4a42-515c-4fce-aa05-5a3cd8adcf65",
	"00000000-0000-0000-0000-000000000000",
	'Transform_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::statement_create();


',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3d01610e-8f53-4096-93f2-46e1bcb775af",
	"d85a4a42-515c-4fce-aa05-5a3cd8adcf65",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d85a4a42-515c-4fce-aa05-5a3cd8adcf65",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	"00000000-0000-0000-0000-000000000000",
	'Transform_invocation_validate',
	'ParserValidateFunction: TRUE',
	'if ( param.a6_current_rule_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL where selected.Value_ID == param.a6_current_rule_id;
  if ( not_empty val )
    select one sdt related by val->S_DT[R820];
    if ( empty sdt )
      ERR::reportParseError( msg: "Value has unknown data type",
           token: param.a1_rule_token );
    else
      select one op related by val->V_TRV[R801]->O_TFR[R829];
      if ( not_empty op )
        return ::is_valid_invocation( a1_type: sdt.Name, a2_isRval: param.a2_isRval, a3_id: param.a6_current_rule_id,
            a4_name: "Transform ->"  + op.Name, a5_rule_token: param.a1_rule_token );
      end if;
    end if;
  end if;
end if;

return GD::NULL_UNIQUE_ID();


',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c330e77a-2ec6-46a9-b9f6-80124c04d929",
	"4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("79a52f65-4e24-4d7d-a794-2a91299af84a",
	"4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"c330e77a-2ec6-46a9-b9f6-80124c04d929",
	'');
INSERT INTO S_SPARM
	VALUES ("ac5883cf-ab66-4a80-86a0-c32688c46c8f",
	"4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"79a52f65-4e24-4d7d-a794-2a91299af84a",
	'');
INSERT INTO S_SPARM
	VALUES ("b27cfe74-87c5-4e6d-a1c0-5a6124a0561e",
	"4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ac5883cf-ab66-4a80-86a0-c32688c46c8f",
	'');
INSERT INTO S_SPARM
	VALUES ("8e320b55-46ca-4103-a24b-14dfe14e5cd8",
	"4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b27cfe74-87c5-4e6d-a1c0-5a6124a0561e",
	'');
INSERT INTO S_SPARM
	VALUES ("de653de7-5aac-48f6-9087-7cba6a97dec9",
	"4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8e320b55-46ca-4103-a24b-14dfe14e5cd8",
	'');
INSERT INTO PE_PE
	VALUES ("4e0ed5a3-4dd9-4014-9363-925ca3e283c1",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("300ab568-87a1-4c52-abfe-74dbb28e3906",
	"00000000-0000-0000-0000-000000000000",
	'Transform_statement_end',
	'ParserValidateFunction: TRUE',
	'// ::Transform_statement_end()
select any val from instances of V_VAL 
       where ( selected.Value_ID == param.b4_transform_invocation4_id );
if ( empty val )
  select any val from instances of V_VAL 
         where ( selected.Value_ID == param.b5_transform_invocation5_id );
end if;

if ( empty val )
  // there was a problem with parsing the value
  select any stmt from instances of ACT_SMT 
        where selected.Statement_ID == param.a3_rule_begin_id;
  stmt.dispose();
  return GD::NULL_UNIQUE_ID();
end if;

if (  param.b5_transform_invocation5_id != GD::NULL_UNIQUE_ID() )
  // the statement (returning void) variation
  select any stmt from instances of ACT_SMT 
        where selected.Statement_ID == param.a3_rule_begin_id;

  create object instance atfr of ACT_TFM;
  relate stmt to atfr across R603;
  select one trv related by val->V_TRV[R801];
  select one op related by trv->O_TFR[R829];
  select many parm_set related by trv->V_PAR[R811];
  unrelate op from trv across R829;
  relate op to atfr across R673;

	// store the textual position of the operation name
	atfr.operationNameLineNumber = val.LineNumber;
	atfr.operationNameColumn = val.StartPosition;

	// if the operation is class-based
	if (op.Instance_Based == Scope::Class)
		// store the textual position of the class key-letters; use the 
		// value that is in the operation-value instance that was created 
		// when the operation''''s named was parsed, rather than the value in the 
		// current block, since the latter may have been overwritten
		// during the parsing of the operation''''s parameters 
		atfr.modelClassKeyLettersLineNumber = trv.modelClassKeyLettersLineNumber;
		atfr.modelClassKeyLettersColumn = trv.modelClassKeyLettersColumn;
	end if;

  for each parm in parm_set
    unrelate parm from trv across R811;
    relate parm to atfr across R627;
  end for;

  val.dispose();

  return stmt.Statement_ID;
elif (  param.b2_member_id != GD::NULL_UNIQUE_ID() )
  return ::Assignment_expr_end( a1_rule_token: param.a1_rule_token, 
      a2_upper_rule_id: param.a3_rule_begin_id,
      a3_rule_begin_id: param.a3_rule_begin_id,
      a4_rule_id: param.a4_rule_id,
      b1_member_id: param.b2_member_id,
      b2_expr2_id: param.b4_transform_invocation4_id,
      b3_param_data_access3_id: GD::NULL_UNIQUE_ID(),
      b4_expr4_id: GD::NULL_UNIQUE_ID()
  );
elif (  param.b3_param_data_access3_id != GD::NULL_UNIQUE_ID() )
  // this creates a statement with an AssignToParameter subtype
  return ::Assignment_expr_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule_id: param.a3_rule_begin_id,
        a3_rule_begin_id: param.a3_rule_begin_id,
        a4_rule_id: param.a4_rule_id,
        b1_member_id: GD::NULL_UNIQUE_ID(),
        b2_expr2_id: GD::NULL_UNIQUE_ID(),
        b3_param_data_access3_id: param.b3_param_data_access3_id,
        b4_expr4_id: param.b4_transform_invocation4_id
  );
end if;

return GD::NULL_UNIQUE_ID();

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("112a3ed1-f923-4ca0-b0fc-089e14257773",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("817bfbb3-9b52-4de0-88db-95bc09339cf2",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"112a3ed1-f923-4ca0-b0fc-089e14257773",
	'');
INSERT INTO S_SPARM
	VALUES ("5391dfa5-f6c3-42b9-9974-8cc38ff68e51",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"817bfbb3-9b52-4de0-88db-95bc09339cf2",
	'');
INSERT INTO S_SPARM
	VALUES ("5698a8d6-9867-4bc6-b1af-370866429b7d",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5391dfa5-f6c3-42b9-9974-8cc38ff68e51",
	'');
INSERT INTO S_SPARM
	VALUES ("29728f9a-fbf7-4ff4-999c-9b62f83b9071",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'b2_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5698a8d6-9867-4bc6-b1af-370866429b7d",
	'');
INSERT INTO S_SPARM
	VALUES ("c493ee7b-93df-4086-b001-237cce34153f",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'b3_param_data_access3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"29728f9a-fbf7-4ff4-999c-9b62f83b9071",
	'');
INSERT INTO S_SPARM
	VALUES ("fb3b8545-5649-4964-9acc-a91e8f05af3d",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'b4_transform_invocation4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c493ee7b-93df-4086-b001-237cce34153f",
	'');
INSERT INTO S_SPARM
	VALUES ("1d7c03b2-a97a-4417-8ccf-d197dad51d38",
	"300ab568-87a1-4c52-abfe-74dbb28e3906",
	'b5_transform_invocation5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fb3b8545-5649-4964-9acc-a91e8f05af3d",
	'');
INSERT INTO PE_PE
	VALUES ("300ab568-87a1-4c52-abfe-74dbb28e3906",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2a2f8619-808d-448a-9087-350b8553ecca",
	"00000000-0000-0000-0000-000000000000",
	'Function_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("48c36b21-8b6f-4d5c-91fc-376719852100",
	"2a2f8619-808d-448a-9087-350b8553ecca",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2a2f8619-808d-448a-9087-350b8553ecca",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("095a33b8-6f0f-47c6-a0ad-58fd614af998",
	"00000000-0000-0000-0000-000000000000",
	'Function_invocation_validate',
	'ParserValidateFunction: TRUE',
	'if ( param.a6_current_rule_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL where selected.Value_ID == param.a6_current_rule_id;
  if ( not_empty val )
    select one sdt related by val->S_DT[R820];
    if ( empty sdt )
      ERR::reportParseError( msg: "Value has unknown data type",
           token: param.a1_rule_token );
    else
      select one sync related by val->V_FNV[R801]->S_SYNC[R827];
      if ( not_empty sync )
        return ::is_valid_invocation( a1_type: sdt.Name, a2_isRval: param.a2_isRval, a3_id: param.a6_current_rule_id,
           a4_name: "Function ->"  + sync.Name, a5_rule_token: param.a1_rule_token );
      end if;
    end if;
  end if;
end if;

return param.a6_current_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c9fb6784-05c9-4097-810f-9b81e396db85",
	"095a33b8-6f0f-47c6-a0ad-58fd614af998",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b6fe0060-a17a-4404-b89d-346e20aa1fc0",
	"095a33b8-6f0f-47c6-a0ad-58fd614af998",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"c9fb6784-05c9-4097-810f-9b81e396db85",
	'');
INSERT INTO S_SPARM
	VALUES ("0a3b0000-3978-4add-b305-c3a4356d618e",
	"095a33b8-6f0f-47c6-a0ad-58fd614af998",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b6fe0060-a17a-4404-b89d-346e20aa1fc0",
	'');
INSERT INTO S_SPARM
	VALUES ("47ca4b5a-9d5c-4af8-9cd1-1c5a118f3001",
	"095a33b8-6f0f-47c6-a0ad-58fd614af998",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0a3b0000-3978-4add-b305-c3a4356d618e",
	'');
INSERT INTO S_SPARM
	VALUES ("42162f51-bc37-4006-8f76-d87ca2c17c39",
	"095a33b8-6f0f-47c6-a0ad-58fd614af998",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"47ca4b5a-9d5c-4af8-9cd1-1c5a118f3001",
	'');
INSERT INTO S_SPARM
	VALUES ("1152dbe3-5e8a-44f8-a6ee-1b9e20df4198",
	"095a33b8-6f0f-47c6-a0ad-58fd614af998",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"42162f51-bc37-4006-8f76-d87ca2c17c39",
	'');
INSERT INTO PE_PE
	VALUES ("095a33b8-6f0f-47c6-a0ad-58fd614af998",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	"00000000-0000-0000-0000-000000000000",
	'Function_statement_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b1_function_invocation1_id != GD::NULL_UNIQUE_ID() )
  select any V_FNV from instances of V_FNV 
     where ( selected.Value_ID == param.b1_function_invocation1_id );

  stmt_id =  ::statement_create();
  select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;

  create object instance act_fnc of ACT_FNC;
  relate act_fnc to stmt across R603;

  select one sync related by V_FNV->S_SYNC[R827];
  select many parm_set related by V_FNV->V_PAR[R817];

  unrelate sync from V_FNV across R827;
  relate sync to act_fnc across R675;

	// store the textual position of the function name
	select one val related by V_FNV->V_VAL[R801];
	act_fnc.functionNameLineNumber = val.LineNumber;
	act_fnc.functionNameColumn = val.StartPosition;

  for each parm in parm_set
    unrelate parm from V_FNV across R817;
    relate parm to act_fnc across R669;
  end for;

  val.dispose();

  return stmt.Statement_ID;
end if;

return GD::NULL_UNIQUE_ID();









































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("be7b7786-caf4-4f28-b019-c618a77c7b2f",
	"3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9bd26835-00dc-4f67-8b83-b1db1ee711f5",
	"3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"be7b7786-caf4-4f28-b019-c618a77c7b2f",
	'');
INSERT INTO S_SPARM
	VALUES ("e548215b-3ffb-471e-9eb5-ba1d1e796ddd",
	"3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9bd26835-00dc-4f67-8b83-b1db1ee711f5",
	'');
INSERT INTO S_SPARM
	VALUES ("16939a02-d7f5-4e53-af17-55d37d310b59",
	"3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e548215b-3ffb-471e-9eb5-ba1d1e796ddd",
	'');
INSERT INTO S_SPARM
	VALUES ("8deca36f-1cc9-434f-b13c-fc8992ff6383",
	"3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	'b1_function_invocation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"16939a02-d7f5-4e53-af17-55d37d310b59",
	'');
INSERT INTO PE_PE
	VALUES ("3bf9253c-3562-48ef-a872-24e1a6b26c6f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("134f52d3-b210-4b5d-871e-b6f2ef259316",
	"00000000-0000-0000-0000-000000000000",
	'Unrelate_statement_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("23e9bcc2-a29f-4cd9-b2f0-bff24015c3e4",
	"134f52d3-b210-4b5d-871e-b6f2ef259316",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("134f52d3-b210-4b5d-871e-b6f2ef259316",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("42e24bfb-7e67-4e45-9e22-33e497d6f421",
	"00000000-0000-0000-0000-000000000000",
	'Unrelate_statement_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b5_assoc_obj_inst_ref_var5_id == GD::NULL_UNIQUE_ID() )
  select any r_rel from instances of R_REL where ( selected.Rel_ID == param.b3_relationship3_id );
  select one r_assoc related by r_rel->R_ASSOC[R206];
  if ( not_empty r_assoc )
     ERR::reportParseError( msg: 
       "Need USING clause for link classes in association ->R" + 
            GD::int_to_string(value: r_rel.Numb) + "<-",
            token: param.a1_rule_token );
  else
    select any one_var from instances of V_VAR 
        where ( selected.Var_ID == param.b1_inst_ref_var1_id );
    select any other_var from instances of V_VAR 
        where ( selected.Var_ID == param.b2_inst_ref_var2_id );
    select one left_obj related by one_var->V_INT[R814]->O_OBJ[R818];
    select one right_obj related by other_var->V_INT[R814]->O_OBJ[R818];
    if (empty left_obj)
	  ERR::reportParseError( msg:  "Variable ->" + one_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
    elif (empty right_obj)
      ERR::reportParseError( msg:  "Variable ->" + other_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );  
    else 
      rel_mult = ::is_valid_relationship(a1_left: left_obj.Obj_ID, a2_right: right_obj.Obj_ID,
        a3_rel: param.b3_relationship3_id, a4_phrase: param.b4_phrase4_id, a5_rule_token: param.a1_rule_token,
        a6_chain_start_val: GD::NULL_UNIQUE_ID(), a7_chain_id: GD::NULL_UNIQUE_ID()  );
      if ( rel_mult != Multiplicity::Unknown )
        stmt_id =  ::statement_create();
        select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
        create object instance rel of ACT_UNR;
        relate stmt to rel across R603;

        current_scope = ::get_current_scope();
        select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);

		// store the textual position of the association number
		rel.associationNumberLineNumber = block.currentAssociationNumberLineNumber;
		rel.associationNumberColumn = block.currentAssociationNumberColumn;

        if ( param.b4_phrase4_id == GD::NULL_UNIQUE_ID() )
          rel.relationship_phrase = "";
        else
          rel.relationship_phrase = block.TempBuffer;
            
			// store the textual position of the association phrase
			rel.associationPhraseLineNumber = block.currentAssociationPhraseLineNumber;
			rel.associationPhraseColumn = block.currentAssociationPhraseColumn;
        end if;
        relate rel to one_var across R620;
        relate rel to other_var across R621;
        select any r_rel from instances of R_REL where ( selected.Rel_ID == param.b3_relationship3_id ); 
        relate rel to r_rel across R655;
        return stmt.Statement_ID;
      else
        // association error -- fall through
      end if;
    end if;
  end if;
else
  select any one_var from instances of V_VAR 
        where ( selected.Var_ID == param.b1_inst_ref_var1_id );
  select any other_var from instances of V_VAR 
        where ( selected.Var_ID == param.b2_inst_ref_var2_id );
  select any assoc_var from instances of V_VAR 
        where ( selected.Var_ID == param.b5_assoc_obj_inst_ref_var5_id );
  select one left_obj related by one_var->V_INT[R814]->O_OBJ[R818];
  select one right_obj related by other_var->V_INT[R814]->O_OBJ[R818];
  select one assoc_obj related by assoc_var->V_INT[R814]->O_OBJ[R818];
  if (empty left_obj)
	ERR::reportParseError( msg:  "Variable ->" + one_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
  elif (empty right_obj)
    ERR::reportParseError( msg:  "Variable ->" + other_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );  
  elif (empty assoc_obj)
    ERR::reportParseError( msg:  "Variable ->" + assoc_var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );  
  else 
    if ( ::is_valid_assoc_relationship(a1_left: left_obj.Obj_ID, a2_right: right_obj.Obj_ID,
        a3_assoc: assoc_obj.Obj_ID,
        a4_rel: param.b3_relationship3_id, a5_phrase: param.b4_phrase4_id, a6_rule_token: param.a1_rule_token,
        a7_chain_start_val: GD::NULL_UNIQUE_ID(), a8_chain_id: GD::NULL_UNIQUE_ID() ) )
        
      current_scope = ::get_current_scope();
      select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
      if ( not_empty blk )
        stmt_id =  ::statement_create();
        select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
        create object instance rel of ACT_URU;
        relate stmt to rel across R603;

        current_scope = ::get_current_scope();
        select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);

		// store the textual position of the association number
		rel.associationNumberLineNumber = block.currentAssociationNumberLineNumber;
		rel.associationNumberColumn = block.currentAssociationNumberColumn;

        if ( param.b4_phrase4_id == GD::NULL_UNIQUE_ID() )
          rel.relationship_phrase = "";
        else
          rel.relationship_phrase = block.TempBuffer;
            
			// store the textual position of the association phrase
			rel.associationPhraseLineNumber = block.currentAssociationPhraseLineNumber;
			rel.associationPhraseColumn = block.currentAssociationPhraseColumn;
        end if;
        select any one_var from instances of V_VAR where ( selected.Var_ID == param.b1_inst_ref_var1_id );
        relate rel to one_var across R622;
        select any other_var from instances of V_VAR where ( selected.Var_ID == param.b2_inst_ref_var2_id );
        relate rel to other_var across R623;
        select any assoc_var from instances of V_VAR where ( selected.Var_ID == param.b5_assoc_obj_inst_ref_var5_id );
        relate rel to assoc_var across R624;
        select any r_rel from instances of R_REL where ( selected.Rel_ID == param.b3_relationship3_id );
        relate rel to r_rel across R656;
        return stmt.Statement_ID;
      end if;
    end if;
  end if;
end if;

return param.a4_rule_id;
























































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f54b44d7-7a68-4e32-a41b-c85704e807c6",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("dda38911-869d-4281-b66e-1a994ebc04ae",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f54b44d7-7a68-4e32-a41b-c85704e807c6",
	'');
INSERT INTO S_SPARM
	VALUES ("2d87bc5b-e9a7-49b6-aec6-025029306715",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"dda38911-869d-4281-b66e-1a994ebc04ae",
	'');
INSERT INTO S_SPARM
	VALUES ("b2c4188f-ebb4-4ad2-abe7-07a5998fec78",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2d87bc5b-e9a7-49b6-aec6-025029306715",
	'');
INSERT INTO S_SPARM
	VALUES ("37a4b819-d198-4122-8d1c-221441954199",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'b1_inst_ref_var1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b2c4188f-ebb4-4ad2-abe7-07a5998fec78",
	'');
INSERT INTO S_SPARM
	VALUES ("51fe86fc-02a4-43a1-9753-43f15db60304",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'b2_inst_ref_var2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"37a4b819-d198-4122-8d1c-221441954199",
	'');
INSERT INTO S_SPARM
	VALUES ("1e217397-189b-4477-9c6e-728dfa158d22",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'b3_relationship3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"51fe86fc-02a4-43a1-9753-43f15db60304",
	'');
INSERT INTO S_SPARM
	VALUES ("ce6994e3-269a-47dd-919d-9dd1bd4f3d46",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'b4_phrase4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1e217397-189b-4477-9c6e-728dfa158d22",
	'');
INSERT INTO S_SPARM
	VALUES ("855fbf35-2a13-4ed6-83ca-36ffc3403f3f",
	"42e24bfb-7e67-4e45-9e22-33e497d6f421",
	'b5_assoc_obj_inst_ref_var5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ce6994e3-269a-47dd-919d-9dd1bd4f3d46",
	'');
INSERT INTO PE_PE
	VALUES ("42e24bfb-7e67-4e45-9e22-33e497d6f421",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c7d2d3ab-4ed5-486f-b944-4bf77e5a60ed",
	"00000000-0000-0000-0000-000000000000",
	'While_statement_start',
	'ParserValidateFunction: TRUE',
	'stmt_id =  ::statement_create();
select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;

create object instance w of ACT_WHL;
relate w to stmt across R603;

select one act related by stmt->ACT_BLK[R602]->ACT_ACT[R612];
act.entered_loop();

return stmt.Statement_ID;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7ac95f85-6ca4-4185-86c5-052ec81644a5",
	"c7d2d3ab-4ed5-486f-b944-4bf77e5a60ed",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c7d2d3ab-4ed5-486f-b944-4bf77e5a60ed",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	"00000000-0000-0000-0000-000000000000",
	'While_statement_end',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one act related by blk->ACT_ACT[R612];
act.exitted_loop();

select any wstmt from instances of ACT_WHL 
          where ( selected.Statement_ID == param.a3_rule_begin_id );
if ( empty wstmt )
  select any val from instances of V_VAL where ( selected.Value_ID == param.b1_expr1_id );
  if ( not_empty val  )
    val.dispose();
  end if;
     ERR::reportParseError( msg: "While statement not found",
        token: param.a1_rule_token );
else
  select one stmt related by wstmt->ACT_SMT[R603];
  select any val from instances of V_VAL where ( selected.Value_ID == param.b1_expr1_id );
  if ( empty val  )
    stmt.dispose();
    ERR::reportParseError( msg: "While expression not found",
        token: param.a1_rule_token );
  else
    select one val_dt related by val->S_DT[R820];
    if ( empty val_dt )
      stmt.dispose();
      val.dispose();
       ERR::reportParseError( msg: "While expression unknown data type",
          token: param.a1_rule_token );
    elif ( val_dt.Name != "boolean" )
      stmt.dispose();
      val.dispose();
       ERR::reportParseError( msg: "While expression data type is not boolean",
          token: param.a1_rule_token );
    else
      relate wstmt to val across R626;
    end if;
  end if;
end if;
return param.a3_rule_begin_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bea8c299-0687-42c5-a7f6-54b277ee071f",
	"183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e44882cf-8a82-4c78-9ccb-851ab1ffe3e3",
	"183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bea8c299-0687-42c5-a7f6-54b277ee071f",
	'');
INSERT INTO S_SPARM
	VALUES ("d80e9d3b-c5e9-4a31-9b28-45d835ad041e",
	"183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e44882cf-8a82-4c78-9ccb-851ab1ffe3e3",
	'');
INSERT INTO S_SPARM
	VALUES ("7a5f5a9f-a614-4f5a-b1d8-601cf8b519ba",
	"183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d80e9d3b-c5e9-4a31-9b28-45d835ad041e",
	'');
INSERT INTO S_SPARM
	VALUES ("f9a98160-633b-4078-be1a-ee79e2114a48",
	"183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	'b1_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7a5f5a9f-a614-4f5a-b1d8-601cf8b519ba",
	'');
INSERT INTO S_SPARM
	VALUES ("965fe3a7-672c-4547-a72d-2e0ccb585320",
	"183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	'b2_block2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f9a98160-633b-4078-be1a-ee79e2114a48",
	'');
INSERT INTO PE_PE
	VALUES ("183abb24-d50c-4cab-884f-f7cb4d95ccb7",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3a181ced-50fa-476a-b58b-d399169bbb64",
	"00000000-0000-0000-0000-000000000000",
	'Assignment_expr_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6fefeb3f-bb3e-4f2c-bb57-e2aae8dfddb7",
	"3a181ced-50fa-476a-b58b-d399169bbb64",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3a181ced-50fa-476a-b58b-d399169bbb64",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("53f94956-d62c-4198-957b-d6879471e6fe",
	"00000000-0000-0000-0000-000000000000",
	'Assignment_expr_end',
	'ParserValidateFunction: TRUE',
	'// ::Assignment_expr_end()
select any rval from instances of V_VAL where
                                         selected.Value_ID == param.b2_expr2_id;
if ( empty rval )
  if ( param.b4_expr4_id != GD::NULL_UNIQUE_ID() )
    select any rval from instances of V_VAL where
                                         selected.Value_ID == param.b4_expr4_id;
  end if;
end if;
if ( empty rval )
  // there was a problem with parsing the r-value
  ::clear_assignment_data( stmt_id: param.a2_upper_rule_id,
                                                   var_id: param.b1_member_id );
  return param.a4_rule_id;
end if;

if (  param.b1_member_id != GD::NULL_UNIQUE_ID() )
  select any lval from instances of V_VAL where
                                        selected.Value_ID == param.b1_member_id;
  if empty lval
    // there was a problem with parsing the l-value
    ::clear_assignment_data( stmt_id: param.a2_upper_rule_id,
                                                   var_id: param.b1_member_id );
    return param.a4_rule_id;
  end if;
  rval_end_ID = ::get_value_chain_end(start_value_ID:rval.Value_ID);
  select any rval from instances of V_VAL where
                                               selected.Value_ID == rval_end_ID;
  lval_end_ID = ::get_value_chain_end(start_value_ID:lval.Value_ID);
  select any lval from instances of V_VAL where
                                               selected.Value_ID == lval_end_ID;
  assign_ok = true;
  if empty lval or empty rval
    // there was a problem with finding the values
    ::clear_assignment_data(stmt_id: param.a2_upper_rule_id,
                                                   var_id: param.b1_member_id );
    return param.a4_rule_id;
  end if;
  err_msg = "";
  select one tvl related by lval->V_TVL[R801];
  select one irf related by lval->V_IRF[R801];
  select one isrf related by lval->V_ISR[R801];
  select one avl related by lval->V_AVL[R801];
  select one scv related by lval->V_SCV[R801];
  // This may not be the right lvar, but if it isn''t,
  // the correct one will be selected in the logic below.
  select one lvar related by lval->V_TVL[R801]->V_VAR[R805];
  if not_empty tvl
    select one trn_dt related by lval->S_DT[R820];
    select one val_dt related by rval->S_DT[R820];
    if empty trn_dt
      // no data type - first assignment
      // make sure there wasnt a typing problem for the value
      if not_empty val_dt
        select one obj_thru_irdt related by val_dt->S_IRDT[R17]->O_OBJ[R123];
        obj_id = GD::NULL_UNIQUE_ID();
        if ( not_empty obj_thru_irdt )
          obj_id = obj_thru_irdt.Obj_ID;
        end if;
        // Set up the dimensions.
        numDimensions = rval.getDimensions();
		if (  numDimensions < 0 )
		  assign_ok = false;
		  if ( numDimensions == -1)
            err_msg = "The rvalue has one more dimension than the definition";
          else
            numDimensions = numDimensions * -1;
            err_msg = "The rvalue has " + GD::int_to_string(value:numDimensions) 
                        + " more dimensions than the definition";
          end if;
        elif ( rval.isElementCountValid() )
          // Its a simple data type. Hook up the data type to the correct
          relate lvar to val_dt across R848;
          relate lval to val_dt across R820;
          i = 0;
          while ( i < numDimensions )
            // Resize each dimension
            elementCount = rval.getArrayLength(dimension:i);
            lvar.resizeDimensions(dimension:i, elementCount:elementCount, numDimensions:numDimensions);
            i = i + 1;
          end while;
        else
          assign_ok = false;
          err_msg = "The rvalue contains an Array Index Out of Bounds.";
        end if;
          
        select one irdt related by val_dt->S_IRDT[R17];
        if ( not ::has_substring(p1_base: val_dt.Name, p2_str: "inst_ref<Timer>", p3_fromIndex: 0) and
             not ::has_substring(p1_base: val_dt.Name, p2_str: "inst_ref<Mapping>", p3_fromIndex: 0) and ((not_empty irdt and not irdt.isSet) or
             ::has_substring(p1_base: val_dt.Name, p2_str: "inst_ref<Object>", p3_fromIndex: 0)) )
          lvar.migrate_to_int();
          select one new_inst_var related by lvar->V_INT[R814];
          select one obj related by rval->V_IRF[R801]->V_VAR[R808]->
                                                       V_INT[R814]->O_OBJ[R818];
          if ( empty obj_thru_irdt )
            if ( not_empty obj )
              obj_id = obj.Obj_ID;
              relate new_inst_var to obj across R818;
            end if;
          else
            relate new_inst_var to obj_thru_irdt across R818;
          end if;
          
          // migrate the value to an instance reference
          unrelate lval from tvl across R801;
          unrelate lvar from tvl across R805;
          delete object instance tvl;
          create object instance int of V_IRF;
          relate lval to int across R801;
          relate int to lvar across R808;
          ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:lvar.Var_ID, p3_obj_id:obj_id);
        elif ( ::has_substring(p1_base: val_dt.Name, p2_str: "inst_ref_set<Object>", p3_fromIndex: 0) or (not_empty irdt and irdt.isSet))
          lvar.migrate_to_ins();
          select one new_inst_set_var related by lvar->V_INS[R814];
          select one obj related by rval->V_ISR[R801]->V_VAR[R809]->
                                                       V_INS[R814]->O_OBJ[R819];
          if ( empty obj_thru_irdt )
            if ( not_empty obj )
              obj_id = obj.Obj_ID;
              relate new_inst_set_var to obj across R819;
            end if;
          else
            relate new_inst_set_var to obj_thru_irdt across R819;
          end if;
          // migrate the value to an instance set reference
          unrelate lval from tvl across R801;
          unrelate lvar from tvl across R805;
          delete object instance tvl;
          create object instance ins of V_ISR;
          relate lval to ins across R801;
          relate ins to lvar across R809;
          ::connect_inst_ref_var_to_datatype(p1_is_set:true, p2_var_id:lvar.Var_ID, p3_obj_id:obj_id);
        else
			// Transient Variable
        end if;
      end if;
    elif not_empty trn_dt and not_empty val_dt
      // data type is known, check compatibility
      dt = ::data_types_compatible ( dt1: trn_dt.DT_ID,
                                              dt2: val_dt.DT_ID, op: "assign" );
      if ( dt == GD::NULL_UNIQUE_ID() )
        assign_ok = false;
        err_msg = "Variable ->"+ lvar.Name +
                                        "<- already exists as a different type";
      end if;
      if (lval.getDimensions() != rval.getDimensions())
        assign_ok = false;
        err_msg = "Variable ->"+ lvar.Name + "<- has incompatible array depth.";
      elif ( not lval.isElementCountValid() )
        assign_ok = false;
        err_msg = "Variable ->"+ lvar.Name + "<- contains an Array Index Out of Bounds.";
      elif ( not rval.isElementCountValid() )
        assign_ok = false;
        err_msg = "The rvalue contains an Array Index Out of Bounds.";
      end if;
      if (not lval.isElementCountCompatible(rVal:rval.Value_ID))
        assign_ok = false;
        err_msg = "Variable ->"+ lvar.Name + "<- has incompatible dimension size with the rvalue.";
      end if;
    else
      assign_ok = false;
      err_msg = "Unexpected token.";
    end if;
  elif not_empty irf
    select one lvar related by irf->V_VAR[R808];
    select one l_obj related by lvar->V_INT[R814]->O_OBJ[R818];
    select one val_dt related by rval->S_DT[R820];
    select one r_irdt related by val_dt->S_IRDT[R17];
    select one r_obj related by rval->V_IRF[R801]->V_VAR[R808]->
                                                       V_INT[R814]->O_OBJ[R818];
	if(not_empty r_irdt)
	  // if this is a true instance reference data type
	  // then select the right object related
	  select one r_obj related by r_irdt->O_OBJ[R123];
	end if;
    if ( empty r_obj )
      assign_ok = false;
      err_msg = "Variable ->" + lvar.Name +
                                        "<- already exists as a different type";
    elif ( l_obj.Obj_ID != r_obj.Obj_ID )
      assign_ok = false;
      err_msg = "Variable ->" + lvar.Name +
                                        "<- already exists as a different type";
    end if;
    
    select one left_val_dt related by lval->S_DT[R820];
                         
    if ( val_dt.Name != left_val_dt.Name )
      assign_ok = false;
      err_msg = "Variable ->" + lvar.Name +
                                        "<- already exists as a different type";
    end if;	
                 
    
  elif not_empty isrf
    select one lvar related by isrf->V_VAR[R809];
    select one l_obj related by lvar->V_INS[R814]->O_OBJ[R819];
    select one val_dt related by rval->S_DT[R820];
    select one r_irdt related by val_dt->S_IRDT[R17];
    select one r_obj related by rval->V_ISR[R801]->V_VAR[R809]->
                                                       V_INS[R814]->O_OBJ[R819];
	if(not_empty r_irdt and r_irdt.isSet)
	  select one r_obj related by r_irdt->O_OBJ[R123];
	end if;
    if ( empty r_obj )
      assign_ok = false;
      err_msg = "Variable ->" + lvar.Name +
                                        "<- already exists as a different type";
    elif ( l_obj.Obj_ID != r_obj.Obj_ID )
      assign_ok = false;
      err_msg = "Variable ->" + lvar.Name +
                                        "<- already exists as a different type";
    end if;
  elif not_empty avl
    select one attr related by avl->O_ATTR[R806];
    select one r_dt related by attr->S_DT[R114];
    if ( r_dt.Name == "state<State_Model>" and attr.Name == "current_state" )
      assign_ok = false;
      err_msg = "Cannot assign to the current_state attribute";
    else
      select one rval_dt related by rval->S_DT[R820];
      dt = GD::NULL_UNIQUE_ID();
      if not_empty r_dt and not_empty rval_dt
        dt = ::data_types_compatible ( dt1: r_dt.DT_ID, dt2: rval_dt.DT_ID,
                                    op: "assign" );
      end if;
      if ( dt == GD::NULL_UNIQUE_ID() )
        assign_ok = false;
        err_msg = "Attribute ->"+ attr.Name + "<- is a different type";
      elif ( r_dt.Name == "unique_id" )
        select any oida related by attr->O_OIDA[R105];
        if ( not_empty oida )
          assign_ok = false;
          err_msg = "Cannot assign to an attribute ->" + attr.Name +
                         "<- which is of type unique_id and also an identifier";
        end if;
      else
        select one ref_attr related by attr->O_RATTR[R106];
        if ( not_empty ref_attr )
          assign_ok = false;
          err_msg = "Cannot assign to a referential attribute ->" +
                         attr.Name + "<-";
        else
          select one db_attr related by attr->O_BATTR[R106]->O_DBATTR[R107];
          if ( not_empty db_attr )
            // are we parsing an MDA?
            scope_ID = ::get_current_context();
            select any body from instances of ACT_ACT where
                                                 selected.Action_ID == scope_ID;
            select one dab related by body->ACT_DAB[R698];
            if ( empty dab )
              if ( db_attr.Suc_Pars != ParseStatus::doNotParse )
                assign_ok = false;
                err_msg = "Cannot assign to a derived attribute ->" +
                                                               attr.Name + "<-";
               // else parse on apply not set, so let them treat it like a
               // normal attribute
             end if;
            else
              select one mdattr related by dab->O_DBATTR[R693]->
                                                    O_BATTR[R107]->O_ATTR[R106];
              if ( mdattr.Name != attr.Name )
                // it''s a derived attribute, but not
                // the one we''re currently parsing
                assign_ok = false;
                err_msg = "Cannot assign to a derived attribute ->" +
                                                               attr.Name + "<-";
              else
                dab.AttributeWritten = true;
              end if;
            end if;  // empty dab
          end if;  // not_empty db_attr
        end if;
      end if;
      if assign_ok
        if (lval.getDimensions() != rval.getDimensions())
          assign_ok = false;
          err_msg = "Attribute ->"+ attr.Name +
                                             "<- has incompatible array depth.";
        elif ( not lval.isElementCountValid() )
          assign_ok = false;
          err_msg = "Variable ->"+ attr.Name + "<- contains an Array Index Out of Bounds.";
        elif ( not rval.isElementCountValid() )
          assign_ok = false;
          err_msg = "The rvalue contains an Array Index Out of Bounds.";
        end if;
        if (not lval.isElementCountCompatible(rVal:rval.Value_ID))
          assign_ok = false;
          err_msg = "Variable ->"+ attr.Name + "<- has incompatible dimension size with the rvalue.";
        end if; 
      end if;
    end if; // not current state
  elif not_empty scv
    assign_ok = false;
    err_msg = "Variable ->" + lval.Text + "<- is a constant and is therefore read only.";
  else // all other cases . . .
    array_root_val_ID = ::get_array_value_root(start_value_ID:lval.Value_ID);
    select any val from instances of V_VAL where
                                         selected.Value_ID == array_root_val_ID;
    select one ldt related by lval->S_DT[R820];
    select one rdt related by rval->S_DT[R820];
    if not_empty rdt and empty ldt and val.isImplicit == true;
      // First assignment, set up the data type for all value chain members
      select one vvar related by val->V_TVL[R801]->V_VAR[R805];
      relate rdt to vvar across R848;
      cursorVal = val;
      while not_empty cursorVal
        relate cursorVal to rdt across R820;
        select one cursorVal related by cursorVal->V_AER[R838]->V_VAL[R801];
      end while;
      ldt = rdt;
    end if;
    dt = GD::NULL_UNIQUE_ID();
    if not_empty ldt and not_empty rdt
      dt = ::data_types_compatible ( dt1: ldt.DT_ID,
                                              dt2: rdt.DT_ID, op: "assign" );
    end if;
    if ( dt == GD::NULL_UNIQUE_ID() )
      assign_ok = false;
      err_msg = "Variable ->"+ val.Text +
                                        "<- already exists as a different type";
    end if;
    if (lval.getDimensions() != rval.getDimensions())
      if val.isImplicit
        trnUpdated = lval.setRank(dimension:0, rval_id:rval.Value_ID);
      else
        assign_ok = false;
        err_msg = "Variable ->"+ val.Text + "<- has incompatible array depth.";
      end if;
    elif ( not lval.isElementCountValid() )
        assign_ok = false;
        err_msg = "Variable ->"+ val.Text + "<- contains an Array Index Out of Bounds.";
    elif ( not rval.isElementCountValid() )
        assign_ok = false;
        err_msg = "The rvalue contains an Array Index Out of Bounds.";
    end if;
    if (not lval.isElementCountCompatible(rVal:rval.Value_ID))
      assign_ok = false;
      err_msg = "Variable ->"+ val.Text + "<- has incompatible dimension size with the rvalue.";
    end if;
  end if;
  if (not assign_ok)
    ::clear_assignment_data( stmt_id: param.a2_upper_rule_id,
                                          var_id: param.b1_member_id );
    rval.dispose();
    ::clear_value_data();
    ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
  else
    if not_empty rval and not_empty lval
      create object instance atm of ACT_AI;
      select any stmt from instances of ACT_SMT where
                                selected.Statement_ID == param.a2_upper_rule_id;
      relate atm to stmt across R603;
      relate lval to atm across R689;
      relate rval to atm across R609;
    end if;
  end if;
  if not_empty lvar
    lvar.Declared = true;
  end if;
elif param.b3_param_data_access3_id != GD::NULL_UNIQUE_ID()
  select any lval from instances of V_VAL where
                            selected.Value_ID == param.b3_param_data_access3_id;
  select one val_dt related by rval->S_DT[R820];
  select one parm_dt related by lval->S_DT[R820];

  assign_ok = true;
  err_msg = "";
  dt = GD::NULL_UNIQUE_ID();
  if not_empty parm_dt and not_empty val_dt
    dt = ::data_types_compatible ( dt1: parm_dt.DT_ID,
                                              dt2: val_dt.DT_ID, op: "assign" );
  end if;
  if ( dt == GD::NULL_UNIQUE_ID() )
    err_msg = "Data types are not assignable or " +
                                       "compatible across assignment statement";
    lval.dispose();
    rval.dispose();
    ::clear_value_data();
    ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
  else
	if (lval.getDimensions() !=rval.getDimensions())
		assign_ok = false;
		err_msg = "Parameter has incompatible array depth.";
	elif (not lval.isElementCountValid())
		assign_ok = false;
		err_msg = "Parameter contains an Array Index Out of Bounds.";
	else
	    create object instance atm of ACT_AI;
	    select any stmt from instances of ACT_SMT where
	                                selected.Statement_ID == param.a2_upper_rule_id;
	    relate atm to stmt across R603;
	    relate lval to atm across R689;
	    relate rval to atm across R609;
	end if;
	if (not assign_ok)
		lval.dispose();
		::clear_value_data();
		ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
	end if;
  end if;
end if;
return param.a2_upper_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("eafdd780-69ca-407d-985f-037273b2bcf7",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6ebb6152-e1b5-4f52-9c11-347b85ea2e33",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"eafdd780-69ca-407d-985f-037273b2bcf7",
	'');
INSERT INTO S_SPARM
	VALUES ("8fd74859-fd5d-4034-82b4-cd38650c0d18",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6ebb6152-e1b5-4f52-9c11-347b85ea2e33",
	'');
INSERT INTO S_SPARM
	VALUES ("bb2bcce9-1a20-461c-ab6f-96d2e0d9f43e",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8fd74859-fd5d-4034-82b4-cd38650c0d18",
	'');
INSERT INTO S_SPARM
	VALUES ("4fb6c943-151d-44e4-9d35-52ce554c1550",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'b1_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bb2bcce9-1a20-461c-ab6f-96d2e0d9f43e",
	'');
INSERT INTO S_SPARM
	VALUES ("dd9902bb-8e9a-49d3-9345-53dc2edb7942",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'b2_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4fb6c943-151d-44e4-9d35-52ce554c1550",
	'');
INSERT INTO S_SPARM
	VALUES ("8ae0312e-39e2-430d-a3d9-7012e4d99892",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'b3_param_data_access3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"dd9902bb-8e9a-49d3-9345-53dc2edb7942",
	'');
INSERT INTO S_SPARM
	VALUES ("cd64056c-f3d4-4f0c-a666-1d4632207e07",
	"53f94956-d62c-4198-957b-d6879471e6fe",
	'b4_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8ae0312e-39e2-430d-a3d9-7012e4d99892",
	'');
INSERT INTO PE_PE
	VALUES ("53f94956-d62c-4198-957b-d6879471e6fe",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("71cbadb2-1aea-4f25-9d4d-5e6760324d29",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_invocation_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2fca6b27-eee9-4cb3-b863-14418855e0d9",
	"71cbadb2-1aea-4f25-9d4d-5e6760324d29",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4e181b68-2e7d-4dc9-8c3f-4d7206c4f8ab",
	"71cbadb2-1aea-4f25-9d4d-5e6760324d29",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"2fca6b27-eee9-4cb3-b863-14418855e0d9",
	'');
INSERT INTO PE_PE
	VALUES ("71cbadb2-1aea-4f25-9d4d-5e6760324d29",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d532b039-a17a-482c-9991-ccdd32f05ad5",
	"00000000-0000-0000-0000-000000000000",
	'Ee_keyletters_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one body related by block->ACT_ACT[R612];
// most isInGenericPackage varibles have been removed by the SP removal work. 
// This one stays.
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];
  // Check for EE keyletter match for token
  if not_empty component
    component.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::EE,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
  else
    package.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::EE, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                 selected.Name == param.a3_text and 
                                      selected.Type == ElementTypeConstants::EE; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                    selected.Name == param.a3_text and 
                                      selected.Type == ElementTypeConstants::EE; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  EECount = cardinality results;
  if EECount == 0
    ERR::reportParseError( 
        msg: "Cannot find specified external entity key letters ->%s<-.", 
        token: param.a1_rule_token );
  elif EECount >= 1
    // store the textual position of the key letters for the first match
    // found   
    block.currentKeyLettersLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    block.currentKeyLettersColumn = ::getColumn(rule_token: param.a1_rule_token);
    select any ee related by results->S_EE[R8001];
    return ee.EE_ID;
  end if;
  return GD::NULL_UNIQUE_ID();
else
  select any ee from instances of S_EE where ( selected.Key_Lett == param.a3_text );
  if ( empty ee )
    ERR::reportParseError( 
        msg: "Cannot find specified external entity key letters ->%s<-.", 
        token: param.a1_rule_token );
  end if;

  // store the textual position of the key letters
  block.currentKeyLettersLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentKeyLettersColumn = ::getColumn(rule_token: param.a1_rule_token);
  return ee.EE_ID;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0f2a69f4-4cea-4ceb-b28b-b600be52a472",
	"d532b039-a17a-482c-9991-ccdd32f05ad5",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("71878dd5-034d-4b92-a1a0-43cfe916a17f",
	"d532b039-a17a-482c-9991-ccdd32f05ad5",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0f2a69f4-4cea-4ceb-b28b-b600be52a472",
	'');
INSERT INTO S_SPARM
	VALUES ("34a6e07a-4bf1-407f-999e-4398eef89687",
	"d532b039-a17a-482c-9991-ccdd32f05ad5",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"71878dd5-034d-4b92-a1a0-43cfe916a17f",
	'');
INSERT INTO S_SPARM
	VALUES ("9ceae73a-e3f9-457f-80d3-a55966a9ba02",
	"d532b039-a17a-482c-9991-ccdd32f05ad5",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"34a6e07a-4bf1-407f-999e-4398eef89687",
	'');
INSERT INTO S_SPARM
	VALUES ("8b1b7ff9-8589-4909-801a-e6751a84d7bc",
	"d532b039-a17a-482c-9991-ccdd32f05ad5",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9ceae73a-e3f9-457f-80d3-a55966a9ba02",
	'');
INSERT INTO PE_PE
	VALUES ("d532b039-a17a-482c-9991-ccdd32f05ad5",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_function_validate',
	'ParserValidateFunction: TRUE',
	'select any ee from instances of S_EE where ( selected.EE_ID == param.a6_current_rule_id );
return ::is_valid_bridge( key_lett: ee.Key_Lett, name: param.a3_text, rule_token: param.a1_rule_token );












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("92adad69-e8f1-4edd-9975-f5c520953390",
	"a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("793e7839-83d3-41db-802a-45f87b3f13f9",
	"a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"92adad69-e8f1-4edd-9975-f5c520953390",
	'');
INSERT INTO S_SPARM
	VALUES ("7abd2c5a-9cf1-4690-adab-d046c8226faa",
	"a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"793e7839-83d3-41db-802a-45f87b3f13f9",
	'');
INSERT INTO S_SPARM
	VALUES ("9dc65b7b-e904-45e0-a3b7-cf446613234d",
	"a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7abd2c5a-9cf1-4690-adab-d046c8226faa",
	'');
INSERT INTO S_SPARM
	VALUES ("7da8a183-e541-4443-b842-7f1f21ffb250",
	"a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9dc65b7b-e904-45e0-a3b7-cf446613234d",
	'');
INSERT INTO PE_PE
	VALUES ("a98e94de-84bf-4d64-aa3b-c2b8ef958660",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_parameters_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;







































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a5c0f988-c9c5-4dbb-9b35-883193ac3909",
	"64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ec5793c0-046d-479b-b86d-5d1f31f12ea1",
	"64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5c0f988-c9c5-4dbb-9b35-883193ac3909",
	'');
INSERT INTO S_SPARM
	VALUES ("72389b1a-0d37-48dd-a8de-3078cb94bc99",
	"64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ec5793c0-046d-479b-b86d-5d1f31f12ea1",
	'');
INSERT INTO S_SPARM
	VALUES ("0bfae00a-6471-45cf-abd2-6d70fea9c75c",
	"64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"72389b1a-0d37-48dd-a8de-3078cb94bc99",
	'');
INSERT INTO S_SPARM
	VALUES ("18f631c1-6074-4f42-82b9-1ef15d64248b",
	"64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0bfae00a-6471-45cf-abd2-6d70fea9c75c",
	'');
INSERT INTO PE_PE
	VALUES ("64ab60c8-a9f9-417e-a747-542cb4bd4ee3",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_invocation_end',
	'ParserValidateFunction: TRUE',
	'
// validate parameters

select any brv from instances of V_BRV 
   where selected.Value_ID == param.b2_bridge_function2_id;

if ( not brv.ParmListOK )
  // error already output, still need to clean up
  select one val related by brv->V_VAL[R801];
  val.dispose();
  return GD::NULL_UNIQUE_ID();
end if;

select one brg related by brv->S_BRG[R828];
select many vparm_set related by brv->V_PAR[R810];
select many bparm_set related by brg->S_BPARM[R21];
if ( cardinality vparm_set < cardinality bparm_set )
  select one val related by brv->V_VAL[R801];
  val.dispose();
  ERR::reportParseError( msg: "Bridge ->"+brg.Name+
      "<- is missing corresponding parameter(s)",
          token: param.a1_rule_token );
else
  for each bparm in bparm_set
    found = false;
    for each vparm in vparm_set
      if ( bparm.Name == vparm.Name )
        found = true;
        err_msg = "";
        select one parm_val related by vparm->V_VAL[R800];
        select one vdt related by parm_val->S_DT[R820];
        if ( empty vdt or ::data_types_compatible( dt1: bparm.DT_ID, dt2: vdt.DT_ID, op: "assign")  == GD::NULL_UNIQUE_ID() )
          select one val related by brv->V_VAL[R801];
          err_msg = "Parameter ->"+ bparm.Name +"<- has been assigned value of different type";
        end if;
        if ( bparm.By_Ref == 1 )
          if ( ::is_readonly_value( val_id: vparm.Value_ID ) )
            err_msg = "Cannot pass read-only value to pass-by-reference parameter ->"+ bparm.Name + "<-";
          end if;
        end if;
        if (bparm.getDimensionsCnt()!= parm_val.getDimensions())
          err_msg = "Parameter ->"+ bparm.Name +"<- has incompatible array depth.";
        elif ( not parm_val.isElementCountValid() )
          err_msg = "Parameter ->"+ bparm.Name + "<- contains an Array Index Out of Bounds.";
        end if;      
        if (err_msg == "")
          break;
        else 
          select one val related by brv->V_VAL[R801];
          val.dispose();        
          ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
        end if;
      end if;
    end for;
    if ( not found )
      select one val related by brv->V_VAL[R801];
      val.dispose();
      ERR::reportParseError( msg: "Bridge ->"+brg.Name+
          "<- is missing corresponding parameter(s)",
             token: param.a1_rule_token );
    end if;
  end for;

      // If execution gets here, all the data items from the database
      // were found in the parse data items.

      // If there are more data items in the parse then were found in the
      // database, that means there were redundant or extra data items in the
      // parameter list found by the parse.  Generate an error.

  if ( cardinality vparm_set > cardinality bparm_set )
    for each vparm in vparm_set
      found = false;
      for each bparm in bparm_set
        if ( bparm.Name == vparm.Name )
          found = true;
          break;
        end if;
      end for;
      if ( not found )
      select one val related by brv->V_VAL[R801];
      val.dispose();
      ERR::reportParseError( msg: "Parameter ->"+ vparm.Name +
          "<- is not associated with bridge ->"+ brg.Name +"<-",
             token: param.a1_rule_token );
      end if;
    end for;

      // If it gets out of the loop without error, there must be
      // a redundant data item, so report the error
    select one val related by brv->V_VAL[R801];
    val.dispose();
    ERR::reportParseError( msg: "Bridge ->"+brg.Name+
      "<- has redundant parameters",
          token: param.a1_rule_token );
    
  end if;
end if;
return param.b2_bridge_function2_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0ec328ac-c322-4d82-8be9-9d572142c5e1",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("adcb8198-8495-4e74-aaf7-f51f0d5a5dfa",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0ec328ac-c322-4d82-8be9-9d572142c5e1",
	'');
INSERT INTO S_SPARM
	VALUES ("e9a1e5e2-a0db-4819-9c03-6bdd4616a4c0",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"adcb8198-8495-4e74-aaf7-f51f0d5a5dfa",
	'');
INSERT INTO S_SPARM
	VALUES ("99806de2-70d1-4c1a-bd85-8b0fa47b4391",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e9a1e5e2-a0db-4819-9c03-6bdd4616a4c0",
	'');
INSERT INTO S_SPARM
	VALUES ("8eec63a8-f5a3-4e6e-babe-e9272947b14e",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'b1_ee_keyletters1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"99806de2-70d1-4c1a-bd85-8b0fa47b4391",
	'');
INSERT INTO S_SPARM
	VALUES ("9925780a-3447-4b2d-b08f-7c01c0eeffa7",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'b2_bridge_function2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8eec63a8-f5a3-4e6e-babe-e9272947b14e",
	'');
INSERT INTO S_SPARM
	VALUES ("36e28e5d-7cfc-42fd-b56e-c661870381ee",
	"ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	'b3_invocation_parameters3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9925780a-3447-4b2d-b08f-7c01c0eeffa7",
	'');
INSERT INTO PE_PE
	VALUES ("ec7efd7b-1c4e-4a35-a299-4b1ec0f88b23",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("329a74ef-c657-4a90-b493-2010a94b5320",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c709284f-9f7a-4446-8258-5a7b7f3d6a85",
	"329a74ef-c657-4a90-b493-2010a94b5320",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d566239-61c6-4b6c-a826-780f7ba49eb0",
	"329a74ef-c657-4a90-b493-2010a94b5320",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"c709284f-9f7a-4446-8258-5a7b7f3d6a85",
	'');
INSERT INTO PE_PE
	VALUES ("329a74ef-c657-4a90-b493-2010a94b5320",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	"00000000-0000-0000-0000-000000000000",
	'Identifier_validate',
	'ParserValidateFunction: TRUE',
	'// ::Obj_or_ee_keyletters_validate()
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
identifier_ok = false;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one comp related by containingElem->C_C[R8001];
  select one pkg related by containingElem->EP_PKG[R8001];
  // Check for class keyletter match for token
  if not_empty comp
    comp.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::CLASS,
                          originatingContainerID:comp.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  else
    pkg.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::CLASS, descending:false,
                           originatingContainerID:pkg.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  end if;
  select any resultSet related by comp->PE_CRS[R8007] where
                                      selected.Name == param.a3_text and 
                                   selected.Type == ElementTypeConstants::CLASS; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty pkg
    select any pkgResultSet related by pkg->PE_SRS[R8005] where
                                      selected.Name == param.a3_text and 
                                   selected.Type == ElementTypeConstants::CLASS; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  if cardinality results == 1
    identifier_ok = true;
  elif cardinality results > 1
    resultList = "";
    sep = "";
    for each result in results
      resultList = resultList + sep + result.getQualifiedName();
      sep = " ,";
    end for;
    ERR::reportParseError( msg: "Multiple classes found for ->%s<-: " +
                                        resultList, token: param.a1_rule_token); 
  else // No result found yet
    // Check for external entity keyletter match for token
    if not_empty comp
      comp.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::EE,
                          originatingContainerID:comp.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
    else
      pkg.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::EE, descending:false,
                           originatingContainerID:pkg.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
    end if;
    select any resultSet related by comp->PE_CRS[R8007] where
                                        selected.Name == param.a3_text and 
                                      selected.Type == ElementTypeConstants::EE; 
    select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
    if not_empty pkg
      select any pkgResultSet related by pkg->PE_SRS[R8005] where
                                        selected.Name == param.a3_text and 
                                      selected.Type == ElementTypeConstants::EE; 
      select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
    end if;
    if cardinality results >= 1
      identifier_ok = true;
    else // No result found yet
      // Check for Interface match for token
      if not_empty comp
        comp.collectVisibleElementsForName(name:param.a3_text,
            type:ElementTypeConstants::INTERFACE,
                          originatingContainerID:comp.Id,
                                delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
        select any resultSet related by comp->PE_CRS[R8007] where
                                        selected.Name == param.a3_text and 
                               selected.Type == ElementTypeConstants::INTERFACE; 
        select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
      elif not_empty pkg
        pkg.collectVisibleElementsForName(name:param.a3_text,
            type:ElementTypeConstants::INTERFACE, descending:false,
                          originatingContainerID:pkg.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
        select any pkgResultSet related by pkg->PE_SRS[R8005] where
                                         selected.Name == param.a3_text and 
                               selected.Type == ElementTypeConstants::INTERFACE; 
        select many results related by pkgResultSet->
                                                    PE_VIS[R8006]->PE_PE[R8002];
      end if;
      if cardinality results == 1
        identifier_ok = true;
      elif cardinality results > 1
        resultList = "";
        sep = "";
        for each result in results
          resultList = resultList + sep + result.getQualifiedName();
          sep = " ,";
        end for;
        ERR::reportParseError( msg: "Multiple interfaces found for ->%s<-: " +
                                        resultList, token: param.a1_rule_token);
      else // No result found yet
        // Check for port match for token
        componentContainer = comp;
        if not_empty pkg
          compId = pkg.getContainingComponentId();
          select any componentContainer from instances of C_C where
                                                          selected.Id == compId;
        end if;
        if not_empty componentContainer
          select many interfaces related by componentContainer->C_PO[R4010]->
                   C_IR[R4016]->C_I[R4012] where selected.Name == param.a3_text;
          if cardinality interfaces == 1
            identifier_ok = true;
          elif cardinality interfaces > 1
            resultList = "";
            sep = "";
            for each interface in interfaces
              name = interface.Name;
              select one pe related by interface->PE_PE[R8001];
              if not_empty pe
                name = pe.getQualifiedName();
              end if;
              resultList = resultList + sep + name;
              sep = " ,";
            end for;
            ERR::reportParseError(msg:"Multiple interfaces found for ->%s<-: " +
                                        resultList, token: param.a1_rule_token);
          else
            select many ports related by componentContainer->C_PO[R4010] where
                                                 selected.Name == param.a3_text;
            if cardinality ports == 1
              identifier_ok = true;
            elif cardinality ports > 1
              ERR::reportParseError(msg:"Multiple ports found for ->%s<-",
                                                    token: param.a1_rule_token);
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
else
  select any obj from instances of O_OBJ where selected.Key_Lett == param.a3_text;
  if ( empty obj )
    select any ee from instances of S_EE where selected.Key_Lett == param.a3_text;
    if ( empty ee )
      body.associateWithOwningComponent();
      select one component related by body->ACT_BIC[R694]->C_C[R694];
      if not_empty component
        select many interfaces related by component->C_PO[R4010]->
                   C_IR[R4016]->C_I[R4012] where selected.Name == param.a3_text;
        if not_empty interfaces
          identifier_ok = true;
        else
          select many ports related by component->C_PO[R4010] where
                                                 selected.Name == param.a3_text;
          if not_empty ports
            identifier_ok = true;
          end if;
        end if;
      end if;
    else
      identifier_ok = true;
    end if;
  else
    identifier_ok = true;
  end if;
end if;
if identifier_ok
  // save keyletters for later use
  block.TempBuffer = param.a3_text;
  // store the textual position of the key letters
  block.currentKeyLettersLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentKeyLettersColumn = ::getColumn(rule_token: param.a1_rule_token);
  return param.a6_current_rule_id;
else
  ERR::reportParseError( msg: "Cannot find specified class, " +
                                 " external entity or interface ->%s<-.", 
                                                   token: param.a1_rule_token );
  return GD::NULL_UNIQUE_ID();
end if;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2c82424d-f60f-44c6-9ceb-ccfe12996887",
	"4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("da72f00f-8635-4019-9e97-1bcbe21e0788",
	"4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2c82424d-f60f-44c6-9ceb-ccfe12996887",
	'');
INSERT INTO S_SPARM
	VALUES ("d8b21ae5-f669-45c7-986a-3defa5dd98ea",
	"4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"da72f00f-8635-4019-9e97-1bcbe21e0788",
	'');
INSERT INTO S_SPARM
	VALUES ("91a15311-32e4-4b03-b5f1-0b4a053b97ea",
	"4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d8b21ae5-f669-45c7-986a-3defa5dd98ea",
	'');
INSERT INTO S_SPARM
	VALUES ("8bfb6120-3ecc-4433-83db-eb3ef98f8197",
	"4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"91a15311-32e4-4b03-b5f1-0b4a053b97ea",
	'');
INSERT INTO PE_PE
	VALUES ("4b0cdec4-5d0a-4da9-9b9c-7f5e168ad4ca",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6125e715-35fc-459b-a1bf-c9741d6156e4",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_function_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                   selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  nullID = GD::NULL_UNIQUE_ID();
  // This holds the token before the "::" (class keyletters, EE name, port or interface name)
  identifier = block.TempBuffer; 
  tfr_found = false;
  bridge_found = false;
  message_found = false;
  numMatches = 0;
  dupErrString = "";
  select any obj from instances of O_OBJ;
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];

  // If the following section we look to are looking to see if there are
  // duplicates names between EE, Class-based operations, and messages.
  // Note that we can NOT validate the parameters and other aspects of the
  // invocation yet (we do that at the end when we know there are no duplicates)
  //
  // Check for class keyletter match for token
  if not_empty component
    component.collectVisibleElementsForName(name:identifier,
         type:ElementTypeConstants::CLASS,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  else
    package.collectVisibleElementsForName(name:identifier,
         type:ElementTypeConstants::CLASS, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                   selected.Name == identifier and 
                                   selected.Type == ElementTypeConstants::CLASS; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                      selected.Name == identifier and 
                                   selected.Type == ElementTypeConstants::CLASS; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  if cardinality results == 1
    select any obj related by results->O_OBJ[R8001];
    if not_empty obj
      select any tfr related by obj->O_TFR[R115] where
                                                 selected.Name == param.a3_text; 
      if (not_empty tfr)
        tfr_found = true;
        dupErrString = dupErrString + "Class Based Operation";    
        numMatches = numMatches + 1;
      end if;
    end if;
  elif cardinality results > 1
    resultList = "";
    sep = "";
    for each result in results
      resultList = resultList + sep + result.getQualifiedName();
      sep = " ,";
    end for;
    ERR::reportParseError( msg: "Multiple classes found for ->%s<-: " +
                                        resultList, token: param.a1_rule_token); 
  end if; // obj  
  //
  if not_empty component
    component.collectVisibleElementsForName(name:identifier,
         type:ElementTypeConstants::EE,originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
  else
    package.collectVisibleElementsForName(name:identifier,
         type:ElementTypeConstants::EE, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                  selected.Name == identifier and 
                                      selected.Type == ElementTypeConstants::EE; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                       selected.Name == identifier and 
                                      selected.Type == ElementTypeConstants::EE; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  if cardinality results >= 1
    select any ee related by results->S_EE[R8001];
    if not_empty ee
      select any brg related by ee->S_BRG[R19] where
                                                 selected.Name == param.a3_text;
      if (not_empty brg)
        bridge_found = true; 
        if (numMatches > 0)
          dupErrString = dupErrString + ", ";
        end if;
        dupErrString = dupErrString + "Bridge";    
        numMatches = numMatches + 1;
      end if;
    end if; // empty ee
  end if; // ee
  //    
  componentContainer = component;
  if not_empty package
    compId = package.getContainingComponentId();
    select any componentContainer from instances of C_C where
                                                          selected.Id == compId;
  end if;
  if not_empty componentContainer
    message_found = false;
    select many interfaces related by componentContainer->C_PO[R4010]->
                      C_IR[R4016]->C_I[R4012] where selected.Name == identifier;
    for each interface in interfaces
      select any io related by interface->C_EP[R4003]->C_IO[R4004] where
                                                 selected.Name == param.a3_text;
      select any sig related by interface->C_EP[R4003]->C_AS[R4004] where
                                                 selected.Name == param.a3_text;
      if not_empty io or not_empty sig
        message_found = true;
        break;
      end if;
    end for;
    if not message_found
      select many ports related by componentContainer->C_PO[R4010] where
                                                    selected.Name == identifier;
      for each port in ports
        select many interfaces related by port->C_IR[R4016]->C_I[R4012];
        for each interface in interfaces
          select any io related by interface->
                  C_EP[R4003]->C_IO[R4004] where selected.Name == param.a3_text;
          select any sig related by interface->
                  C_EP[R4003]->C_AS[R4004] where selected.Name == param.a3_text;
          if not_empty io or not_empty sig
            message_found = true;
            break;
          end if;
        end for;
      end for;
    end if;
    if message_found
      if (numMatches > 0)
        dupErrString = dupErrString + ", ";
      end if;
      dupErrString = dupErrString + "Message";
      numMatches = numMatches + 1;
    end if; // message found
  end if; // empty component

  resultInvocation = nullID;
  if (numMatches == 0)
    ERR::reportParseError( 
          msg: "Cannot find bridge, operation or message ->" + identifier +
                                         "::%s<-", token: param.a1_rule_token );
  elif (numMatches > 1) 
    ERR::reportParseError( 
            msg: "Duplicate implicit function signature for " + dupErrString + ".  ->" + identifier +
                                           "::%s<-" , token: param.a1_rule_token );
  elif (numMatches == 1)
    // We now know that there is a single matches across EE, Class-based operations,
    // and messages, so we can now validate that match.
  
    if ( message_found )
      resultInvocation =  ::Message_name_validate(
                 a1_rule_token: param.a1_rule_token,
                                   a2_text: param.a3_text,
                         a3_this_rule: param.a6_current_rule_id,
                                a4_upper_rule: param.a5_upper_rule_id,
                                      a5_upper_rule:param.a5_upper_rule_id);
    elif ( bridge_found )
      resultInvocation =  ::is_valid_bridge( key_lett: identifier,
                       name: param.a3_text, rule_token: param.a1_rule_token );
    elif ( tfr_found and ( not_empty obj ) )
      resultInvocation =  ::is_valid_transform (a1_obj_id: obj.Obj_ID,
                                        a2_name: param.a3_text, 
                                     a3_rule_token: param.a1_rule_token,
                                                           a4_classBased: true);
    end if;
  end if;
  return resultInvocation;
else
  nullID = GD::NULL_UNIQUE_ID();
  // This holds the token before the "::" (class keyletters, EE name, port or interface name)
  identifier = block.TempBuffer; 
  tfr_found = false;
  bridge_found = false;
  message_found = false;
  numMatches = 0;
  dupErrString = "";
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];

  // If the following section we look to are looking to see if there are
  // duplicates names between EE, Class-based operations, and messages.
  // Note that we can NOT validate the parameters and other aspects of the
  // invocation yet (we do that at the end when we know there are no duplicates)
  //
  select any obj from instances of O_OBJ where selected.Key_Lett == identifier;  
  select any ee from instances of S_EE where selected.Key_Lett == identifier;
  if not_empty ee
    select any brg related by ee->S_BRG[R19] where
                                                 selected.Name == param.a3_text;
    if (not_empty brg)
      bridge_found = true; 
      if (numMatches > 0)
        dupErrString = dupErrString + ", ";
      end if;
      dupErrString = dupErrString + "Bridge";    
      numMatches = numMatches + 1;
    end if;
  end if; // empty ee
  //    
  if not_empty component
    message_found = false;
    select many interfaces related by component->C_PO[R4010]->
                    C_IR[R4016]->C_I[R4012] where selected.Name == identifier;
    for each interface in interfaces
      select any io related by interface->C_EP[R4003]->C_IO[R4004] where
                                               selected.Name == param.a3_text;
      select any sig related by interface->C_EP[R4003]->C_AS[R4004] where
                                               selected.Name == param.a3_text;
      if not_empty io or not_empty sig
        message_found = true;
        break;
      end if;
    end for;
    if not message_found
      select many ports related by component->C_PO[R4010] where
                                                  selected.Name == identifier;
      for each port in ports
        select many interfaces related by port->C_IR[R4016]->C_I[R4012];
        for each interface in interfaces
          select any io related by interface->
                  C_EP[R4003]->C_IO[R4004] where selected.Name == param.a3_text;
          select any sig related by interface->
                  C_EP[R4003]->C_AS[R4004] where selected.Name == param.a3_text;
          if not_empty io or not_empty sig
            message_found = true;
            break;
          end if;
        end for;
      end for;
    end if;
    if message_found
      if (numMatches > 0)
        dupErrString = dupErrString + ", ";
      end if;
      dupErrString = dupErrString + "Message";
      numMatches = numMatches + 1;
    end if; // message found
  end if; // empty component

  resultInvocation = nullID;
  if (numMatches == 0)
    ERR::reportParseError( 
          msg: "Cannot find bridge, operation or message ->" + identifier +
                                         "::%s<-", token: param.a1_rule_token );
  elif (numMatches > 1) 
    ERR::reportParseError( 
            msg: "Duplicate implicit function signature for " + dupErrString + ".  ->" + identifier +
                                           "::%s<-" , token: param.a1_rule_token );
  elif (numMatches == 1)
    // We now know that there is a single matches across EE, Class-based operations,
    // and messages, so we can now validate that match.
  
    if ( message_found )
      resultInvocation =  ::Message_name_validate(
                 a1_rule_token: param.a1_rule_token,
                                   a2_text: param.a3_text,
                         a3_this_rule: param.a6_current_rule_id,
                                a4_upper_rule: param.a5_upper_rule_id,
                                      a5_upper_rule:param.a5_upper_rule_id);
    elif ( bridge_found )
      resultInvocation =  ::is_valid_bridge( key_lett: identifier,
                       name: param.a3_text, rule_token: param.a1_rule_token );
    elif ( tfr_found)
      resultInvocation =  ::is_valid_transform (a1_obj_id: obj.Obj_ID,
                                        a2_name: param.a3_text, 
                                     a3_rule_token: param.a1_rule_token,
                                                           a4_classBased: true);
    end if;
  end if;
  return resultInvocation;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4e5d2caf-c0c5-45fd-8072-f300d34899b7",
	"6125e715-35fc-459b-a1bf-c9741d6156e4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("100ed4d0-5d85-45bb-8eff-7ae6004f7644",
	"6125e715-35fc-459b-a1bf-c9741d6156e4",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4e5d2caf-c0c5-45fd-8072-f300d34899b7",
	'');
INSERT INTO S_SPARM
	VALUES ("f4b599e8-3023-4266-85cd-8f9f767f0efb",
	"6125e715-35fc-459b-a1bf-c9741d6156e4",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"100ed4d0-5d85-45bb-8eff-7ae6004f7644",
	'');
INSERT INTO S_SPARM
	VALUES ("fc4d4aea-c8ee-4c62-ad57-7366fa113cbc",
	"6125e715-35fc-459b-a1bf-c9741d6156e4",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f4b599e8-3023-4266-85cd-8f9f767f0efb",
	'');
INSERT INTO S_SPARM
	VALUES ("13a62880-28f5-4288-ad99-ee990775a7f8",
	"6125e715-35fc-459b-a1bf-c9741d6156e4",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fc4d4aea-c8ee-4c62-ad57-7366fa113cbc",
	'');
INSERT INTO PE_PE
	VALUES ("6125e715-35fc-459b-a1bf-c9741d6156e4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("48d54786-19fd-4643-8390-f4577a754829",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_end',
	'ParserValidateFunction: TRUE',
	'// validate parameters
//
select any brv from instances of V_BRV 
           where selected.Value_ID == param.b2_bridge_or_transform_function2_id;
if not_empty brv
  return ::Bridge_invocation_end( a1_rule_token: param.a1_rule_token, 
      a2_upper_rule_id: param.a2_upper_rule_id,
      a3_rule_begin_id: param.a3_rule_begin_id,
      a4_rule_id: param.a4_rule_id,
      b1_ee_keyletters1_id:GD::NULL_UNIQUE_ID(),
      b2_bridge_function2_id: param.b2_bridge_or_transform_function2_id,
      b3_invocation_parameters3_id: param.b3_invocation_parameters3_id );
else
  select any trv from instances of V_TRV 
           where selected.Value_ID == param.b2_bridge_or_transform_function2_id;
  if not_empty trv
    return ::Transform_invocation_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule_id: param.a2_upper_rule_id,
        a3_rule_begin_id: param.a3_rule_begin_id,
        a4_rule_id: param.a4_rule_id,
        b1_object_keyletters1_id:GD::NULL_UNIQUE_ID(),
        b2_transformer_function2_id: param.b2_bridge_or_transform_function2_id,
       b3_invocation_parameters3_id: param.b3_invocation_parameters3_id );
  else
    select any msv from instances of V_MSV
           where selected.Value_ID == param.b2_bridge_or_transform_function2_id;
    if not_empty msv
      return ::Message_invocation_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule: param.a2_upper_rule_id,
        a3_start_rule: param.a3_rule_begin_id,
        a4_current_rule: param.a4_rule_id,
        a5_interface:GD::NULL_UNIQUE_ID(),
        a6_message: param.b2_bridge_or_transform_function2_id,
        a7_parameters: param.b3_invocation_parameters3_id,
        a8_variable: GD::NULL_UNIQUE_ID() );
    end if;
  end if;
end if;

return param.a4_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("33e5711c-409f-4026-a9da-50f62e6bb69b",
	"48d54786-19fd-4643-8390-f4577a754829",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d3c9328c-a731-4e21-a771-52e328aa16e0",
	"48d54786-19fd-4643-8390-f4577a754829",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"33e5711c-409f-4026-a9da-50f62e6bb69b",
	'');
INSERT INTO S_SPARM
	VALUES ("5ac32531-cf2e-418d-ae32-8bd6b1d77847",
	"48d54786-19fd-4643-8390-f4577a754829",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d3c9328c-a731-4e21-a771-52e328aa16e0",
	'');
INSERT INTO S_SPARM
	VALUES ("3e8dd3fc-6db9-4fd0-a289-c6d6653e3cf8",
	"48d54786-19fd-4643-8390-f4577a754829",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5ac32531-cf2e-418d-ae32-8bd6b1d77847",
	'');
INSERT INTO S_SPARM
	VALUES ("56aa0296-9932-4a38-9e45-91db4000fcce",
	"48d54786-19fd-4643-8390-f4577a754829",
	'b1_obj_or_ee_keyletters1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3e8dd3fc-6db9-4fd0-a289-c6d6653e3cf8",
	'');
INSERT INTO S_SPARM
	VALUES ("2f29024a-0c8d-4dad-b727-14bd77f3a570",
	"48d54786-19fd-4643-8390-f4577a754829",
	'b2_bridge_or_transform_function2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"56aa0296-9932-4a38-9e45-91db4000fcce",
	'');
INSERT INTO S_SPARM
	VALUES ("dea396a0-8195-41ed-8677-7e8e6d18e020",
	"48d54786-19fd-4643-8390-f4577a754829",
	'b3_invocation_parameters3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2f29024a-0c8d-4dad-b727-14bd77f3a570",
	'');
INSERT INTO PE_PE
	VALUES ("48d54786-19fd-4643-8390-f4577a754829",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8fa4ff45-bc0a-459b-b430-b4e906d6f129",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_expr_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1972654d-4e00-4aca-ac1d-45836e5d75f8",
	"8fa4ff45-bc0a-459b-b430-b4e906d6f129",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8fa4ff45-bc0a-459b-b430-b4e906d6f129",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bfb99095-5919-4bf7-8911-1f2013de4d9c",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_expr_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ca5c48fb-699d-4dd2-b86e-853da76b12a8",
	"bfb99095-5919-4bf7-8911-1f2013de4d9c",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0ba309d4-2547-4730-b4b5-4bca278bb6a6",
	"bfb99095-5919-4bf7-8911-1f2013de4d9c",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ca5c48fb-699d-4dd2-b86e-853da76b12a8",
	'');
INSERT INTO S_SPARM
	VALUES ("fb662df9-df92-4547-9e10-606b1d812c83",
	"bfb99095-5919-4bf7-8911-1f2013de4d9c",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0ba309d4-2547-4730-b4b5-4bca278bb6a6",
	'');
INSERT INTO S_SPARM
	VALUES ("da2fef15-7cbd-473a-a330-7e3b93c6431e",
	"bfb99095-5919-4bf7-8911-1f2013de4d9c",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fb662df9-df92-4547-9e10-606b1d812c83",
	'');
INSERT INTO S_SPARM
	VALUES ("181a702d-d26b-486c-9a19-7cfd99e3ba76",
	"bfb99095-5919-4bf7-8911-1f2013de4d9c",
	'b1_bridge_or_transform_invocation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"da2fef15-7cbd-473a-a330-7e3b93c6431e",
	'');
INSERT INTO PE_PE
	VALUES ("bfb99095-5919-4bf7-8911-1f2013de4d9c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d934f912-bf02-4c46-8cc4-1c70d6f1ba0d",
	"00000000-0000-0000-0000-000000000000",
	'Enumerator_access_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("719b0a35-9f10-4b06-bc4f-ac8f4b87cf29",
	"d934f912-bf02-4c46-8cc4-1c70d6f1ba0d",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d934f912-bf02-4c46-8cc4-1c70d6f1ba0d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	"00000000-0000-0000-0000-000000000000",
	'Enum_data_type_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];

  // Check for Enumeration match for token
  if not_empty component
    component.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::DATATYPE,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
  else
    package.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::DATATYPE, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                  selected.Name == param.a3_text and 
                                selected.Type == ElementTypeConstants::DATATYPE; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                  selected.Name == param.a3_text and 
                                selected.Type == ElementTypeConstants::DATATYPE; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many edts related by results->S_DT[R8001]->S_EDT[R17];
  select many udts related by results->S_DT[R8001]->S_UDT[R17];
  UDTCount = 0;
  for each udt in udts
    baseId = udt.getCoreType();
    select any pe from instances of PE_PE where (selected.Element_ID == baseId);
    if(not_empty pe)
      select one baseTypeEDT related by pe->S_DT[R8001]->S_EDT[R17];
      if(not_empty baseTypeEDT)
        UDTCount = UDTCount + 1;
      end if;
    end if;
  end for;
  EDTCount = cardinality edts;
  EDTCount = EDTCount + UDTCount;
  if EDTCount == 0
    ERR::reportParseError( 
        msg: "Cannot find specified enumeration ->%s<-.", 
                                                   token: param.a1_rule_token );
  elif EDTCount == 1
    // store the textual position of the data type name 
    block.currentDataTypeNameLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    block.currentDataTypeNameColumn = ::getColumn(rule_token: param.a1_rule_token);
    select any dt related by results->S_DT[R8001];
    return dt.DT_ID;
  elif EDTCount > 1
    resultList = "";
    sep = "";
    for each edt in edts
      select one result related by edt->S_DT[R17]->PE_PE[R8001];
      resultList = resultList + sep + result.getQualifiedName();
      sep = " ,";
    end for;
    for each udt in udts
      select one result related by udt->S_DT[R17]->PE_PE[R8001];
      resultList = resultList + sep + result.getQualifiedName();
      sep = " ,";
    end for;
    ERR::reportParseError(msg: "Multiple enumerations found for ->%s<-: " +
                                           resultList, token: param.a1_rule_token);
  end if;
  return GD::NULL_UNIQUE_ID();
else
    // see if any enumerations are located at the system level
    cur_sys_name = ::getSystemName();
    select any sys from instances of S_SYS where selected.Name == cur_sys_name;
      select many dt related by sys->G_EIS[R9100]->PE_PE[R9100]->S_DT[R8001] where
                                                 selected.Name == param.a3_text;
  select many edt related by dt->S_EDT[R17];
  if ( empty edt )
    ERR::reportParseError( msg: "Cannot find enumeration data type ->%s<-",
          token: param.a1_rule_token );
  elif ( cardinality edt > 1 )
    ERR::reportParseError( msg: "More than one enumeration data type named ->%s<-",
          token: param.a1_rule_token );
  else
    // store the textual position of the data type name 
    block.currentDataTypeNameLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    block.currentDataTypeNameColumn = ::getColumn(rule_token: param.a1_rule_token);

    select any the_edt related by dt->S_EDT[R17];
    return the_edt.DT_ID;
  end if;
  return param.a6_current_rule_id;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a0f60558-f9a9-42ff-a0b7-b38366e78594",
	"8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b3094e04-65de-4af5-8be3-19dd4b8dbdc8",
	"8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a0f60558-f9a9-42ff-a0b7-b38366e78594",
	'');
INSERT INTO S_SPARM
	VALUES ("246aa78c-9d72-46f0-a76f-1f4efdf07c45",
	"8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b3094e04-65de-4af5-8be3-19dd4b8dbdc8",
	'');
INSERT INTO S_SPARM
	VALUES ("f019d344-cd2c-4890-91a1-8af12c100014",
	"8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"246aa78c-9d72-46f0-a76f-1f4efdf07c45",
	'');
INSERT INTO S_SPARM
	VALUES ("cff7afb1-c251-4b09-afc7-8978f17af083",
	"8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f019d344-cd2c-4890-91a1-8af12c100014",
	'');
INSERT INTO PE_PE
	VALUES ("8b651a9e-1ae9-4a68-9fcc-e1756be4629e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("08c0401f-dbab-4f22-b436-86840953d62a",
	"00000000-0000-0000-0000-000000000000",
	'Enumerator_validate',
	'ParserValidateFunction: TRUE',
	'select any pe from instances of PE_PE where selected.Element_ID ==
                                                       param.a6_current_rule_id;
select one edt related by pe->S_DT[R8001]->S_EDT[R17];
if(empty edt)
  select one udt related by pe->S_DT[R8001]->S_UDT[R17];
  if(not_empty udt)
    baseId = udt.getCoreType();
    select any basePe from instances of PE_PE
                                          where (selected.Element_ID == baseId);
    if(not_empty basePe)
      select one edt related by basePe->S_DT[R8001]->S_EDT[R17];
    end if;
  end if;
end if;

  select any enum related by edt->S_ENUM[R27] 
                                       where ( selected.Name == param.a3_text );
  if ( empty enum )
    if(empty edt)
      // here we just log an error, as there is
      // something wrong in the system.  Not
      // necessarily having to do with the OAL
      USER::logError(msg:"Unable to locate enumeration data type.",path:"");
    else
      select one dt related by edt->S_DT[R17];
      ERR::reportParseError( msg: 
      "Cannot find enumerator ->%s<- for enumeration data type ->"+dt.Name+"<-",
            token: param.a1_rule_token );  
    end if;
  else
    return enum.Enum_ID;
  end if;

return param.a6_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("92b03740-cabd-40ec-b90c-e8a9d7e4db49",
	"08c0401f-dbab-4f22-b436-86840953d62a",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ae6a7668-7044-4ce7-aa10-4be4d506e2e6",
	"08c0401f-dbab-4f22-b436-86840953d62a",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"92b03740-cabd-40ec-b90c-e8a9d7e4db49",
	'');
INSERT INTO S_SPARM
	VALUES ("6f1a0e4e-1515-4e66-ab2b-566284e3f2db",
	"08c0401f-dbab-4f22-b436-86840953d62a",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ae6a7668-7044-4ce7-aa10-4be4d506e2e6",
	'');
INSERT INTO S_SPARM
	VALUES ("6828042e-68d0-4806-935f-ff8aceb1f62e",
	"08c0401f-dbab-4f22-b436-86840953d62a",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6f1a0e4e-1515-4e66-ab2b-566284e3f2db",
	'');
INSERT INTO S_SPARM
	VALUES ("65195e0c-baf0-4747-b83a-a2164ca604b5",
	"08c0401f-dbab-4f22-b436-86840953d62a",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6828042e-68d0-4806-935f-ff8aceb1f62e",
	'');
INSERT INTO PE_PE
	VALUES ("08c0401f-dbab-4f22-b436-86840953d62a",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85f39d71-2a38-435c-b06c-efd5040b38c4",
	"00000000-0000-0000-0000-000000000000",
	'Enumerator_access_end',
	'ParserValidateFunction: TRUE',
	'select any enum from instances of S_ENUM 
    where (selected.Enum_ID == param.b2_enumerator2_id );
if(empty enum)
  // if the enumerator was not found
  // check the system level
  sysName = ::getSystemName();
  select any system from instances of S_SYS where (selected.Name == sysName);

    select any enum related by system->G_EIS[R9100]->PE_PE[R9100]->S_DT[R8001]->
    S_EDT[R17]->S_ENUM[R27] where (selected.Enum_ID == param.b2_enumerator2_id);

end if;

create object instance len of V_LEN;
relate len to enum across R824;

create object instance val of V_VAL;
relate val to len  across R801;
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                           (selected.Block_ID == current_scope);
relate val to block across R826;

select one dt related by enum->S_EDT[R27]->S_DT[R17];
relate val to dt across R820;

val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
val.setEndPosition();

// store the textual position of the data type name
len.dataTypeNameLineNumber = block.currentDataTypeNameLineNumber;
len.dataTypeNameColumn = block.currentDataTypeNameColumn;

return val.Value_ID;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("07b50ee3-fea2-47a5-a1d6-ef0c8ebc329d",
	"85f39d71-2a38-435c-b06c-efd5040b38c4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("59bfa168-f026-42e3-b548-f460d1dfd912",
	"85f39d71-2a38-435c-b06c-efd5040b38c4",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"07b50ee3-fea2-47a5-a1d6-ef0c8ebc329d",
	'');
INSERT INTO S_SPARM
	VALUES ("3109ef0b-b768-4f5d-bc00-93077d89d87d",
	"85f39d71-2a38-435c-b06c-efd5040b38c4",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"59bfa168-f026-42e3-b548-f460d1dfd912",
	'');
INSERT INTO S_SPARM
	VALUES ("3265884e-0bec-4d68-a91b-2e2087cad337",
	"85f39d71-2a38-435c-b06c-efd5040b38c4",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3109ef0b-b768-4f5d-bc00-93077d89d87d",
	'');
INSERT INTO S_SPARM
	VALUES ("09ae68a5-84e8-4908-9b3f-cc372c52c848",
	"85f39d71-2a38-435c-b06c-efd5040b38c4",
	'b1_enum_data_type1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3265884e-0bec-4d68-a91b-2e2087cad337",
	'');
INSERT INTO S_SPARM
	VALUES ("7b6aa15f-be6a-4b0d-a3ad-72141da27797",
	"85f39d71-2a38-435c-b06c-efd5040b38c4",
	'b2_enumerator2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"09ae68a5-84e8-4908-9b3f-cc372c52c848",
	'');
INSERT INTO PE_PE
	VALUES ("85f39d71-2a38-435c-b06c-efd5040b38c4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b71e5618-3844-4b09-b1e3-688275b2c09c",
	"00000000-0000-0000-0000-000000000000",
	'Debug_operand_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e7b61ece-f5d6-49eb-a1ef-41a03994dffc",
	"b71e5618-3844-4b09-b1e3-688275b2c09c",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b71e5618-3844-4b09-b1e3-688275b2c09c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a91876fc-221b-4398-8ef4-c537d446ae6f",
	"00000000-0000-0000-0000-000000000000",
	'Debug_operand_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2fafb8c1-bf6b-4ad3-b012-1c7342452cec",
	"a91876fc-221b-4398-8ef4-c537d446ae6f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8df1bc23-e13a-4f5e-94a2-706878464ea1",
	"a91876fc-221b-4398-8ef4-c537d446ae6f",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2fafb8c1-bf6b-4ad3-b012-1c7342452cec",
	'');
INSERT INTO S_SPARM
	VALUES ("767dd789-6fe6-40cf-9dd8-3f81c820d64c",
	"a91876fc-221b-4398-8ef4-c537d446ae6f",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8df1bc23-e13a-4f5e-94a2-706878464ea1",
	'');
INSERT INTO S_SPARM
	VALUES ("67a0dd13-5df8-4d2a-b3ad-c70f7a037fa9",
	"a91876fc-221b-4398-8ef4-c537d446ae6f",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"767dd789-6fe6-40cf-9dd8-3f81c820d64c",
	'');
INSERT INTO PE_PE
	VALUES ("a91876fc-221b-4398-8ef4-c537d446ae6f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a043b98b-5746-4f3d-a7fc-adb42c6eb35d",
	"00000000-0000-0000-0000-000000000000",
	'Event_spec_start',
	'ParserValidateFunction: TRUE',
	'
stmt_id =  ::statement_create();
select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
create object instance ess of E_ESS;
relate stmt to ess across R603;
ess.PEIndicated = false;
ess.ParmListOK = true;

// assume it''s a generate statement
create object instance ges of E_GES;
relate ges to ess across R701;

return stmt.Statement_ID;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6149fc9d-c995-400d-bf9a-b162a4525d66",
	"a043b98b-5746-4f3d-a7fc-adb42c6eb35d",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a043b98b-5746-4f3d-a7fc-adb42c6eb35d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	"00000000-0000-0000-0000-000000000000",
	'Event_label_validate',
	'ParserValidateFunction: TRUE',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a6_current_rule_id;
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                            selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];
  // Find visible EE''s and Classes
  if not_empty component
    component.collectVisibleElementsForName(name:"",
        type:ElementTypeConstants::EE,
                          originatingContainerID:component.Id,
                                  delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
    component.collectVisibleElementsForName(name:"",
        type:ElementTypeConstants::CLASS,
                          originatingContainerID:component.Id,
                                  delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  else
    package.collectVisibleElementsForName(name:"",
        type:ElementTypeConstants::EE, descending:false,
                          originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
    package.collectVisibleElementsForName(name:"",
        type:ElementTypeConstants::CLASS, descending:false,
                          originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                selected.Name == "" and 
                                      selected.Type == ElementTypeConstants::EE; 
  select many EEResults related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  select any resultSet related by component->PE_CRS[R8007] where
                                    selected.Name == "" and 
                                  selected.Type == ElementTypeConstants::CLASS; 
  select many classResults related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                    selected.Name == "" and 
                                      selected.Type == ElementTypeConstants::EE; 
    select many EEResults related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                    selected.Name == "" and 
                                  selected.Type == ElementTypeConstants::CLASS; 
    select many classResults related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many evt_set related by classResults->O_OBJ[R8001]->
                          SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
  select many classEvt_set related by classResults->O_OBJ[R8001]->
                          SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
  select many eeevt_set related by EEResults->S_EE[R8001]->S_EEEVT[R10] where
                                              selected.Drv_Lbl == param.a3_text;
  if ( empty evt_set and empty classEvt_set)
    if ( empty eeevt_set )
      stmt.dispose();
      ERR::reportParseError( msg: "Cannot find event for event label ->%s<-",
            token: param.a1_rule_token );
    elif ( cardinality eeevt_set > 1 )
      stmt.dispose();
      ERR::reportParseError( msg:
"More than one event with label ->%s<- You will need to eventually run the audit and/or clear this up",
          token: param.a1_rule_token );
    else
      select any eeevt related by EEResults->S_EE[R8001]->S_EEEVT[R10] where
                                              selected.Drv_Lbl == param.a3_text;
      select one ges related by stmt->E_ESS[R603]->E_GES[R701];
      create object instance gee of E_GEE;
      relate gee to ges across R703;
      relate gee to eeevt across R709;  
      return stmt.Statement_ID;
    end if;
  elif ( (cardinality evt_set + cardinality classEvt_set) > 1 )
    stmt.dispose();
    ERR::reportParseError( msg:
"More than one event with label ->%s<- You will need to eventually run the audit and/or clear this up",
          token: param.a1_rule_token );
  else
    select any evt related by classResults->O_OBJ[R8001]->
                          SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
    if empty evt
      select any evt related by classResults->O_OBJ[R8001]->
                          SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
    end if;
    select one ges related by stmt->E_ESS[R603]->E_GES[R701];
    create object instance gsme of E_GSME;
    relate gsme to ges across R703;
    relate gsme to evt across R707;  
  
    // store the textual position of the event derived-label
    select one eventSpec related by stmt->E_ESS[R603];
    eventSpec.eventDerivedLabelLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    eventSpec.eventDerivedLabelColumn = ::getColumn(rule_token: param.a1_rule_token);
      
    return stmt.Statement_ID;
  end if;
else // not in generic package
  select many classes from instances of O_OBJ;
  select many evt_set related by classes->
                          SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
  select many classEvt_set related by classes->
                          SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
  select many eeevt_set from instances of S_EEEVT where
                                          ( selected.Drv_Lbl == param.a3_text );
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];
  if not_empty component
    if ( empty eeevt_set )
      stmt.dispose();
      ERR::reportParseError( msg: "Cannot find event for event label ->%s<-",
            token: param.a1_rule_token );
    elif ( cardinality eeevt_set > 1 )
      stmt.dispose();
      ERR::reportParseError( msg:
"More than one event with label ->%s<- You will need to eventually run the audit and/or clear this up",
          token: param.a1_rule_token );
    else
      select any eeevt from instances of S_EEEVT where
                                          ( selected.Drv_Lbl == param.a3_text );
      select one ges related by stmt->E_ESS[R603]->E_GES[R701];
      create object instance gee of E_GEE;
      relate gee to ges across R703;
      relate gee to eeevt across R709;  
      return stmt.Statement_ID;
    end if;
  elif ( (cardinality evt_set + cardinality classEvt_set) > 1 )
    stmt.dispose();
    ERR::reportParseError( msg:
"More than one event with label ->%s<- You will need to eventually run the audit and/or clear this up",
          token: param.a1_rule_token );
  else
    select any evt related by classes->
                          SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
    if empty evt
      select any evt related by classes->
                          SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where
                                              selected.Drv_Lbl == param.a3_text;
    end if;
    select one ges related by stmt->E_ESS[R603]->E_GES[R701];
    create object instance gsme of E_GSME;
    relate gsme to ges across R703;
    relate gsme to evt across R707;  
    // store the textual position of the event derived-label
    select one eventSpec related by stmt->E_ESS[R603];
    eventSpec.eventDerivedLabelLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
    eventSpec.eventDerivedLabelColumn =
                                   ::getColumn(rule_token: param.a1_rule_token);
    return stmt.Statement_ID;
  end if;
end if;
return GD::NULL_UNIQUE_ID();',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("03014263-d29f-4a4f-b81e-a4c3b805424e",
	"bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("768ef91b-3f2f-4199-86e7-1be98152045e",
	"bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"03014263-d29f-4a4f-b81e-a4c3b805424e",
	'');
INSERT INTO S_SPARM
	VALUES ("4ccdfddc-94d0-4eeb-aa79-7187f7d4b382",
	"bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"768ef91b-3f2f-4199-86e7-1be98152045e",
	'');
INSERT INTO S_SPARM
	VALUES ("98a149eb-2d36-493e-b772-4e339c3d39ae",
	"bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4ccdfddc-94d0-4eeb-aa79-7187f7d4b382",
	'');
INSERT INTO S_SPARM
	VALUES ("fcc44038-486a-4ab3-bd85-fb6c5cb45a35",
	"bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"98a149eb-2d36-493e-b772-4e339c3d39ae",
	'');
INSERT INTO PE_PE
	VALUES ("bc98cb8b-bd6e-4bab-9d45-9dccebc57226",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cab8bf4b-12e6-4687-9130-cf3b9c0edded",
	"00000000-0000-0000-0000-000000000000",
	'Terminal_tok_times_validate',
	'ParserValidateFunction: TRUE',
	'select any ess from instances of E_ESS where selected.Statement_ID == param.a4_current_rule_id;
if ( not_empty ess )
  ess.PEIndicated = true;
end if;

return param.a4_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("009c38ce-feb5-4d93-bbce-af540776025e",
	"cab8bf4b-12e6-4687-9130-cf3b9c0edded",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ef4787fa-6a5f-40a6-9174-09c5fdef3e67",
	"cab8bf4b-12e6-4687-9130-cf3b9c0edded",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"009c38ce-feb5-4d93-bbce-af540776025e",
	'');
INSERT INTO S_SPARM
	VALUES ("128c5e66-257e-428a-b42c-77d452dbbe19",
	"cab8bf4b-12e6-4687-9130-cf3b9c0edded",
	'a3_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ef4787fa-6a5f-40a6-9174-09c5fdef3e67",
	'');
INSERT INTO S_SPARM
	VALUES ("7c73a236-baf9-48b9-ab6a-5918ab4407b9",
	"cab8bf4b-12e6-4687-9130-cf3b9c0edded",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"128c5e66-257e-428a-b42c-77d452dbbe19",
	'');
INSERT INTO PE_PE
	VALUES ("cab8bf4b-12e6-4687-9130-cf3b9c0edded",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("756bbf83-94cd-46c4-a138-930cc782389d",
	"00000000-0000-0000-0000-000000000000",
	'Event_meaning_validate',
	'ParserValidateFunction: TRUE',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a6_current_rule_id;

evt_meaning = OS::remove_ticks( ticked_string: param.a3_text );
select one gsme related by stmt->E_ESS[R603]->E_GES[R701]->E_GSME[R703];
if ( not_empty gsme )
  select one evt related by gsme->SM_EVT[R707];
  if ( evt.Mning != evt_meaning )
    stmt.dispose();
    ERR::reportParseError( msg: "Event meaning ->%s<- is not associated with event label ->"+ evt.Drv_Lbl+"<-",
            token: param.a1_rule_token );
  end if;
else
  select one cee related by stmt->E_ESS[R603]->E_GES[R701]->E_GEE[R703];
  select one eeevt related by cee->S_EEEVT[R709];
  if ( eeevt.Mning != evt_meaning )
    stmt.dispose();
    ERR::reportParseError( msg: "Event meaning ->%s<- is not associated with event label ->"+ eeevt.Drv_Lbl+"<-",
            token: param.a1_rule_token );
  end if;
end if;

// store the textual position of the event meaning
select one eventSpec related by stmt->E_ESS[R603];
eventSpec.eventMeaningLineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
eventSpec.eventMeaningColumn = ::getColumn(rule_token: param.a1_rule_token);
	  
return param.a6_current_rule_id;









































































































































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("11c4056f-62fb-49a2-8a6e-c0c923ba86db",
	"756bbf83-94cd-46c4-a138-930cc782389d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3f61d67c-4176-4872-8714-6fecae33ef6b",
	"756bbf83-94cd-46c4-a138-930cc782389d",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"11c4056f-62fb-49a2-8a6e-c0c923ba86db",
	'');
INSERT INTO S_SPARM
	VALUES ("e3b93224-5111-41f1-85e5-4efe975b3b45",
	"756bbf83-94cd-46c4-a138-930cc782389d",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3f61d67c-4176-4872-8714-6fecae33ef6b",
	'');
INSERT INTO S_SPARM
	VALUES ("d2c15176-896f-48ba-97cc-b565a9ef5029",
	"756bbf83-94cd-46c4-a138-930cc782389d",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e3b93224-5111-41f1-85e5-4efe975b3b45",
	'');
INSERT INTO S_SPARM
	VALUES ("60c10d38-b5fd-4b15-a7ef-c4cbe9e76fcc",
	"756bbf83-94cd-46c4-a138-930cc782389d",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d2c15176-896f-48ba-97cc-b565a9ef5029",
	'');
INSERT INTO PE_PE
	VALUES ("756bbf83-94cd-46c4-a138-930cc782389d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("15878117-27bd-46f4-a802-ba2523aa8063",
	"00000000-0000-0000-0000-000000000000",
	'Supp_data_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("696dc70d-ee23-43f0-a1ec-eb44f54c939c",
	"15878117-27bd-46f4-a802-ba2523aa8063",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e2d75b32-2096-49e7-8e1c-c73366ad69f6",
	"15878117-27bd-46f4-a802-ba2523aa8063",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"696dc70d-ee23-43f0-a1ec-eb44f54c939c",
	'');
INSERT INTO S_SPARM
	VALUES ("8234199f-d30b-48eb-95eb-7aac36215f90",
	"15878117-27bd-46f4-a802-ba2523aa8063",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e2d75b32-2096-49e7-8e1c-c73366ad69f6",
	'');
INSERT INTO S_SPARM
	VALUES ("c2096a0f-d62e-4c26-a670-44e898c8e12d",
	"15878117-27bd-46f4-a802-ba2523aa8063",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8234199f-d30b-48eb-95eb-7aac36215f90",
	'');
INSERT INTO S_SPARM
	VALUES ("65dfafcc-d9b6-4483-b083-8da3863791dc",
	"15878117-27bd-46f4-a802-ba2523aa8063",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c2096a0f-d62e-4c26-a670-44e898c8e12d",
	'');
INSERT INTO PE_PE
	VALUES ("15878117-27bd-46f4-a802-ba2523aa8063",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ac41a87e-eae0-4c66-aa1d-e03b53573bdf",
	"00000000-0000-0000-0000-000000000000",
	'String_literal_assigner_validate',
	'ParserValidateFunction: TRUE',
	'return param.a3_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("55ef4855-f4f0-406a-b367-6830eba53f11",
	"ac41a87e-eae0-4c66-aa1d-e03b53573bdf",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("446bed03-ab74-4cb4-abae-2c50052e8e4d",
	"ac41a87e-eae0-4c66-aa1d-e03b53573bdf",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"55ef4855-f4f0-406a-b367-6830eba53f11",
	'');
INSERT INTO S_SPARM
	VALUES ("76dcc1e7-0b21-479c-8c38-9beb31d9f0c3",
	"ac41a87e-eae0-4c66-aa1d-e03b53573bdf",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"446bed03-ab74-4cb4-abae-2c50052e8e4d",
	'');
INSERT INTO PE_PE
	VALUES ("ac41a87e-eae0-4c66-aa1d-e03b53573bdf",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3d8e3b45-15bb-4d12-a122-543242f9c09f",
	"00000000-0000-0000-0000-000000000000",
	'String_literal_class_validate',
	'ParserValidateFunction: TRUE',
	'return param.a3_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ea7dcf50-562e-4661-94e4-653d5c6cc809",
	"3d8e3b45-15bb-4d12-a122-543242f9c09f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("22c2e881-36ed-4a35-a48a-cda0ff09debd",
	"3d8e3b45-15bb-4d12-a122-543242f9c09f",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ea7dcf50-562e-4661-94e4-653d5c6cc809",
	'');
INSERT INTO S_SPARM
	VALUES ("5a04e586-8287-4301-84ae-d4bca23ee666",
	"3d8e3b45-15bb-4d12-a122-543242f9c09f",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"22c2e881-36ed-4a35-a48a-cda0ff09debd",
	'');
INSERT INTO PE_PE
	VALUES ("3d8e3b45-15bb-4d12-a122-543242f9c09f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2220aaaa-4b60-4b5c-b9dd-4b02a2ffe335",
	"00000000-0000-0000-0000-000000000000",
	'String_literal_creator_validate',
	'ParserValidateFunction: TRUE',
	'return param.a3_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3cc60822-aaf0-4487-9437-60e74bb5c511",
	"2220aaaa-4b60-4b5c-b9dd-4b02a2ffe335",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9bda87a9-7fdf-4dea-8486-0c11438c4fbd",
	"2220aaaa-4b60-4b5c-b9dd-4b02a2ffe335",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3cc60822-aaf0-4487-9437-60e74bb5c511",
	'');
INSERT INTO S_SPARM
	VALUES ("05f0a291-70f5-451c-a458-2675cbbc9c73",
	"2220aaaa-4b60-4b5c-b9dd-4b02a2ffe335",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9bda87a9-7fdf-4dea-8486-0c11438c4fbd",
	'');
INSERT INTO PE_PE
	VALUES ("2220aaaa-4b60-4b5c-b9dd-4b02a2ffe335",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	"00000000-0000-0000-0000-000000000000",
	'Inst_ref_var_or_ee_keyletters_validate',
	'ParserValidateFunction: TRUE',
	'::self_validate( a1_text: param.a3_text, a2_isLval: false, a3_token: param.a1_rule_token );
select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a6_current_rule_id;
select one blk related by stmt->ACT_BLK[R602];
blk.TempBuffer = "";

var_id = ::get_var_in_scope( name: param.a3_text, rule_token: param.a1_rule_token );

if ( var_id != GD::NULL_UNIQUE_ID() )
  select any var from instances of V_VAR where ( selected.Var_ID == var_id );
  if ( not_empty var )
    // make sure we know which class this is a variable for
    select one mc related by var->V_INT[R814]->O_OBJ[R818];
    if ( not_empty mc )
      blk.TempBuffer = "V_VAR.Var_ID";
      var.addLocation(line: ::getLineNumber(rule_token: param.a1_rule_token), 
            col: ::getColumn(rule_token: param.a1_rule_token) );
      return var_id;
    end if;
  end if;
else
  select any ee from instances of S_EE where ( selected.Key_Lett == param.a3_text );
  if ( not_empty ee )
    blk.TempBuffer = "S_EE.EE_ID";
    return ee.EE_ID;
  end if;
end if;

// there was a problem
stmt.dispose();
ERR::reportParseError( 
   msg:"Token ->%s<- must be a variable in current scope and per instance, or be external entity keyletters",
    token: param.a1_rule_token );

return GD::NULL_UNIQUE_ID();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("afaea5f4-b214-4dd8-a371-e43c02bcc51a",
	"456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2bf05c51-6433-4d37-ad2a-9fc041ed624c",
	"456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"afaea5f4-b214-4dd8-a371-e43c02bcc51a",
	'');
INSERT INTO S_SPARM
	VALUES ("55f9d571-d127-4d67-a2b9-fc3857eeac0f",
	"456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2bf05c51-6433-4d37-ad2a-9fc041ed624c",
	'');
INSERT INTO S_SPARM
	VALUES ("019a253d-911f-43dc-80d0-7d299e39dc5c",
	"456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"55f9d571-d127-4d67-a2b9-fc3857eeac0f",
	'');
INSERT INTO S_SPARM
	VALUES ("91b1dca3-2821-4264-9105-e509e83cbf58",
	"456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"019a253d-911f-43dc-80d0-7d299e39dc5c",
	'');
INSERT INTO PE_PE
	VALUES ("456c32cb-3076-47a1-b2b1-8decd4d86d2e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	"00000000-0000-0000-0000-000000000000",
	'Event_spec_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b4_object_keyletters4_id != GD::NULL_UNIQUE_ID() )
  // class based event
  return ::process_class_event( a1_stmt_id: param.b1_event_label1_id, 
      a2_obj_id: param.b4_object_keyletters4_id,
      a3_rule_token: param.a1_rule_token );
elif ( param.b5_object_keyletters5_id != GD::NULL_UNIQUE_ID() )
  // creation event
  return ::process_creation_event( a1_stmt_id: param.b1_event_label1_id, 
      a2_obj_id: param.b5_object_keyletters5_id,
      a3_rule_token: param.a1_rule_token );
elif ( param.b6_inst_ref_var_or_ee_keyletters6_id != GD::NULL_UNIQUE_ID() )
  // instance based event or EE event
  select any stmt from instances of ACT_SMT 
      where selected.Statement_ID == param.b1_event_label1_id;
  select one blk related by stmt->ACT_BLK[R602];
  if ( blk.TempBuffer == "V_VAR.Var_ID" )
    // instance-based event
    return ::process_instance_event( a1_stmt_id: param.b1_event_label1_id, 
        a2_var_id: param.b6_inst_ref_var_or_ee_keyletters6_id,
        a3_rule_token: param.a1_rule_token );
  else
    // EE event
    return ::process_ee_event( a1_stmt_id: param.b1_event_label1_id, 
        a2_ee_id: param.b6_inst_ref_var_or_ee_keyletters6_id,
        a3_rule_token: param.a1_rule_token );
  end if;
end if;

return param.a4_rule_id;










































































































































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c9c1409c-7433-426d-8c33-97aecf859d48",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ed99477f-b0b1-4097-9137-75e3b5c9b52e",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c9c1409c-7433-426d-8c33-97aecf859d48",
	'');
INSERT INTO S_SPARM
	VALUES ("670a1fc4-b975-4505-91da-6174a8b533a3",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ed99477f-b0b1-4097-9137-75e3b5c9b52e",
	'');
INSERT INTO S_SPARM
	VALUES ("0cf7a0c8-6d22-4ae9-8241-dbe1a94aba59",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"670a1fc4-b975-4505-91da-6174a8b533a3",
	'');
INSERT INTO S_SPARM
	VALUES ("18fafc70-55cc-461d-9d30-ac1ffcb07d71",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'b1_event_label1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0cf7a0c8-6d22-4ae9-8241-dbe1a94aba59",
	'');
INSERT INTO S_SPARM
	VALUES ("7d628ab8-e779-40ea-80ed-f102bcd039ab",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'b2_event_meaning2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"18fafc70-55cc-461d-9d30-ac1ffcb07d71",
	'');
INSERT INTO S_SPARM
	VALUES ("539faa67-e012-4d91-b581-01b8f4a5156b",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'b3_supp_data3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7d628ab8-e779-40ea-80ed-f102bcd039ab",
	'');
INSERT INTO S_SPARM
	VALUES ("867eaad1-7284-4cc9-91bc-18e1cf4cf8df",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'b4_object_keyletters4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"539faa67-e012-4d91-b581-01b8f4a5156b",
	'');
INSERT INTO S_SPARM
	VALUES ("dd7dc742-b03e-4b67-b62f-2f3c0411bb8d",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'b5_object_keyletters5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"867eaad1-7284-4cc9-91bc-18e1cf4cf8df",
	'');
INSERT INTO S_SPARM
	VALUES ("796709f5-5a21-4948-ae1b-c6fca2c44064",
	"23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	'b6_inst_ref_var_or_ee_keyletters6_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"dd7dc742-b03e-4b67-b62f-2f3c0411bb8d",
	'');
INSERT INTO PE_PE
	VALUES ("23da19c8-ab02-4686-bfd8-c3ea9e44c022",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cb7e56cf-03a1-479d-aef6-3e5a140850f3",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_parameters_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("053bf584-1748-442e-a8ae-84c49b8e8401",
	"cb7e56cf-03a1-479d-aef6-3e5a140850f3",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("cb7e56cf-03a1-479d-aef6-3e5a140850f3",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	"00000000-0000-0000-0000-000000000000",
	'Data_item_validate',
	'ParserValidateFunction: TRUE',
	'if ( param.a2_isAccess )
  // store the textual position of the parameter name
  current_scope = ::get_current_scope();
  select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
  block.currentParameterAssignmentNameLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
  block.currentParameterAssignmentNameColumn =
                                   ::getColumn(rule_token: param.a1_rule_token);
  select any val from instances of V_VAL where
                                  selected.Value_ID == param.a6_current_rule_id;
  if (not_empty val)
    // Now we know the name of the parameter, hook it up to the value
    select one pvl related by val->V_PVL[R801];
    select any fnParm related by block->ACT_ACT[R612]->ACT_FNB[R698]->
                S_SYNC[R695]->S_SPARM[R24] where selected.Name == param.a3_text;
    if (not_empty fnParm)
      relate pvl to fnParm across R832;
      select one dt related by fnParm->S_DT[R26];
      relate val to dt across R820;
    else
      select any brParm related by block->ACT_ACT[R612]->ACT_BRB[R698]->
                 S_BRG[R697]->S_BPARM[R21] where selected.Name == param.a3_text;
      if (not_empty brParm)
        relate pvl to brParm across R831;
        select one dt related by brParm->S_DT[R22];
        relate val to dt across R820;
      else
        select any opParm related by block->ACT_ACT[R612]->ACT_OPB[R698]->
                O_TFR[R696]->O_TPARM[R117] where selected.Name == param.a3_text;
        if (not_empty opParm)
          relate pvl to opParm across R833;
          select one dt related by opParm->S_DT[R118];
          relate val to dt across R820;
        else
          select one act related by block->ACT_ACT[R612];
          select one reqSig related by act->ACT_RSB[R698]->SPR_RS[R684];
          select one reqOp related by act->ACT_ROB[R698]->SPR_RO[R685];
          select one provSig related by act->ACT_PSB[R698]->SPR_PS[R686];
          select one provOp related by act->ACT_POB[R698]->SPR_PO[R687];
          select any msgParm related by reqSig->SPR_REP[R4502]->
                  C_EP[R4500]->C_PP[R4006] where selected.Name == param.a3_text; 
          if not_empty reqOp
            select any msgParm related by reqOp->SPR_REP[R4502]->
                  C_EP[R4500]->C_PP[R4006] where selected.Name == param.a3_text; 
          elif not_empty provSig
            select any msgParm related by provSig->SPR_PEP[R4503]->
                  C_EP[R4501]->C_PP[R4006] where selected.Name == param.a3_text; 
          elif not_empty provOp
            select any msgParm related by provOp->SPR_PEP[R4503]->
                  C_EP[R4501]->C_PP[R4006] where selected.Name == param.a3_text; 
          end if;
          if not_empty msgParm
            relate pvl to msgParm across R843;
            select one dt related by msgParm->S_DT[R4007];
            relate val to dt across R820;
          end if;
        end if;
      end if;
    end if;
  end if;
  // parameter will be further verified by by param_data_access
  return param.a6_current_rule_id;
else
  select any val from instances of V_VAL where
                                    selected.Value_ID == param.a5_upper_rule_id;
  // store the textual position of the data-item label
  lineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
  column = ::getColumn(rule_token: param.a1_rule_token);
  if not_empty val and val.firstParameterLabelLineNumber == 0 and
                                              val.firstParameterLabelColumn == 0
	val.firstParameterLabelLineNumber = lineNumber;
	val.firstParameterLabelColumn = column;
  elif (not_empty val)
	val.currentLaterParameterLabelLineNumber = lineNumber;
	val.currentLaterParameterLabelColumn = column;
  end if;
  select one fnc related by val->V_FNV[R801];
  if ( not_empty fnc )
    select one sync related by fnc->S_SYNC[R827];
    select many sparm_set related by sync->S_SPARM[R24]
                                           where selected.Name == param.a3_text;
    if ( empty sparm_set )
      fnc.ParmListOK = false;
      ERR::reportParseError( msg: "Parameter ->%s" +
              "<- is not associated with function ->" + sync.Name +"<-",
                                                   token: param.a1_rule_token );
    elif ( cardinality sparm_set > 1 )
      fnc.ParmListOK = false;
      ERR::reportParseError(msg: "More than one parameter with name ->%s" +
           "<- for function ->" + sync.Name + "<-", token: param.a1_rule_token);
    else
      select any sparm related by sync->S_SPARM[R24] where
                                                 selected.Name == param.a3_text;
      return sparm.SParm_ID;
    end if;
  else
    select one brv related by val->V_BRV[R801];
    if ( not_empty brv )
      select one brg related by brv->S_BRG[R828];
      select many bparm_set related by brg->S_BPARM[R21]
                                           where selected.Name == param.a3_text;
      if ( empty bparm_set )
        brv.ParmListOK = false;
        ERR::reportParseError(msg: "Parameter ->%s" +
             "<- is not associated with bridge ->" + brg.Name +"<-",
                                                   token: param.a1_rule_token );
      elif ( cardinality bparm_set > 1 )
        brv.ParmListOK = false;
        ERR::reportParseError(msg: "More than one parameter with name ->%s" +
                                         "<- for bridge ->" + brg.Name + "<-",
                                                    token: param.a1_rule_token);
      else
        select any bparm related by brg->S_BPARM[R21] where
                                                 selected.Name == param.a3_text;
        return bparm.BParm_ID;
      end if;
    else
      select one trv related by val->V_TRV[R801];
      if ( not_empty trv )
        select one tfr related by trv->O_TFR[R829];
        select many tparm_set related by tfr->O_TPARM[R117]
                                           where selected.Name == param.a3_text;
        if ( empty tparm_set )
          trv.ParmListOK = false;
          ERR::reportParseError( msg: "Parameter ->%s" +
                  "<- is not associated with operation ->" + tfr.Name + "<-",
                                                    token: param.a1_rule_token);
        elif ( cardinality tparm_set > 1 )
          trv.ParmListOK = false;
          ERR::reportParseError(msg: "More than one parameter with name ->%s" +
                                        "<- for operation ->" + tfr.Name + "<-",
                                                   token: param.a1_rule_token );
        else
          select any tparm related by tfr->O_TPARM[R117] where
                                                 selected.Name == param.a3_text;
          return tparm.TParm_ID;
        end if;
      else
        select one msv related by val->V_MSV[R801];
        if not_empty msv
          select one ep related by msv->SPR_PEP[R841]->C_EP[R4501];
          if(empty ep)
            // if the executable property was not found
            // search for a required executable property
            select one ep related by msv->SPR_REP[R845]->C_EP[R4500];
          end if;
          select many pparm_set related by ep->C_PP[R4006]
                                           where selected.Name == param.a3_text;
          name = "";
          select one sig related by ep->C_AS[R4004];
          if not_empty sig
            name = sig.Name;
          else
            select one iop related by ep->C_IO[R4004];
            name = iop.Name;
          end if;
          if empty pparm_set
            msv.ParmListOK = false;
            ERR::reportParseError( msg: "Parameter ->%s" +
                  "<- is not associated with message ->"+ name +"<-",
                                                   token: param.a1_rule_token );
          elif ( cardinality pparm_set > 1 )
            msv.ParmListOK = false;
            ERR::reportParseError( msg: "More than one parameter with name ->" +
                                      "%s<- for message ->" + name + "<-",
                                                   token: param.a1_rule_token );
          else
            select any pparm related by ep->C_PP[R4006] where
                                                 selected.Name == param.a3_text;
            return pparm.PP_Id;
          end if;
        end if;
      end if;
    end if;
  end if;
  return param.a6_current_rule_id;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5d56e7ed-951f-4336-93bf-701519afc11a",
	"7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1a90bbfc-774d-4e38-a453-9b4e944cb56f",
	"7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	'a2_isAccess',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"5d56e7ed-951f-4336-93bf-701519afc11a",
	'');
INSERT INTO S_SPARM
	VALUES ("047c3612-22b2-4649-9605-269ff8a5d484",
	"7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1a90bbfc-774d-4e38-a453-9b4e944cb56f",
	'');
INSERT INTO S_SPARM
	VALUES ("3f5619cc-d517-4aa1-87b8-9930dcf44719",
	"7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"047c3612-22b2-4649-9605-269ff8a5d484",
	'');
INSERT INTO S_SPARM
	VALUES ("984065fe-c069-4da9-9d31-23d8fc78da41",
	"7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3f5619cc-d517-4aa1-87b8-9930dcf44719",
	'');
INSERT INTO S_SPARM
	VALUES ("37ab2835-50a0-44ed-a28a-99b29b85a9cb",
	"7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"984065fe-c069-4da9-9d31-23d8fc78da41",
	'');
INSERT INTO PE_PE
	VALUES ("7c15428c-3ba1-4acc-bcfe-c104b9ce975c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ce8c553f-d659-480d-bce5-0f98faf29f5a",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_parameters_loop4_start',
	'ParserValidateFunction: TRUE',
	'return GD::NULL_UNIQUE_ID();







































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5d150d4e-7c58-4aef-a13f-691161905401",
	"ce8c553f-d659-480d-bce5-0f98faf29f5a",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f675a9a7-4163-436e-bc10-3a3372cddeef",
	"ce8c553f-d659-480d-bce5-0f98faf29f5a",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5d150d4e-7c58-4aef-a13f-691161905401",
	'');
INSERT INTO S_SPARM
	VALUES ("ead062da-a001-469d-b352-d8c194b1185e",
	"ce8c553f-d659-480d-bce5-0f98faf29f5a",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f675a9a7-4163-436e-bc10-3a3372cddeef",
	'');
INSERT INTO PE_PE
	VALUES ("ce8c553f-d659-480d-bce5-0f98faf29f5a",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9c0ddee6-7572-457c-96be-e3d9abf6b999",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_parameters_loop4_end',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL where selected.Value_ID == param.a2_upper_ruleid_name;

parmName = "";
parmType = "";
if ( not_empty val )
  select one fnc related by val->V_FNV[R801];
  select one brv related by val->V_BRV[R801];
  select one trv related by val->V_TRV[R801];
  select one msv related by val->V_MSV[R801];
  if ( not_empty fnc )
    if ( param.b4_expr4_id == GD::NULL_UNIQUE_ID() )
	  val.dispose();
	  return GD::NULL_UNIQUE_ID();
    elif ( fnc.ParmListOK )
      select one sync related by fnc->S_SYNC[R827];
      select any sparm related by sync->S_SPARM[R24] 
           where selected.SParm_ID == param.b3_data_item3_id;
      if ( not_empty sparm )
        parmName = sparm.Name;
        parmType = "fnc";
      end if;
    end if;
  elif ( not_empty brv )
    if ( param.b4_expr4_id == GD::NULL_UNIQUE_ID() )
	  val.dispose();
	  return GD::NULL_UNIQUE_ID();
    elif ( brv.ParmListOK )
      select one brg related by brv->S_BRG[R828];
      select any bparm related by brg->S_BPARM[R21] 
         where selected.BParm_ID == param.b3_data_item3_id;
      if ( not_empty bparm )
        parmName = bparm.Name;
        parmType = "brv";
      end if;
    end if;
  elif ( not_empty trv )
    if ( param.b4_expr4_id == GD::NULL_UNIQUE_ID() )
	  val.dispose();
	  return GD::NULL_UNIQUE_ID();
    elif ( trv.ParmListOK )
      select one tfr related by trv->O_TFR[R829];
      select any tparm related by tfr->O_TPARM[R117]
         where selected.TParm_ID == param.b3_data_item3_id;
      if ( not_empty tparm )
        parmName = tparm.Name;
        parmType = "trv";
      end if;
    end if;
  elif not_empty msv
    if ( param.b4_expr4_id == GD::NULL_UNIQUE_ID() )
	  val.dispose();
	  return GD::NULL_UNIQUE_ID();
    elif ( msv.ParmListOK )
      select one ep related by msv->SPR_PEP[R841]->C_EP[R4501]; 
      if(empty ep)
        // if the executable property was not found
        // search for a required executable property
        select one ep related by msv->SPR_REP[R845]->C_EP[R4500];
      end if;
      select any pparm related by ep->C_PP[R4006]
                                    where selected.PP_Id == param.b3_data_item3_id;
      if ( not_empty pparm )
        parmName = pparm.Name;
        parmType = "msv";
      end if;
    end if;
  end if;

  if ( parmName != "" )
    select any expr from instances of V_VAL where selected.Value_ID == param.b4_expr4_id;
    if ( empty expr )
     ERR::reportParseError( msg: "Cannot find r-value for parameter ->"+parmName+"<-",
            token: param.a1_rule_token );
    else
      create object instance parm of V_PAR;
      relate parm to expr across R800;
      if ( parmType == "fnc" )
        relate parm to fnc across R817;
      elif ( parmType == "brv" )
        relate parm to brv across R810;
      elif ( parmType == "trv" )
        relate parm to trv across R811;
      elif ( parmType == "msv" )
        relate parm to msv across R842;
      end if;
      parm.Name = parmName;
      if ( param.a3_ruleid_name != param.b4_expr4_id )
        // nth (n > 1) time through the loop
        select any prev_parm from instances of V_PAR 
            where selected.Value_ID == param.a3_ruleid_name;
        if ( not_empty prev_parm and prev_parm != parm)
          relate prev_parm to parm across R816.''precedes'';
        end if;
      end if;
      
      // store the textual position of the parameter label
      parm.labelLineNumber = val.currentLaterParameterLabelLineNumber;
      parm.labelColumn = val.currentLaterParameterLabelColumn;

      return parm.Value_ID;
    end if;
  end if;
end if;
return param.a3_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7e98d3f6-1e34-433f-92e2-66f6a5ea50d4",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6f7b0cbe-6a61-4620-9d78-7d5d0b0db1b9",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7e98d3f6-1e34-433f-92e2-66f6a5ea50d4",
	'');
INSERT INTO S_SPARM
	VALUES ("d3393717-18de-46b0-ad9c-f88f5ad5fb75",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6f7b0cbe-6a61-4620-9d78-7d5d0b0db1b9",
	'');
INSERT INTO S_SPARM
	VALUES ("b1eb71d8-5861-457d-813f-ba3697d732c7",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d3393717-18de-46b0-ad9c-f88f5ad5fb75",
	'');
INSERT INTO S_SPARM
	VALUES ("3c68dc1a-280d-4384-bb64-991be6c39b2e",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'b1_data_item1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b1eb71d8-5861-457d-813f-ba3697d732c7",
	'');
INSERT INTO S_SPARM
	VALUES ("f9889f39-40d9-4fd3-83aa-6c4c33dec432",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'b2_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3c68dc1a-280d-4384-bb64-991be6c39b2e",
	'');
INSERT INTO S_SPARM
	VALUES ("d4f48efd-4da2-40c6-96cb-a9ceb9783f87",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'b3_data_item3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f9889f39-40d9-4fd3-83aa-6c4c33dec432",
	'');
INSERT INTO S_SPARM
	VALUES ("788a7867-2aa6-44d0-83d4-aa15a27091b4",
	"9c0ddee6-7572-457c-96be-e3d9abf6b999",
	'b4_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d4f48efd-4da2-40c6-96cb-a9ceb9783f87",
	'');
INSERT INTO PE_PE
	VALUES ("9c0ddee6-7572-457c-96be-e3d9abf6b999",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("992b6354-5dd7-4485-81a8-0c96b2141a3b",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_parameters_end',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL where selected.Value_ID == param.a2_upper_rule_id;

parmName = "";
parmType = "";
select one fnc related by val->V_FNV[R801];
if ( not_empty fnc and fnc.ParmListOK )
  if ( param.b2_expr2_id == GD::NULL_UNIQUE_ID() )
    fnc.ParmListOK = false;
  else
    select one sync related by fnc->S_SYNC[R827];
    select any sparm related by sync->S_SPARM[R24] 
         where selected.SParm_ID == param.b1_data_item1_id;
    parmName = sparm.Name;
    parmType = "fnc";
  end if;
else
  select one brv related by val->V_BRV[R801];
  if ( not_empty brv and brv.ParmListOK )
    if ( param.b2_expr2_id == GD::NULL_UNIQUE_ID() )
      brv.ParmListOK = false;
    else
      select one brg related by brv->S_BRG[R828];
      select any bparm related by brg->S_BPARM[R21] 
         where selected.BParm_ID == param.b1_data_item1_id;
      parmName = bparm.Name;
      parmType = "brv";
    end if;
  else
    select one trv related by val->V_TRV[R801];
    if ( not_empty trv and trv.ParmListOK )
      if ( param.b2_expr2_id == GD::NULL_UNIQUE_ID() )
        trv.ParmListOK = false;
      else
        select one tfr related by trv->O_TFR[R829];
        select any tparm related by tfr->O_TPARM[R117]
           where selected.TParm_ID == param.b1_data_item1_id;
        parmName = tparm.Name;
        parmType = "trv";
      end if;
    else
      select one msv related by val->V_MSV[R801];
      if not_empty msv and msv.ParmListOK
        if ( param.b2_expr2_id == GD::NULL_UNIQUE_ID() )
          msv.ParmListOK = false;
        else
          select one msg related by msv->SPR_PEP[R841]->C_EP[R4501];
          if(empty msg)
            // if the executable property was not found
            // search for a required executable property
            select one msg related by msv->SPR_REP[R845]->C_EP[R4500];
          end if;
          select any pparm related by msg->C_PP[R4006]
                                    where selected.PP_Id == param.b1_data_item1_id;
          parmName = pparm.Name;
          parmType = "msv";
        end if;
      end if;
    end if;
  end if;
end if;

if ( parmName != "" )
  select any expr from instances of V_VAL where selected.Value_ID == param.b2_expr2_id;
  create object instance parm of V_PAR;
  relate parm to expr across R800;
  if ( parmType == "fnc" )
    relate parm to fnc across R817;
  elif ( parmType == "brv" )
    select one brv related by val->V_BRV[R801];
    relate parm to brv across R810;
  elif ( parmType == "trv" )
    select one trv related by val->V_TRV[R801];
    relate parm to trv across R811;
  else
    select one msv related by val->V_MSV[R801];
    relate parm to msv across R842;
  end if;
  parm.Name = parmName;
  if ( param.b4_expr4_id != GD::NULL_UNIQUE_ID() )
    // this is the last in the list, get first in list
    select any next_parm from instances of V_PAR 
         where selected.Value_ID == param.b4_expr4_id;
    select one prev_parm related by next_parm->V_PAR[R816.''succeeds''];
    while ( not_empty prev_parm )
      next_parm = prev_parm;
      select one prev_parm related by next_parm->V_PAR[R816.''succeeds''];
    end while;
  
    relate parm to next_parm across R816.''precedes'';
  end if;

  // store the textual position of the parameter label
  parm.labelLineNumber = val.firstParameterLabelLineNumber;
  parm.labelColumn = val.firstParameterLabelColumn;

  return param.a2_upper_rule_id;
end if;
return param.a4_rule_id;









































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d1d79077-2dea-478e-a109-c685b2a770cb",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e1534b6c-7fb0-4bc2-9ef4-77784cd2c68e",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d1d79077-2dea-478e-a109-c685b2a770cb",
	'');
INSERT INTO S_SPARM
	VALUES ("7d9a4475-b05f-457f-99ac-ff432718af58",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e1534b6c-7fb0-4bc2-9ef4-77784cd2c68e",
	'');
INSERT INTO S_SPARM
	VALUES ("d66b7b44-9c65-48f3-b9aa-6230d0689fdc",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7d9a4475-b05f-457f-99ac-ff432718af58",
	'');
INSERT INTO S_SPARM
	VALUES ("a60ae204-4d80-4024-be2c-ec7ca1a8b8a6",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'b1_data_item1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d66b7b44-9c65-48f3-b9aa-6230d0689fdc",
	'');
INSERT INTO S_SPARM
	VALUES ("25e941ef-d738-42fe-8baa-f5ac09a1b834",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'b2_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a60ae204-4d80-4024-be2c-ec7ca1a8b8a6",
	'');
INSERT INTO S_SPARM
	VALUES ("89d75135-0d9f-41a0-adc7-c2da0f468cb5",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'b3_data_item3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"25e941ef-d738-42fe-8baa-f5ac09a1b834",
	'');
INSERT INTO S_SPARM
	VALUES ("1ae7bd65-475e-47dc-9b38-69a0f665cbe2",
	"992b6354-5dd7-4485-81a8-0c96b2141a3b",
	'b4_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"89d75135-0d9f-41a0-adc7-c2da0f468cb5",
	'');
INSERT INTO PE_PE
	VALUES ("992b6354-5dd7-4485-81a8-0c96b2141a3b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0d5fcf1f-c4e5-4f28-9228-2cb2e53df8c3",
	"00000000-0000-0000-0000-000000000000",
	'Instance_chain_start',
	'ParserValidateFunction: TRUE',
	'return GD::NULL_UNIQUE_ID();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("58e8feea-1c87-421a-8fa0-12b3a60ddc60",
	"0d5fcf1f-c4e5-4f28-9228-2cb2e53df8c3",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("0d5fcf1f-c4e5-4f28-9228-2cb2e53df8c3",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("55556bdb-0913-4fe2-907c-76ace500bdd2",
	"00000000-0000-0000-0000-000000000000",
	'Instance_chain_loop5_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;










































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9699afbf-8bf2-43bf-af14-c17829f8251c",
	"55556bdb-0913-4fe2-907c-76ace500bdd2",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("36e57aa0-27fc-4a3c-ad2d-ca3ccbb23cb0",
	"55556bdb-0913-4fe2-907c-76ace500bdd2",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9699afbf-8bf2-43bf-af14-c17829f8251c",
	'');
INSERT INTO S_SPARM
	VALUES ("c79118a5-8c11-4f85-83ce-3ac3c6af084f",
	"55556bdb-0913-4fe2-907c-76ace500bdd2",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"36e57aa0-27fc-4a3c-ad2d-ca3ccbb23cb0",
	'');
INSERT INTO PE_PE
	VALUES ("55556bdb-0913-4fe2-907c-76ace500bdd2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	"00000000-0000-0000-0000-000000000000",
	'Instance_chain_loop5_end',
	'ParserValidateFunction: TRUE',
	'select any right_obj from instances of O_OBJ 
    where ( selected.Obj_ID == param.b1_object_keyletters1_id );
rel_mult = Multiplicity::One;
mult = Multiplicity::One;
if ( param.a3_ruleid_name == GD::NULL_UNIQUE_ID() )
  // we are the first one
  select any val from instances of V_VAL 
       where ( selected.Value_ID == param.a2_upper_ruleid_name );
  select one left_obj  related by val->V_IRF[R801]->V_VAR[R808]->V_INT[R814]->O_OBJ[R818];
  if ( empty left_obj )
    select one left_obj related by val->V_ISR[R801]->V_VAR[R809]->V_INS[R814]->O_OBJ[R819];
    mult = Multiplicity::Many;
  end if;
  rel_mult =  ::is_valid_relationship( a1_left: left_obj.Obj_ID, a2_right:right_obj.Obj_ID,
         a3_rel: param.b2_relationship2_id, 
         a4_phrase: param.b3_phrase3_id, a5_rule_token: param.a1_rule_token,
       a6_chain_start_val: param.a2_upper_ruleid_name, a7_chain_id: GD::NULL_UNIQUE_ID() );
else
  select any prior_link from instances of ACT_LNK 
        where ( selected.Link_ID == param.a3_ruleid_name );
  select one left_obj related by prior_link->O_OBJ[R678];
  rel_mult =  ::is_valid_relationship( a1_left: left_obj.Obj_ID, a2_right:right_obj.Obj_ID,
         a3_rel: param.b2_relationship2_id, 
         a4_phrase: param.b3_phrase3_id, a5_rule_token: param.a1_rule_token,
        a6_chain_start_val: param.a2_upper_ruleid_name, a7_chain_id: prior_link.Link_ID );
end if;

if ( rel_mult == Multiplicity::Many and mult == Multiplicity::One )
  mult = Multiplicity::Many;
  // the other case where they are different (rel_mult == Multiplicity::One and mult == Multiplicity::Many) 
  // mult already has the correct value
end if;

create object instance link of ACT_LNK;
relate link to right_obj across R678;

select any rel from instances of R_REL where ( selected.Rel_ID == param.b2_relationship2_id );
relate link to rel across R681;
link.Mult = mult;

if ( param.b3_phrase3_id != GD::NULL_UNIQUE_ID() )
  current_scope = ::get_current_scope();
  select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
  link.Rel_Phrase = block.TempBuffer;

	// store the textual position of the phrase
	link.phraseLineNumber = block.currentAssociationPhraseLineNumber;
	link.phraseColumn = block.currentAssociationPhraseColumn;

  // clear the TempBuffer so that if there''s not a phrase on the next link
  // we don''t use the current one by mistake
  block.TempBuffer = "";
end if;

if ( param.a3_ruleid_name != GD::NULL_UNIQUE_ID() )
  select any prior_link from instances of ACT_LNK where ( selected.Link_ID == param.a3_ruleid_name );
  relate prior_link to link across R604.''precedes'';
end if;

// store the textual position of the class key-letters
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK 
	where (selected.Block_ID == current_scope);
link.modelClassKeyLettersLineNumber = block.currentKeyLettersLineNumber;
link.modelClassKeyLettersColumn = block.currentKeyLettersColumn;

// store the textual position of the association number
link.associationNumberLineNumber = block.currentAssociationNumberLineNumber;
link.associationNumberColumn = block.currentAssociationNumberColumn;

return link.Link_ID;











































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("98b49d4b-7549-469b-b9ad-7f8e6d6e018a",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1f1ef8be-b10a-4d3c-9f1b-34c4a8dfc9c6",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"98b49d4b-7549-469b-b9ad-7f8e6d6e018a",
	'');
INSERT INTO S_SPARM
	VALUES ("ba47d685-f2cf-466f-8ea4-e7afb5c8602d",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1f1ef8be-b10a-4d3c-9f1b-34c4a8dfc9c6",
	'');
INSERT INTO S_SPARM
	VALUES ("f04106d4-66f6-4e84-b4fc-e8987920db5d",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ba47d685-f2cf-466f-8ea4-e7afb5c8602d",
	'');
INSERT INTO S_SPARM
	VALUES ("7d0c4290-520f-4fbc-8e94-17e30b5f18ad",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'b1_object_keyletters1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f04106d4-66f6-4e84-b4fc-e8987920db5d",
	'');
INSERT INTO S_SPARM
	VALUES ("1a550d61-9e30-4e92-b1e5-c79183f0f68e",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'b2_relationship2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7d0c4290-520f-4fbc-8e94-17e30b5f18ad",
	'');
INSERT INTO S_SPARM
	VALUES ("d8aa77d7-d329-4fdf-bd8f-fc5ba06607f4",
	"dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	'b3_phrase3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1a550d61-9e30-4e92-b1e5-c79183f0f68e",
	'');
INSERT INTO PE_PE
	VALUES ("dfa448fe-2bb4-4473-8c5f-fbdad76dce30",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("67cb6e27-724c-4621-9c46-77ee60a39e70",
	"00000000-0000-0000-0000-000000000000",
	'Instance_chain_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7e83b11e-f775-4146-91ed-3d882c44c522",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("797d66bc-498b-49c7-abb9-74a1d5223bcd",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7e83b11e-f775-4146-91ed-3d882c44c522",
	'');
INSERT INTO S_SPARM
	VALUES ("8f797a00-33c9-4548-baab-27a538191b5d",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"797d66bc-498b-49c7-abb9-74a1d5223bcd",
	'');
INSERT INTO S_SPARM
	VALUES ("1d81f10d-086a-431d-82b3-d901e7d27981",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8f797a00-33c9-4548-baab-27a538191b5d",
	'');
INSERT INTO S_SPARM
	VALUES ("2bcf460d-50c9-4071-90cc-ba8f115ba6c7",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'b1_object_keyletters1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1d81f10d-086a-431d-82b3-d901e7d27981",
	'');
INSERT INTO S_SPARM
	VALUES ("7eec44bd-23cc-4c96-9f79-b9b4c92adc94",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'b2_relationship2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2bcf460d-50c9-4071-90cc-ba8f115ba6c7",
	'');
INSERT INTO S_SPARM
	VALUES ("19d9f9de-a53a-42f9-9a5b-124cf495ae95",
	"67cb6e27-724c-4621-9c46-77ee60a39e70",
	'b3_phrase3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7eec44bd-23cc-4c96-9f79-b9b4c92adc94",
	'');
INSERT INTO PE_PE
	VALUES ("67cb6e27-724c-4621-9c46-77ee60a39e70",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d24a8982-fca0-45c2-a142-ceb2cbf207b1",
	"00000000-0000-0000-0000-000000000000",
	'Object_spec_start',
	'ParserValidateFunction: TRUE',
	'// need to make sure this is true for statements without a where clause
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
blk.WhereSpecOK = true;
return param.a1_ruleid_name;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("24792c8b-d246-4251-9315-b15d8ce52050",
	"d24a8982-fca0-45c2-a142-ceb2cbf207b1",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d24a8982-fca0-45c2-a142-ceb2cbf207b1",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	"00000000-0000-0000-0000-000000000000",
	'Instance_chain_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c29e1bda-74b9-499e-a10d-e9f760cd6bb6",
	"8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("28645c47-d3c2-43de-938f-8556a5af4e00",
	"8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c29e1bda-74b9-499e-a10d-e9f760cd6bb6",
	'');
INSERT INTO S_SPARM
	VALUES ("e9ac486c-542b-4fd7-a2d0-cb0e766dcf75",
	"8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"28645c47-d3c2-43de-938f-8556a5af4e00",
	'');
INSERT INTO S_SPARM
	VALUES ("a5dddf25-2e03-4ddf-b2cf-d6107f6f3d5b",
	"8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e9ac486c-542b-4fd7-a2d0-cb0e766dcf75",
	'');
INSERT INTO S_SPARM
	VALUES ("ddd23a0b-d5d0-46f2-ae09-b07da7219127",
	"8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a5dddf25-2e03-4ddf-b2cf-d6107f6f3d5b",
	'');
INSERT INTO PE_PE
	VALUES ("8a1f4ae3-0ff5-442b-a059-d13dcd014476",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4930b807-b282-4a0d-8f79-17140c330b67",
	"00000000-0000-0000-0000-000000000000",
	'Where_spec_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
if ( param.a6_current_rule_id == GD::NULL_UNIQUE_ID() )
  blk.WhereSpecOK =  false;
else
  blk.WhereSpecOK = true;
end if;
return param.a6_current_rule_id;











































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9b00ad09-6fab-4fe8-8454-3a6871787550",
	"4930b807-b282-4a0d-8f79-17140c330b67",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8d332a2c-2ae8-4801-af02-9bc124f6e147",
	"4930b807-b282-4a0d-8f79-17140c330b67",
	'a2_isChain',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"9b00ad09-6fab-4fe8-8454-3a6871787550",
	'');
INSERT INTO S_SPARM
	VALUES ("0d546793-7e0b-474a-87b6-9e77ea63d76d",
	"4930b807-b282-4a0d-8f79-17140c330b67",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8d332a2c-2ae8-4801-af02-9bc124f6e147",
	'');
INSERT INTO S_SPARM
	VALUES ("0f991a0f-3cf9-4608-bad0-c39542d9c274",
	"4930b807-b282-4a0d-8f79-17140c330b67",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0d546793-7e0b-474a-87b6-9e77ea63d76d",
	'');
INSERT INTO S_SPARM
	VALUES ("4b465ca4-3cae-4c80-b23f-d8afee80358f",
	"4930b807-b282-4a0d-8f79-17140c330b67",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0f991a0f-3cf9-4608-bad0-c39542d9c274",
	'');
INSERT INTO S_SPARM
	VALUES ("7468101b-866d-4540-a653-57c7b64b5d07",
	"4930b807-b282-4a0d-8f79-17140c330b67",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4b465ca4-3cae-4c80-b23f-d8afee80358f",
	'');
INSERT INTO PE_PE
	VALUES ("4930b807-b282-4a0d-8f79-17140c330b67",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e3330485-e1e3-4cba-8185-b81df49179b0",
	"00000000-0000-0000-0000-000000000000",
	'Object_spec_end',
	'ParserValidateFunction: TRUE',
	'// ::Object_spec_end()
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);

where_spec_id = param.b3_where_spec3_id;
if ( param.b5_where_spec5_id != GD::NULL_UNIQUE_ID() )
  where_spec_id = param.b5_where_spec5_id;
end if;
if ( where_spec_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL where ( selected.Value_ID == where_spec_id );
  select one where_dt related by val->S_DT[R820];
  if ( empty where_dt or where_dt.Name != "boolean" )
    ::clear_rel_data( a1_chain_start_val: param.b1_local_variable1_id, 
        a2_chain_id: param.b2_instance_chain2_id, a3_where_val: where_spec_id );
    ERR::reportParseError( msg: "Expression within Select Where clause does not yield boolean result",
      token: param.a1_rule_token );
  end if;
end if;

if ( param.b2_instance_chain2_id != GD::NULL_UNIQUE_ID() )
  // related by

  select any link from instances of ACT_LNK 
       where ( selected.Link_ID == param.b2_instance_chain2_id );
  //  follow links back to beginning
  first_link = link;
  while ( not_empty link )
    first_link = link;
    select one link related by first_link->ACT_LNK[R604.''succeeds''];
  end while;

  create object instance sel of ACT_SEL;
  if ( param.b3_where_spec3_id != GD::NULL_UNIQUE_ID() )
    create object instance srw of ACT_SRW;
    relate sel to srw across R664;
    select any where_val from instances of V_VAL 
       where ( selected.Value_ID == param.b3_where_spec3_id );
    relate srw to where_val across R611;
  elif ( blk.WhereSpecOK )
    create object instance sr of ACT_SR;
    relate sel to sr across R664;
  else
    // there was an error in the where clause
    delete object instance sel;
    ::clear_rel_data( a1_chain_start_val: param.b1_local_variable1_id, 
        a2_chain_id: param.b2_instance_chain2_id, a3_where_val: param.b3_where_spec3_id );
    return GD::NULL_UNIQUE_ID();
  end if;
  select any start_point_ref from instances of V_VAL
     where ( selected.Value_ID == param.b1_local_variable1_id );
  relate sel to start_point_ref across R613;
  relate sel to first_link across R637;
  stmt_id =  ::statement_create();
  select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
  relate stmt to sel across R603;
  return stmt.Statement_ID;
elif ( param.b4_object_keyletters4_id != GD::NULL_UNIQUE_ID() )
  // from instances of
  select any objPe from instances of PE_PE  where
                          selected.Element_ID == param.b4_object_keyletters4_id;
  select one obj related by objPe->O_OBJ[R8001];

    // Specialized package class
    select any obj from instances of O_OBJ where
                              selected.Obj_ID == param.b4_object_keyletters4_id;

  if ( param.b5_where_spec5_id != GD::NULL_UNIQUE_ID() )
    select any val from instances of V_VAL where ( selected.Value_ID == param.b5_where_spec5_id );
    stmt_id =  ::statement_create();
    select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
    create object instance fiw of ACT_FIW;
    relate fiw to obj across R676;
    relate val to fiw across R610;
    relate stmt to fiw across R603;

    // store the textual position of the extent
    fiw.extentLineNumber = blk.currentKeyLettersLineNumber;
    fiw.extentColumn = blk.currentKeyLettersColumn;

    return stmt.Statement_ID;
  elif ( blk.WhereSpecOK )
    stmt_id =  ::statement_create();
    select any stmt from instances of ACT_SMT where selected.Statement_ID == stmt_id;
    create object instance fio of ACT_FIO;
    relate fio to obj across R677;
    relate stmt to fio across R603;

    // store the textual position of the extent
    fio.extentLineNumber = blk.currentKeyLettersLineNumber;
    fio.extentColumn = blk.currentKeyLettersColumn;

    return stmt.Statement_ID;
  else
    // there was an error in the where clause
    ::clear_rel_data( a1_chain_start_val: param.b1_local_variable1_id, 
        a2_chain_id: param.b2_instance_chain2_id, a3_where_val: param.b3_where_spec3_id );
    return GD::NULL_UNIQUE_ID();
  end if;
else
  // there was an error in the sub rules - delete any leftovers
  if ( param.b5_where_spec5_id != GD::NULL_UNIQUE_ID() )
    ::clear_rel_data( a1_chain_start_val: param.b1_local_variable1_id, 
        a2_chain_id: param.b2_instance_chain2_id, a3_where_val: param.b5_where_spec5_id  );
  else
    ::clear_rel_data( a1_chain_start_val: param.b1_local_variable1_id, 
        a2_chain_id: param.b2_instance_chain2_id, a3_where_val: param.b3_where_spec3_id  );
  end if;
  return GD::NULL_UNIQUE_ID();
end if;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c7d17ab5-3db8-4374-906e-f5e41ae0559a",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3911095d-ec8f-4de2-9567-18b0edf53045",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c7d17ab5-3db8-4374-906e-f5e41ae0559a",
	'');
INSERT INTO S_SPARM
	VALUES ("f8d753e4-44fb-452c-bdf9-653da4b38a30",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3911095d-ec8f-4de2-9567-18b0edf53045",
	'');
INSERT INTO S_SPARM
	VALUES ("113876a3-6b00-40e9-81ec-13014a80aa91",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f8d753e4-44fb-452c-bdf9-653da4b38a30",
	'');
INSERT INTO S_SPARM
	VALUES ("386e278e-b428-43cc-a796-a1ca8bc97f77",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"113876a3-6b00-40e9-81ec-13014a80aa91",
	'');
INSERT INTO S_SPARM
	VALUES ("659c458c-b258-417c-83ae-659504ea5268",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'b2_instance_chain2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"386e278e-b428-43cc-a796-a1ca8bc97f77",
	'');
INSERT INTO S_SPARM
	VALUES ("748fd9e9-8b88-489d-9838-25399f6f8b17",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'b3_where_spec3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"659c458c-b258-417c-83ae-659504ea5268",
	'');
INSERT INTO S_SPARM
	VALUES ("71d30a59-8633-4ea1-96c9-351d984f6e4b",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'b4_object_keyletters4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"748fd9e9-8b88-489d-9838-25399f6f8b17",
	'');
INSERT INTO S_SPARM
	VALUES ("c1cec6b4-acd9-46f2-8ddf-972171fd8dfc",
	"e3330485-e1e3-4cba-8185-b81df49179b0",
	'b5_where_spec5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"71d30a59-8633-4ea1-96c9-351d984f6e4b",
	'');
INSERT INTO PE_PE
	VALUES ("e3330485-e1e3-4cba-8185-b81df49179b0",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("010db56c-879e-4f35-ab00-d1239fab6b64",
	"00000000-0000-0000-0000-000000000000",
	'Param_data_access_start',
	'ParserValidateFunction: TRUE',
	'//::Param_data_access_start()
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one act related by blk->ACT_ACT[R612];
select one sab related by act->ACT_SAB[R698];
select one tab related by act->ACT_TAB[R698];
create object instance val of V_VAL;
if empty sab and empty tab
  // If this is not a state machine activity,
  // initialize as a parameter value
  create object instance pvl of V_PVL;
  relate pvl to val across R801;
else
  // If this _is_ a state machine activity,
  // initialize as an event datum value
  create object instance edv of V_EDV;
  relate edv to val across R801;
end if;
val.isLValue = param.a2_isLval;
return val.Value_ID;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a66d403c-113c-470a-9bbd-974c8bf66a30",
	"010db56c-879e-4f35-ab00-d1239fab6b64",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("be26904b-3f80-4057-8ab6-cdde07afc5eb",
	"010db56c-879e-4f35-ab00-d1239fab6b64",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"a66d403c-113c-470a-9bbd-974c8bf66a30",
	'');
INSERT INTO PE_PE
	VALUES ("010db56c-879e-4f35-ab00-d1239fab6b64",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7614b720-5411-4e92-bb36-26085899dc35",
	"00000000-0000-0000-0000-000000000000",
	'Param_data_access_end',
	'ParserValidateFunction: TRUE',
	'// ::Param_data_access_end()
result = param.a4_rule_id;
if ( param.b2_member_id == GD::NULL_UNIQUE_ID() and
                                param.a3_rule_begin_id ==  GD::NULL_UNIQUE_ID())
  // There is neither a field, nor a parameter reference,
  // dispose incompletely created value instances . . .
  ::clear_value_data();
  // ... and report an error
  ERR::reportParseError( msg:
                     "Field or parameter %s not found for parameter access",
                                                   token: param.a1_rule_token );
else
  current_scope = ::get_current_scope();
  select any blk from instances of ACT_BLK where
                                           (selected.Block_ID == current_scope);
  if (empty blk)
    ::clear_value_data();
    ERR::reportParseError(msg:"Block not found", token: param.a1_rule_token );
  end if;
  select many vals from instances of V_VAL where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
  for each val in vals
    relate val to blk across R826;
  end for;
end if;
return result;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("861b44a9-cd3b-4667-9a98-1c5321d6f88a",
	"7614b720-5411-4e92-bb36-26085899dc35",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f0d7908c-388c-4458-8da6-65dbc8e94c5c",
	"7614b720-5411-4e92-bb36-26085899dc35",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"861b44a9-cd3b-4667-9a98-1c5321d6f88a",
	'');
INSERT INTO S_SPARM
	VALUES ("53e7b6cb-bab5-4963-8fd5-277443bfa28c",
	"7614b720-5411-4e92-bb36-26085899dc35",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f0d7908c-388c-4458-8da6-65dbc8e94c5c",
	'');
INSERT INTO S_SPARM
	VALUES ("1a3d425e-50e2-4476-9397-45db8f9dc8c4",
	"7614b720-5411-4e92-bb36-26085899dc35",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"53e7b6cb-bab5-4963-8fd5-277443bfa28c",
	'');
INSERT INTO S_SPARM
	VALUES ("eea1b26e-d550-4202-ada4-feb11a662144",
	"7614b720-5411-4e92-bb36-26085899dc35",
	'b2_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1a3d425e-50e2-4476-9397-45db8f9dc8c4",
	'');
INSERT INTO PE_PE
	VALUES ("7614b720-5411-4e92-bb36-26085899dc35",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ede0868a-fbb1-4884-afe1-e1fcfb6bc3d2",
	"00000000-0000-0000-0000-000000000000",
	'Supp_data_start',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
blk.SupData1 = "";
blk.SupData2 = "";
return param.a1_ruleid_name;




',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b2c2844a-3653-4623-ac4f-312be2addf77",
	"ede0868a-fbb1-4884-afe1-e1fcfb6bc3d2",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ede0868a-fbb1-4884-afe1-e1fcfb6bc3d2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	"00000000-0000-0000-0000-000000000000",
	'Supp_data_item_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
blk.SupData2 = param.a3_text;
if ( blk.SupData1 == "" )
  // this is the first time, save value in both buffers
  blk.SupData1 = blk.SupData2;
end if;

// store the textual position of the data-item label
select any ess from instances of E_ESS where
                                selected.Statement_ID == param.a5_upper_rule_id;
if (not_empty ess)
  lineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
  column = ::getColumn(rule_token: param.a1_rule_token);
  if (ess.firstEventDataItemNameLineNumber == 0 and
                                          ess.firstEventDataItemNameColumn == 0)
	ess.firstEventDataItemNameLineNumber = lineNumber;
	ess.firstEventDataItemNameColumn = column;
  else 
	ess.currentLaterEventDataItemNameLineNumber = lineNumber;
	ess.currentLaterEventDataItemNameColumn = column;
  end if;
end if;

return param.a6_current_rule_id;




',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("070d4eb7-1967-45b8-9af8-c4d7f6eb467b",
	"6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e6224bcf-9b0f-4ab2-8758-77e05f039409",
	"6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"070d4eb7-1967-45b8-9af8-c4d7f6eb467b",
	'');
INSERT INTO S_SPARM
	VALUES ("a83392e0-ddc1-4bad-ab8d-3808f5e60117",
	"6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e6224bcf-9b0f-4ab2-8758-77e05f039409",
	'');
INSERT INTO S_SPARM
	VALUES ("59ade019-a46d-4195-b3f8-9617865f343f",
	"6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a83392e0-ddc1-4bad-ab8d-3808f5e60117",
	'');
INSERT INTO S_SPARM
	VALUES ("08c3a56c-e087-4096-a321-838726b94a58",
	"6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"59ade019-a46d-4195-b3f8-9617865f343f",
	'');
INSERT INTO PE_PE
	VALUES ("6a01505b-bb44-480a-a0bf-c21a2c8d204e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("531ab56c-5114-414e-8455-94745f295a46",
	"00000000-0000-0000-0000-000000000000",
	'Supp_data_loop6_start',
	'ParserValidateFunction: TRUE',
	'return GD::NULL_UNIQUE_ID();












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4e2c6651-0e37-4ae8-820b-46fe3ecfefeb",
	"531ab56c-5114-414e-8455-94745f295a46",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1a3fe3a7-8916-4577-b6bc-208eba0a695f",
	"531ab56c-5114-414e-8455-94745f295a46",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4e2c6651-0e37-4ae8-820b-46fe3ecfefeb",
	'');
INSERT INTO S_SPARM
	VALUES ("5d1ed0bb-ea8b-487c-b969-139820683c1e",
	"531ab56c-5114-414e-8455-94745f295a46",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1a3fe3a7-8916-4577-b6bc-208eba0a695f",
	'');
INSERT INTO PE_PE
	VALUES ("531ab56c-5114-414e-8455-94745f295a46",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	"00000000-0000-0000-0000-000000000000",
	'Supp_data_loop6_end',
	'ParserValidateFunction: TRUE',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a2_upper_ruleid_name;
if ( empty stmt )
  ERR::reportParseError( msg: "Cannot find Statement instance",
       token: param.a1_rule_token );
else
  select one ess related by stmt->E_ESS[R603];
  if ( empty ess )
    ERR::reportParseError( msg: "Statement is not an Event Specification Statement",
         token: param.a1_rule_token );
  else
    if ( ess.ParmListOK )
        if ( param.b4_expr4_id == GD::NULL_UNIQUE_ID() )
          ess.ParmListOK = false;
        end if;
    end if;

    if ( ess.ParmListOK )
      select any expr from instances of V_VAL where selected.Value_ID == param.b4_expr4_id;
      if ( empty expr )
        ERR::reportParseError( msg: "Cannot find r-value for ->%s<-",
            token: param.a1_rule_token );
      else  
        create object instance parm of V_PAR;
        relate parm to expr across R800;
        relate parm to ess across R700;

        select one blk related by stmt->ACT_BLK[R602];
        parm.Name = blk.SupData2;

        if ( param.a3_ruleid_name != param.b2_expr2_id )
          // nth (n > 1) time through the loop
          select any prev_parm from instances of V_PAR 
               where selected.Value_ID == param.a3_ruleid_name;
          if ( not_empty prev_parm and prev_parm != parm)
            relate prev_parm to parm across R816.''precedes'';
          end if;
        end if;

	      // store the textual position of the event data item label
	      parm.labelLineNumber = ess.currentLaterEventDataItemNameLineNumber;
	      parm.labelColumn = ess.currentLaterEventDataItemNameColumn;

        return parm.Value_ID;
      end if;
    end if;
  end if;
end if;
return GD::NULL_UNIQUE_ID();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("429d2db0-ecce-4f29-8b10-c3f5dd8e230e",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("abcb22e3-9fd5-4e33-872d-cf617f45744a",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"429d2db0-ecce-4f29-8b10-c3f5dd8e230e",
	'');
INSERT INTO S_SPARM
	VALUES ("955505fb-e396-457e-8053-e6d9601979a2",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"abcb22e3-9fd5-4e33-872d-cf617f45744a",
	'');
INSERT INTO S_SPARM
	VALUES ("804dba73-137b-43d0-a2c3-438f7695f75b",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"955505fb-e396-457e-8053-e6d9601979a2",
	'');
INSERT INTO S_SPARM
	VALUES ("bbc76c0c-26ae-4792-b49e-8a2b5514c190",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'b1_supp_data_item1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"804dba73-137b-43d0-a2c3-438f7695f75b",
	'');
INSERT INTO S_SPARM
	VALUES ("f837188f-c5a1-4d9f-8491-f50c7a9e71e4",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'b2_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bbc76c0c-26ae-4792-b49e-8a2b5514c190",
	'');
INSERT INTO S_SPARM
	VALUES ("6f9bb1c0-48a1-4d3f-b585-b1534d7e9777",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'b3_supp_data_item3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f837188f-c5a1-4d9f-8491-f50c7a9e71e4",
	'');
INSERT INTO S_SPARM
	VALUES ("e924c0d9-2d03-46c5-896c-2347bacf3f23",
	"f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	'b4_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6f9bb1c0-48a1-4d3f-b585-b1534d7e9777",
	'');
INSERT INTO PE_PE
	VALUES ("f2d0adf9-49e9-4a2e-aac4-61c66d4dda41",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	"00000000-0000-0000-0000-000000000000",
	'Supp_data_end',
	'ParserValidateFunction: TRUE',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a2_upper_rule_id;
select one ess related by stmt->E_ESS[R603];

if ( ess.ParmListOK )
    if ( param.b2_expr2_id == GD::NULL_UNIQUE_ID() )
      ess.ParmListOK = false;
    end if;
end if;

if ( ess.ParmListOK )
  select any expr from instances of V_VAL where selected.Value_ID == param.b2_expr2_id;
  create object instance parm of V_PAR;
  relate parm to expr across R800;
  relate parm to ess across R700;

  select one blk related by stmt->ACT_BLK[R602];
  parm.Name = blk.SupData1;

  if ( param.b4_expr4_id != GD::NULL_UNIQUE_ID() )
    // this is the last in the list, get first in list
    select any next_parm from instances of V_PAR 
         where selected.Value_ID == param.b4_expr4_id;
    select one prev_parm related by next_parm->V_PAR[R816.''succeeds''];
    while ( not_empty prev_parm )
      next_parm = prev_parm;
      select one prev_parm related by next_parm->V_PAR[R816.''succeeds''];
    end while;
  
    relate parm to next_parm across R816.''precedes'';
  end if;

  // store the textual position of the event data item label
  parm.labelLineNumber = ess.firstEventDataItemNameLineNumber;
  parm.labelColumn = ess.firstEventDataItemNameColumn;

  return param.a2_upper_rule_id;
else
  // there was a problem, clean up
  stmt.dispose();
  if ( param.b2_expr2_id != GD::NULL_UNIQUE_ID() )
    select any expr from instances of V_VAL where selected.Value_ID == param.b2_expr2_id;
    expr.dispose();
  end if;
  return GD::NULL_UNIQUE_ID();
end if;




',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ffcd6f42-dfe9-4565-aa35-8a71c8f98baa",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c6bc70a0-a645-4478-bd29-59407e41b559",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ffcd6f42-dfe9-4565-aa35-8a71c8f98baa",
	'');
INSERT INTO S_SPARM
	VALUES ("11b96cad-66e2-4524-bc5c-be454d8e3607",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c6bc70a0-a645-4478-bd29-59407e41b559",
	'');
INSERT INTO S_SPARM
	VALUES ("f67d6727-b854-436d-b28b-fedda2072d59",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"11b96cad-66e2-4524-bc5c-be454d8e3607",
	'');
INSERT INTO S_SPARM
	VALUES ("69e189e5-6135-4196-98f1-5f8486577c02",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'b1_supp_data_item1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f67d6727-b854-436d-b28b-fedda2072d59",
	'');
INSERT INTO S_SPARM
	VALUES ("f29c761e-0695-4a91-be32-8bcf7576f3a1",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'b2_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"69e189e5-6135-4196-98f1-5f8486577c02",
	'');
INSERT INTO S_SPARM
	VALUES ("24beb577-c4a2-4a0e-a60f-817b71bc767b",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'b3_supp_data_item3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f29c761e-0695-4a91-be32-8bcf7576f3a1",
	'');
INSERT INTO S_SPARM
	VALUES ("cf1597fd-7c1f-4b64-bd5f-a3f017381c92",
	"a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	'b4_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"24beb577-c4a2-4a0e-a60f-817b71bc767b",
	'');
INSERT INTO PE_PE
	VALUES ("a1d0f6b2-52fd-4f05-af8b-a6d70ab0735e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f8d5f50b-6ea3-48d7-aa5a-4dec9b446ffa",
	"00000000-0000-0000-0000-000000000000",
	'Function_invocation_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4711bc89-008a-4b52-9fe7-ffeab42e5a60",
	"f8d5f50b-6ea3-48d7-aa5a-4dec9b446ffa",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("11558f3d-3998-4de7-83c5-bfbe517734e2",
	"f8d5f50b-6ea3-48d7-aa5a-4dec9b446ffa",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"4711bc89-008a-4b52-9fe7-ffeab42e5a60",
	'');
INSERT INTO PE_PE
	VALUES ("f8d5f50b-6ea3-48d7-aa5a-4dec9b446ffa",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1ba527aa-2d22-43cb-8445-845466f06576",
	"00000000-0000-0000-0000-000000000000",
	'Function_function_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];
  // Check for function match for token
  if not_empty component
    component.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::FUNCTION,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  else
    package.collectVisibleElementsForName(name:param.a3_text,
         type:ElementTypeConstants::FUNCTION, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:false);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                 selected.Name == param.a3_text and 
                                selected.Type == ElementTypeConstants::FUNCTION; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                    selected.Name == param.a3_text and 
                                selected.Type == ElementTypeConstants::FUNCTION; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  FNCount = cardinality results;
  if FNCount == 0
    ERR::reportParseError( 
        msg: "Cannot find specified function ->%s<-", 
        token: param.a1_rule_token );
  elif FNCount == 1
    select any fn related by results->S_SYNC[R8001];
    create object instance fnc of V_FNV;
    fnc.ParmListOK = true;
    create object instance val of V_VAL;
    current_scope = ::get_current_scope();
    select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
    relate val to block across R826;
    relate val to fnc across R801;

    relate fn to fnc across R827;
    select one sdt related by fn->S_DT[R25];
    relate val to sdt across R820;

    val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
    val.setEndPosition();
	
    return val.Value_ID;
  elif FNCount > 1
    resultList = "";
    sep = "";
    for each result in results
      resultList = resultList + sep + result.getQualifiedName();
      sep = " ,";
    end for;
    ERR::reportParseError(msg: "Multiple functions found for ->%s<-: " +
                                           resultList, token: param.a1_rule_token);
  end if;
  return GD::NULL_UNIQUE_ID();
else
  select many sync_set from instances of S_SYNC where ( selected.Name == param.a3_text );
  if ( empty sync_set )
    ERR::reportParseError( msg: "Cannot find specified function ->%s<-",
          token: param.a1_rule_token );
  elif ( cardinality sync_set > 1 )
     ERR::reportParseError( msg:
"More than one function with name ->%s<- You will need to eventually run the audit and/or clear this up",
          token: param.a1_rule_token );
  else
    select any sync from instances of S_SYNC where ( selected.Name == param.a3_text );
    create object instance fnc of V_FNV;
    fnc.ParmListOK = true;
    create object instance val of V_VAL;
    current_scope = ::get_current_scope();
    select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
    relate val to block across R826;
    relate val to fnc across R801;

    relate sync to fnc across R827;
    select one sdt related by sync->S_DT[R25];
    relate val to sdt across R820;

    val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
    val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
    val.setEndPosition();
	
    return val.Value_ID;
  end if;
end if;
return param.a6_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("426d047f-6cf1-46ce-bc97-712cebad08e3",
	"1ba527aa-2d22-43cb-8445-845466f06576",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("295cb718-df00-4485-9fcc-278bcd08a7b0",
	"1ba527aa-2d22-43cb-8445-845466f06576",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"426d047f-6cf1-46ce-bc97-712cebad08e3",
	'');
INSERT INTO S_SPARM
	VALUES ("9e7a5696-f19e-48c1-bfb8-0b8753a344a6",
	"1ba527aa-2d22-43cb-8445-845466f06576",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"295cb718-df00-4485-9fcc-278bcd08a7b0",
	'');
INSERT INTO S_SPARM
	VALUES ("f6fa3901-f9bd-4431-a9c4-2fb3adfbf419",
	"1ba527aa-2d22-43cb-8445-845466f06576",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9e7a5696-f19e-48c1-bfb8-0b8753a344a6",
	'');
INSERT INTO S_SPARM
	VALUES ("671a1f9b-24a6-489a-9a70-f0231ed1bd15",
	"1ba527aa-2d22-43cb-8445-845466f06576",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f6fa3901-f9bd-4431-a9c4-2fb3adfbf419",
	'');
INSERT INTO PE_PE
	VALUES ("1ba527aa-2d22-43cb-8445-845466f06576",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("249f4491-520b-4d9f-a85f-8a8848e0c030",
	"00000000-0000-0000-0000-000000000000",
	'Function_invocation_end',
	'ParserValidateFunction: TRUE',
	'
// validate parameters

select any fnc from instances of V_FNV 
   where selected.Value_ID == param.b1_function_function1_id;

if (empty fnc)
  // an error has already been output and the
  // function value has been cleaned up
  return GD::NULL_UNIQUE_ID();
end if;

if ( not fnc.ParmListOK )
  // error already output, still need to clean up
  select one val related by fnc->V_VAL[R801];
  val.dispose();
  return GD::NULL_UNIQUE_ID();
end if;

select one sync related by fnc->S_SYNC[R827];
select many vparm_set related by fnc->V_PAR[R817];
select many sparm_set related by sync->S_SPARM[R24];
if ( cardinality vparm_set < cardinality sparm_set )
  select one val related by fnc->V_VAL[R801];
  val.dispose();
  ERR::reportParseError( msg: "Function ->"+sync.Name+
      "<- is missing corresponding parameter(s)",
          token: param.a1_rule_token );
else
  for each sparm in sparm_set
    found = false;
    for each vparm in vparm_set
      if ( sparm.Name == vparm.Name )
        found = true;
        err_msg="";
        select one parm_val related by vparm->V_VAL[R800];
        select one vdt related by parm_val->S_DT[R820];
        if (empty vdt)
          err_msg = "Parameter ->"+ sparm.Name +"<- value has an unknown data type.";
        elif ( ::data_types_compatible( dt1: sparm.DT_ID, dt2: vdt.DT_ID, op: "assign")  == GD::NULL_UNIQUE_ID() )
          err_msg = "Parameter ->"+ sparm.Name +"<- has been assigned value of different type";
        end if;
        if ( sparm.By_Ref == 1 )
          if ( ::is_readonly_value( val_id: vparm.Value_ID ) )
            err_msg = "Cannot pass read-only value to pass-by-reference parameter ->"+ sparm.Name + "<-";
          end if;
        end if;
        if (sparm.getDimensionsCnt()!= parm_val.getDimensions())
          err_msg = "Parameter ->"+ sparm.Name +"<- has incompatible array depth.";
        elif ( not parm_val.isElementCountValid() )
          err_msg = "Parameter ->"+ sparm.Name + "<- contains an Array Index Out of Bounds.";
        end if;
        if (err_msg == "")
          break;
        else 
          select one val related by fnc->V_VAL[R801];
          val.dispose();        
          ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
        end if;
      end if;
    end for;
    if ( not found )
      select one val related by fnc->V_VAL[R801];
      val.dispose();
      ERR::reportParseError( msg: "Function ->"+sync.Name+
          "<- is missing corresponding parameter(s)",
             token: param.a1_rule_token );
    end if;
  end for;

      // If execution gets here, all the data items from the database
      // were found in the parse data items.

      // If there are more data items in the parse then were found in the
      // database, that means there were redundant or extra data items in the
      // parameter list found by the parse.  Generate an error.

  if ( cardinality vparm_set > cardinality sparm_set )
    for each vparm in vparm_set
      found = false;
      for each sparm in sparm_set
        if ( sparm.Name == vparm.Name )
          found = true;
          break;
        end if;
      end for;
      if ( not found )
      select one val related by fnc->V_VAL[R801];
      val.dispose();
      ERR::reportParseError( msg: "Parameter ->"+ vparm.Name +
          "<- is not associated with function ->"+ sync.Name +"<-",
             token: param.a1_rule_token );
      end if;
    end for;

      // If it gets out of the loop without error, there must be
      // a redundant data item, so report the error
    select one val related by fnc->V_VAL[R801];
    val.dispose();
    ERR::reportParseError( msg: "Function ->"+sync.Name+
      "<- has redundant parameters",
          token: param.a1_rule_token );
    
  end if;
end if;
return param.b1_function_function1_id;


',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("46cd1e98-3ec8-434c-8b5d-dae16761dcee",
	"249f4491-520b-4d9f-a85f-8a8848e0c030",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e4016f1a-565d-428c-a14f-893d04200de1",
	"249f4491-520b-4d9f-a85f-8a8848e0c030",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"46cd1e98-3ec8-434c-8b5d-dae16761dcee",
	'');
INSERT INTO S_SPARM
	VALUES ("5303afa1-be8b-4c72-9bbc-1c0fda03d96a",
	"249f4491-520b-4d9f-a85f-8a8848e0c030",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e4016f1a-565d-428c-a14f-893d04200de1",
	'');
INSERT INTO S_SPARM
	VALUES ("b9793b61-8ddf-44e2-991b-82be699d49ca",
	"249f4491-520b-4d9f-a85f-8a8848e0c030",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5303afa1-be8b-4c72-9bbc-1c0fda03d96a",
	'');
INSERT INTO S_SPARM
	VALUES ("7ae6f31c-319f-4ca5-8da9-7ca2501ddcf3",
	"249f4491-520b-4d9f-a85f-8a8848e0c030",
	'b1_function_function1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b9793b61-8ddf-44e2-991b-82be699d49ca",
	'');
INSERT INTO S_SPARM
	VALUES ("f54d762a-153e-404f-94da-6eb614726e88",
	"249f4491-520b-4d9f-a85f-8a8848e0c030",
	'b2_invocation_parameters2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7ae6f31c-319f-4ca5-8da9-7ca2501ddcf3",
	'');
INSERT INTO PE_PE
	VALUES ("249f4491-520b-4d9f-a85f-8a8848e0c030",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b83a7fa3-3799-4328-bd17-19b9195cf21c",
	"00000000-0000-0000-0000-000000000000",
	'Transform_ib_invocation_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a08950c5-d3a0-4929-a94e-49bf711e3939",
	"b83a7fa3-3799-4328-bd17-19b9195cf21c",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d2a08d7-d0cb-442f-b53e-aac9a2eb1b80",
	"b83a7fa3-3799-4328-bd17-19b9195cf21c",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"a08950c5-d3a0-4929-a94e-49bf711e3939",
	'');
INSERT INTO PE_PE
	VALUES ("b83a7fa3-3799-4328-bd17-19b9195cf21c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	"00000000-0000-0000-0000-000000000000",
	'Transformer_function_validate',
	'ParserValidateFunction: TRUE',
	'if ( param.a2_isKeyLett )
  select any obj from instances of O_OBJ where  selected.Obj_ID == param.a6_current_rule_id;

  return ::is_valid_transform( 
      a1_obj_id: obj.Obj_ID, a2_name: param.a3_text, a3_rule_token: param.a1_rule_token, 
      a4_classBased:  true );
else
  select any var from instances of V_VAR
          where (selected.Var_ID == param.a6_current_rule_id );
  select one irv related by var->V_INT[R814];
  select one obj related by irv->O_OBJ[R818];
  if (not_empty obj)
    return ::is_valid_transform( 
        a1_obj_id: obj.Obj_ID, a2_name: param.a3_text, a3_rule_token: param.a1_rule_token,
        a4_classBased: false );
  else
      return GD::NULL_UNIQUE_ID(); 
  end if;
end if;










































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("86e0e329-a6af-460a-9402-4b534e075cca",
	"1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bab8294a-5053-4821-9897-8ac313b15f85",
	"1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	'a2_isKeyLett',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"86e0e329-a6af-460a-9402-4b534e075cca",
	'');
INSERT INTO S_SPARM
	VALUES ("2e52abf4-e09c-42ec-b7e8-2bca3839540c",
	"1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bab8294a-5053-4821-9897-8ac313b15f85",
	'');
INSERT INTO S_SPARM
	VALUES ("d0a17f0c-0e8a-4984-beeb-7e71e8378db0",
	"1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2e52abf4-e09c-42ec-b7e8-2bca3839540c",
	'');
INSERT INTO S_SPARM
	VALUES ("fdf9869b-4765-4a8e-a904-f5bcebf678c5",
	"1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d0a17f0c-0e8a-4984-beeb-7e71e8378db0",
	'');
INSERT INTO S_SPARM
	VALUES ("9ce7d797-7f3c-4c3a-a3a6-9805a5a50099",
	"1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fdf9869b-4765-4a8e-a904-f5bcebf678c5",
	'');
INSERT INTO PE_PE
	VALUES ("1dacf6f6-24e3-4676-b1d5-efb2247c2177",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	"00000000-0000-0000-0000-000000000000",
	'Transform_ib_invocation_end',
	'ParserValidateFunction: TRUE',
	'  select any trv from instances of V_TRV 
     where selected.Value_ID == param.b2_transformer_function2_id;
  select any var from instances of V_VAR
          where (selected.Var_ID == param.b1_inst_ref_var1_id );
  if ( ::selected_validate( name:var.Name, rule_token: param.a1_rule_token ) )
    current_scope = ::get_current_scope();
    select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
    if ( not_empty blk )
      blk.SelectedFound = true;
    end if;
  end if;
  select one irv related by var->V_INT[R814];
  select one obj related by irv->O_OBJ[R818];
  if (empty obj)
    ERR::reportParseError( msg:  "Variable ->" + var.Name + 
	        "<- does not exist in scope as an object instance variable",
            token: param.a1_rule_token );
  elif ( not_empty trv )
    ret_val =  ::Transform_invocation_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule_id: param.a2_upper_rule_id,
        a3_rule_begin_id: param.a3_rule_begin_id,
        a4_rule_id: param.a4_rule_id,
        b1_object_keyletters1_id: obj.Obj_ID,
        b2_transformer_function2_id: param.b2_transformer_function2_id,
        b3_invocation_parameters3_id: param. b3_invocation_parameters3_id );
    if ( ret_val != GD::NULL_UNIQUE_ID() )
      relate trv to var across R830;
    end if;
    return ret_val;  
  end if;
return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fc1f1fae-9459-4142-bfad-f6a02dd3c860",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9400aaaf-6294-4b97-8995-c706ac2fb9e6",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fc1f1fae-9459-4142-bfad-f6a02dd3c860",
	'');
INSERT INTO S_SPARM
	VALUES ("67defa10-4f05-4be7-842a-c47779ee6327",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9400aaaf-6294-4b97-8995-c706ac2fb9e6",
	'');
INSERT INTO S_SPARM
	VALUES ("86dbbd59-c742-4bb4-aa33-0207051d9a9f",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"67defa10-4f05-4be7-842a-c47779ee6327",
	'');
INSERT INTO S_SPARM
	VALUES ("3b6db93f-2da4-48e9-b140-383af71c25be",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'b1_inst_ref_var1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"86dbbd59-c742-4bb4-aa33-0207051d9a9f",
	'');
INSERT INTO S_SPARM
	VALUES ("9f4142d0-c3e6-432e-a801-025736a7258c",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'b2_transformer_function2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3b6db93f-2da4-48e9-b140-383af71c25be",
	'');
INSERT INTO S_SPARM
	VALUES ("bfcf5da4-644a-4379-9163-cbb5d9fa064c",
	"aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	'b3_invocation_parameters3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9f4142d0-c3e6-432e-a801-025736a7258c",
	'');
INSERT INTO PE_PE
	VALUES ("aad9d9e2-4c72-4ac1-9633-0637493d2af6",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dede822b-bb34-47fd-9808-efda4b323d63",
	"00000000-0000-0000-0000-000000000000",
	'Transform_invocation_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("73683b55-eacf-424f-827f-e60c31118827",
	"dede822b-bb34-47fd-9808-efda4b323d63",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5630e491-a455-4708-84af-13ebdc698c27",
	"dede822b-bb34-47fd-9808-efda4b323d63",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"73683b55-eacf-424f-827f-e60c31118827",
	'');
INSERT INTO PE_PE
	VALUES ("dede822b-bb34-47fd-9808-efda4b323d63",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("16ef4a23-3d53-4f43-998a-174f5c76937a",
	"00000000-0000-0000-0000-000000000000",
	'Transform_invocation_end',
	'ParserValidateFunction: TRUE',
	'
// validate parameters

select any trv from instances of V_TRV 
   where selected.Value_ID == param.b2_transformer_function2_id;

if ( not trv.ParmListOK )
  // error already output, still need to clean up
  select one val related by trv->V_VAL[R801];
  val.dispose();
  return GD::NULL_UNIQUE_ID();
end if;

select one tfr related by trv->O_TFR[R829];
select many vparm_set related by trv->V_PAR[R811];
select many tparm_set related by tfr->O_TPARM[R117];
if ( cardinality vparm_set < cardinality tparm_set )
  select one val related by trv->V_VAL[R801];
  val.dispose();
  ERR::reportParseError( msg: "Operation ->"+tfr.Name+
      "<- is missing corresponding parameter(s)",
          token: param.a1_rule_token );
else
  for each tparm in tparm_set
    found = false;
    for each vparm in vparm_set
      if ( tparm.Name == vparm.Name )
        found = true;
        err_msg = "";
        select one parm_val related by vparm->V_VAL[R800];
        select one vdt related by parm_val->S_DT[R820];
        if (empty vdt)
          err_msg = "Parameter ->"+ tparm.Name +"<- value has an unknown data type.";
        elif ( ::data_types_compatible( dt1: tparm.DT_ID, dt2: vdt.DT_ID, op: "assign")  == GD::NULL_UNIQUE_ID() )
          err_msg = "Parameter ->"+ tparm.Name +"<- has been assigned value of different type";
        end if;
        if ( tparm.By_Ref == 1 )
          if ( ::is_readonly_value( val_id: vparm.Value_ID ) )
            err_msg = "Cannot pass read-only value to pass-by-reference parameter ->"+ tparm.Name + "<-";
          end if;
        end if;
        if (tparm.getDimensionsCnt()!= parm_val.getDimensions())
          err_msg = "Parameter ->"+ tparm.Name +"<- has incompatible array depth.";
        elif ( not parm_val.isElementCountValid() )
          err_msg = "Parameter ->"+ tparm.Name + "<- contains an Array Index Out of Bounds.";
        end if;      
        if (err_msg == "")
          break;
        else 
          select one val related by trv->V_VAL[R801];
          val.dispose();        
          ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
        end if;
      end if;
    end for;
    if ( not found )
      select one val related by trv->V_VAL[R801];
      val.dispose();
      ERR::reportParseError( msg: "Operation ->"+tfr.Name+
          "<- is missing corresponding parameter(s)",
             token: param.a1_rule_token );
    end if;
  end for;

      // If execution gets here, all the data items from the database
      // were found in the parse data items.

      // If there are more data items in the parse then were found in the
      // database, that means there were redundant or extra data items in the
      // parameter list found by the parse.  Generate an error.

  if ( cardinality vparm_set > cardinality tparm_set )
    for each vparm in vparm_set
      found = false;
      for each tparm in tparm_set
        if ( tparm.Name == vparm.Name )
          found = true;
          break;
        end if;
      end for;
      if ( not found )
      select one val related by trv->V_VAL[R801];
      val.dispose();
      ERR::reportParseError( msg: "Parameter ->"+ vparm.Name +
          "<- is not associated with operation ->"+ tfr.Name +"<-",
             token: param.a1_rule_token );
      end if;
    end for;

      // If it gets out of the loop without error, there must be
      // a redundant data item, so report the error
    select one val related by trv->V_VAL[R801];
    val.dispose();
    ERR::reportParseError( msg: "Operation ->"+tfr.Name+
      "<- has redundant parameters",
          token: param.a1_rule_token );
    
  end if;
end if;
return param.b2_transformer_function2_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d1e0bc2a-7a93-453d-b3d6-ef69fce7aa82",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("def27c32-cd14-458a-9e6d-9ef10d18ec9c",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d1e0bc2a-7a93-453d-b3d6-ef69fce7aa82",
	'');
INSERT INTO S_SPARM
	VALUES ("4ce968d1-af67-46fa-ac74-e185cb41cd3f",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"def27c32-cd14-458a-9e6d-9ef10d18ec9c",
	'');
INSERT INTO S_SPARM
	VALUES ("c06f4b9f-ebf1-4107-90f8-5ff690ee1065",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4ce968d1-af67-46fa-ac74-e185cb41cd3f",
	'');
INSERT INTO S_SPARM
	VALUES ("1dfd68f7-578f-47cf-9de9-fc697fd4ff76",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'b1_object_keyletters1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c06f4b9f-ebf1-4107-90f8-5ff690ee1065",
	'');
INSERT INTO S_SPARM
	VALUES ("c30fee00-294b-46f8-afab-a835f648ef04",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'b2_transformer_function2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1dfd68f7-578f-47cf-9de9-fc697fd4ff76",
	'');
INSERT INTO S_SPARM
	VALUES ("c9883dbd-9318-4c59-a903-a226c2564a31",
	"16ef4a23-3d53-4f43-998a-174f5c76937a",
	'b3_invocation_parameters3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c30fee00-294b-46f8-afab-a835f648ef04",
	'');
INSERT INTO PE_PE
	VALUES ("16ef4a23-3d53-4f43-998a-174f5c76937a",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dd58f9af-8bfc-41b7-b1d3-2fc66ba411de",
	"00000000-0000-0000-0000-000000000000",
	'Where_spec_start',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);

select any obj from instances of O_OBJ where ( selected.Obj_ID == param.a1_ruleid_name );
if ( param.a2_isChain )
  select any link from instances of ACT_LNK
       where ( selected.Link_ID == param.a1_ruleid_name );
  select one obj related by link->O_OBJ[R678];
end if;

if ( empty obj )
  // If obj is empty, something went wrong preceeding this function.  Just bail
  // instead of continuing and crashing.
  return GD::NULL_UNIQUE_ID();
end if;

create object instance inst_ref of V_INT;
create object instance var_inst of V_VAR;
var_inst.Name = "Selected";
var_inst.Declared = true;
relate inst_ref to var_inst across R814;
relate inst_ref to obj across R818;
relate var_inst to blk across R823;

create object instance inst_ref of V_INT;
create object instance var_inst of V_VAR;
var_inst.Name = "SELECTED";
var_inst.Declared = true;
relate inst_ref to var_inst across R814;
relate inst_ref to obj across R818;
relate var_inst to blk across R823;

create object instance inst_ref of V_INT;
create object instance var_inst of V_VAR;
var_inst.Name = "selected";
var_inst.Declared = true;
relate inst_ref to var_inst across R814;
relate inst_ref to obj across R818;
relate var_inst to blk across R823;

::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var_inst.Var_ID, p3_obj_id:obj.Obj_ID);

current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
blk.SelectedFound = false;
blk.InWhereSpec = true;
blk.WhereSpecOK = true;

return param.a1_ruleid_name;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("76788360-5c36-4fde-9e43-b7600928842b",
	"dd58f9af-8bfc-41b7-b1d3-2fc66ba411de",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c98dd7ad-b76c-49a4-a17d-3277286aeed4",
	"dd58f9af-8bfc-41b7-b1d3-2fc66ba411de",
	'a2_isChain',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"76788360-5c36-4fde-9e43-b7600928842b",
	'');
INSERT INTO PE_PE
	VALUES ("dd58f9af-8bfc-41b7-b1d3-2fc66ba411de",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("22985cbd-5b44-41e0-b38a-70488da0e053",
	"00000000-0000-0000-0000-000000000000",
	'Where_spec_end',
	'ParserValidateFunction: TRUE',
	's1 = ::get_var_in_scope( name:"Selected", rule_token: param.a1_rule_token );
select any var from instances of V_VAR where (selected.Var_ID == s1 );
var.dispose();

s2 = ::get_var_in_scope( name:"SELECTED", rule_token: param.a1_rule_token );
select any var from instances of V_VAR where (selected.Var_ID == s2 );
var.dispose();

s3 = ::get_var_in_scope( name:"selected", rule_token: param.a1_rule_token );
select any var from instances of V_VAR where (selected.Var_ID == s3 );
var.dispose();

current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
blk.InWhereSpec = false;

if ( param.b1_expr1_id == GD::NULL_UNIQUE_ID() )
  blk.WhereSpecOK =  false;
end if;
return param.a4_rule_id;























































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b50a620e-db62-435b-8d81-6c1818da18c1",
	"22985cbd-5b44-41e0-b38a-70488da0e053",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("37692af8-5f7b-4c0f-9b03-40db9f609568",
	"22985cbd-5b44-41e0-b38a-70488da0e053",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b50a620e-db62-435b-8d81-6c1818da18c1",
	'');
INSERT INTO S_SPARM
	VALUES ("f04c2850-18f7-4256-8ba3-567c5eb3bb5c",
	"22985cbd-5b44-41e0-b38a-70488da0e053",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"37692af8-5f7b-4c0f-9b03-40db9f609568",
	'');
INSERT INTO S_SPARM
	VALUES ("615748fe-7846-4479-a791-343960cb93e8",
	"22985cbd-5b44-41e0-b38a-70488da0e053",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f04c2850-18f7-4256-8ba3-567c5eb3bb5c",
	'');
INSERT INTO S_SPARM
	VALUES ("4288c6b0-2bc7-4372-a9bc-9d2005b32428",
	"22985cbd-5b44-41e0-b38a-70488da0e053",
	'b1_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"615748fe-7846-4479-a791-343960cb93e8",
	'');
INSERT INTO PE_PE
	VALUES ("22985cbd-5b44-41e0-b38a-70488da0e053",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("243af4ce-e9b0-49fa-8603-2fe72b75f3ee",
	"00000000-0000-0000-0000-000000000000",
	'Data_item_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9f87413a-7dfa-4ae7-b649-3755ea005ea1",
	"243af4ce-e9b0-49fa-8603-2fe72b75f3ee",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9f918f0d-f68c-477d-b0f7-ba4dcf0bcd33",
	"243af4ce-e9b0-49fa-8603-2fe72b75f3ee",
	'a2_isAccess',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"9f87413a-7dfa-4ae7-b649-3755ea005ea1",
	'');
INSERT INTO PE_PE
	VALUES ("243af4ce-e9b0-49fa-8603-2fe72b75f3ee",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d19674e6-4ac4-44ea-a06f-3700e2556109",
	"00000000-0000-0000-0000-000000000000",
	'Data_item_name_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6d3df926-e6e6-4972-a5a3-0f1409d669e4",
	"d19674e6-4ac4-44ea-a06f-3700e2556109",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6a0794cb-bb6a-4117-af49-619db597fa94",
	"d19674e6-4ac4-44ea-a06f-3700e2556109",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6d3df926-e6e6-4972-a5a3-0f1409d669e4",
	'');
INSERT INTO S_SPARM
	VALUES ("2e91d87e-79fa-4c34-a9a6-c8ba3445999c",
	"d19674e6-4ac4-44ea-a06f-3700e2556109",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6a0794cb-bb6a-4117-af49-619db597fa94",
	'');
INSERT INTO S_SPARM
	VALUES ("50f52f06-085b-4b1e-a245-bbe5d610de1f",
	"d19674e6-4ac4-44ea-a06f-3700e2556109",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2e91d87e-79fa-4c34-a9a6-c8ba3445999c",
	'');
INSERT INTO S_SPARM
	VALUES ("aa020504-1645-4da4-8177-91d567f74040",
	"d19674e6-4ac4-44ea-a06f-3700e2556109",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"50f52f06-085b-4b1e-a245-bbe5d610de1f",
	'');
INSERT INTO PE_PE
	VALUES ("d19674e6-4ac4-44ea-a06f-3700e2556109",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d41ea99f-5711-405e-8484-73ca9d374069",
	"00000000-0000-0000-0000-000000000000",
	'Data_item_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4cb03160-f933-462c-b751-9ff98d74b631",
	"d41ea99f-5711-405e-8484-73ca9d374069",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fde0e17a-5f56-4aec-bfbd-d01cc3884fbc",
	"d41ea99f-5711-405e-8484-73ca9d374069",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4cb03160-f933-462c-b751-9ff98d74b631",
	'');
INSERT INTO S_SPARM
	VALUES ("bca56dd9-49a5-46fb-9365-ea085a664b12",
	"d41ea99f-5711-405e-8484-73ca9d374069",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fde0e17a-5f56-4aec-bfbd-d01cc3884fbc",
	'');
INSERT INTO S_SPARM
	VALUES ("6c0753e7-b3da-4c2c-b937-0e76db61e90e",
	"d41ea99f-5711-405e-8484-73ca9d374069",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bca56dd9-49a5-46fb-9365-ea085a664b12",
	'');
INSERT INTO S_SPARM
	VALUES ("7c54d061-cb0e-421e-8520-e3b88685372e",
	"d41ea99f-5711-405e-8484-73ca9d374069",
	'b1_data_item_name1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6c0753e7-b3da-4c2c-b937-0e76db61e90e",
	'');
INSERT INTO PE_PE
	VALUES ("d41ea99f-5711-405e-8484-73ca9d374069",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("958907f7-e2d3-4932-99b3-8e1ea4ea9cde",
	"00000000-0000-0000-0000-000000000000",
	'Transformer_function_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("82206d23-3cfe-454f-b4dc-8613e420e89f",
	"958907f7-e2d3-4932-99b3-8e1ea4ea9cde",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a1117535-c7a2-4209-bf1b-184a026bb593",
	"958907f7-e2d3-4932-99b3-8e1ea4ea9cde",
	'a2_isKeyLett',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"82206d23-3cfe-454f-b4dc-8613e420e89f",
	'');
INSERT INTO PE_PE
	VALUES ("958907f7-e2d3-4932-99b3-8e1ea4ea9cde",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7b132936-c623-47d2-bcf0-af30ee6810ad",
	"00000000-0000-0000-0000-000000000000",
	'Function_name_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;



































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fae18ee3-2bf5-4541-8cb7-dc717140b1c1",
	"7b132936-c623-47d2-bcf0-af30ee6810ad",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ec44b82c-5c5a-48c3-a9f9-e38a3b97ef6f",
	"7b132936-c623-47d2-bcf0-af30ee6810ad",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fae18ee3-2bf5-4541-8cb7-dc717140b1c1",
	'');
INSERT INTO S_SPARM
	VALUES ("b35ea37f-604c-4789-ae83-5834a19f87d5",
	"7b132936-c623-47d2-bcf0-af30ee6810ad",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ec44b82c-5c5a-48c3-a9f9-e38a3b97ef6f",
	'');
INSERT INTO S_SPARM
	VALUES ("2806620e-a1fd-4cdd-9d44-460091f5ef52",
	"7b132936-c623-47d2-bcf0-af30ee6810ad",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b35ea37f-604c-4789-ae83-5834a19f87d5",
	'');
INSERT INTO S_SPARM
	VALUES ("e9075f17-52cf-42e2-8378-0e87ac23b266",
	"7b132936-c623-47d2-bcf0-af30ee6810ad",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2806620e-a1fd-4cdd-9d44-460091f5ef52",
	'');
INSERT INTO PE_PE
	VALUES ("7b132936-c623-47d2-bcf0-af30ee6810ad",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	"00000000-0000-0000-0000-000000000000",
	'Transformer_function_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;



































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d3276795-00a1-48b3-8f00-83895050ccc1",
	"31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e77bb52e-be5f-4a9f-b024-dcec21ea8b83",
	"31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d3276795-00a1-48b3-8f00-83895050ccc1",
	'');
INSERT INTO S_SPARM
	VALUES ("378a4d00-182e-49a9-922a-cb2b25f517ef",
	"31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e77bb52e-be5f-4a9f-b024-dcec21ea8b83",
	'');
INSERT INTO S_SPARM
	VALUES ("e8c8da09-f9fc-430b-959c-64e6ca9d8da0",
	"31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"378a4d00-182e-49a9-922a-cb2b25f517ef",
	'');
INSERT INTO S_SPARM
	VALUES ("69929843-ddbc-4cd7-ac66-a5bb8d9cc5b3",
	"31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	'b1_function_name1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e8c8da09-f9fc-430b-959c-64e6ca9d8da0",
	'');
INSERT INTO PE_PE
	VALUES ("31401ec6-049b-4ca5-9d5f-1770bb43b72c",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f1a3bd26-f199-461c-b0b9-6453e018a226",
	"00000000-0000-0000-0000-000000000000",
	'Sub_expr_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("75b534aa-8a64-485d-a520-d4c0f719a971",
	"f1a3bd26-f199-461c-b0b9-6453e018a226",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f1a3bd26-f199-461c-b0b9-6453e018a226",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	"00000000-0000-0000-0000-000000000000",
	'Conjunction_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("55cd05b5-72ae-430e-ad76-26dcad0522c9",
	"bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4cf5a000-ccdf-4b0d-a1c5-8d15d848cc78",
	"bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"55cd05b5-72ae-430e-ad76-26dcad0522c9",
	'');
INSERT INTO S_SPARM
	VALUES ("14d2fe72-a9dc-4876-99a9-69abaf2e72d5",
	"bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4cf5a000-ccdf-4b0d-a1c5-8d15d848cc78",
	'');
INSERT INTO S_SPARM
	VALUES ("8d3d56bd-0eb1-4e79-828d-34355dec717b",
	"bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"14d2fe72-a9dc-4876-99a9-69abaf2e72d5",
	'');
INSERT INTO S_SPARM
	VALUES ("c9a42dcc-63c8-4c3b-87da-f8490826a6d0",
	"bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8d3d56bd-0eb1-4e79-828d-34355dec717b",
	'');
INSERT INTO PE_PE
	VALUES ("bfc7ed57-afe0-4f43-b83a-4d2bb13387af",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a3298c95-a150-401a-83ed-2ee12f663c25",
	"00000000-0000-0000-0000-000000000000",
	'Sub_expr_loop7_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1e316010-68e9-4b3b-9351-637d6428ad04",
	"a3298c95-a150-401a-83ed-2ee12f663c25",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f093655a-5574-41b5-a9fe-3a2d98ba983a",
	"a3298c95-a150-401a-83ed-2ee12f663c25",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1e316010-68e9-4b3b-9351-637d6428ad04",
	'');
INSERT INTO S_SPARM
	VALUES ("80c107f3-b9f7-4887-ba23-b92cefaf7096",
	"a3298c95-a150-401a-83ed-2ee12f663c25",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f093655a-5574-41b5-a9fe-3a2d98ba983a",
	'');
INSERT INTO PE_PE
	VALUES ("a3298c95-a150-401a-83ed-2ee12f663c25",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	"00000000-0000-0000-0000-000000000000",
	'Sub_expr_loop7_end',
	'ParserValidateFunction: TRUE',
	'if (param.b2_conjunction2_id != GD::NULL_UNIQUE_ID() )
  op_id = ::binary_operator_create( a1_text: "or", a2_dt_name: "boolean" );
  lhs_id = param.b1_conjunction1_id;
  if ( param.a3_ruleid_name != param.b1_conjunction1_id )
    lhs_id = param.a3_ruleid_name;
  end if;
  return  ::binary_operation_validate( a1_left_op: lhs_id, 
              a2_operator: op_id, 
              a3_right_op: param.b2_conjunction2_id, 
              a4_op_type: "boolean or expression",
              a5_set_dt: false, a6_rule_token: param.a1_rule_token, a7_rule_id:param.a3_ruleid_name );

end if;
return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("762136b5-0c32-42b0-bc09-9694e745308c",
	"a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b66d1f93-6641-49dd-a462-d9a3605571e9",
	"a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"762136b5-0c32-42b0-bc09-9694e745308c",
	'');
INSERT INTO S_SPARM
	VALUES ("96736fef-12ad-477c-8f20-6f5f47e81f39",
	"a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b66d1f93-6641-49dd-a462-d9a3605571e9",
	'');
INSERT INTO S_SPARM
	VALUES ("cbb2c78b-ccd0-497a-b584-b837ac0e7441",
	"a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"96736fef-12ad-477c-8f20-6f5f47e81f39",
	'');
INSERT INTO S_SPARM
	VALUES ("95ca7e76-bad9-4762-b514-50537298cd62",
	"a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	'b1_conjunction1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cbb2c78b-ccd0-497a-b584-b837ac0e7441",
	'');
INSERT INTO S_SPARM
	VALUES ("e06f7770-19c0-4dcf-bf19-2368b1872bac",
	"a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	'b2_conjunction2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"95ca7e76-bad9-4762-b514-50537298cd62",
	'');
INSERT INTO PE_PE
	VALUES ("a0f302e0-07e0-492a-8dbc-5eed3b13952e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	"00000000-0000-0000-0000-000000000000",
	'Sub_expr_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5e489be0-5197-412e-8b88-82fa2ba2da31",
	"f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d274ec97-4add-4baa-86da-9ae7fa0068b3",
	"f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5e489be0-5197-412e-8b88-82fa2ba2da31",
	'');
INSERT INTO S_SPARM
	VALUES ("056638b8-b57a-4141-b4d6-d1afe6e19997",
	"f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d274ec97-4add-4baa-86da-9ae7fa0068b3",
	'');
INSERT INTO S_SPARM
	VALUES ("7a43d113-e271-4697-b816-dae98ae41870",
	"f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"056638b8-b57a-4141-b4d6-d1afe6e19997",
	'');
INSERT INTO S_SPARM
	VALUES ("8b426729-20c2-49d8-ae04-0159bb926121",
	"f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	'b1_conjunction1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7a43d113-e271-4697-b816-dae98ae41870",
	'');
INSERT INTO S_SPARM
	VALUES ("6a377aed-8843-4fd4-b4c7-79425f9744be",
	"f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	'b2_conjunction2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8b426729-20c2-49d8-ae04-0159bb926121",
	'');
INSERT INTO PE_PE
	VALUES ("f229ce4b-8e44-4eb4-8751-b37a7f01844d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7efd06a1-df77-475e-ba2d-044c20f568e4",
	"00000000-0000-0000-0000-000000000000",
	'Conjunction_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cdeccf74-16db-4673-845c-83fc15e95b00",
	"7efd06a1-df77-475e-ba2d-044c20f568e4",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7efd06a1-df77-475e-ba2d-044c20f568e4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	"00000000-0000-0000-0000-000000000000",
	'Relational_expr_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("85c17ec2-3626-4111-81ea-0e2d7c57b30e",
	"bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a3f56335-3637-4cec-8998-01ffd863f937",
	"bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"85c17ec2-3626-4111-81ea-0e2d7c57b30e",
	'');
INSERT INTO S_SPARM
	VALUES ("7fe362f8-7904-4aed-b10a-481bd07770e7",
	"bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a3f56335-3637-4cec-8998-01ffd863f937",
	'');
INSERT INTO S_SPARM
	VALUES ("d70111dc-6fc0-4689-a26f-bb119eba21d3",
	"bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7fe362f8-7904-4aed-b10a-481bd07770e7",
	'');
INSERT INTO S_SPARM
	VALUES ("ac11265f-6c4a-4e79-a669-0e7f49250b5a",
	"bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d70111dc-6fc0-4689-a26f-bb119eba21d3",
	'');
INSERT INTO PE_PE
	VALUES ("bc9e8571-1bc7-45d4-a3d2-6b37b53a2e56",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0e2cc3cf-9b76-434f-ab51-9caa10f3acee",
	"00000000-0000-0000-0000-000000000000",
	'Conjunction_loop8_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e75153cb-e5f6-4979-82ab-21a84d1e6cb5",
	"0e2cc3cf-9b76-434f-ab51-9caa10f3acee",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a74313ff-724d-47f8-9b95-5774bb25d824",
	"0e2cc3cf-9b76-434f-ab51-9caa10f3acee",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e75153cb-e5f6-4979-82ab-21a84d1e6cb5",
	'');
INSERT INTO S_SPARM
	VALUES ("431cae67-6820-4a08-98f2-aeb8cf5c612b",
	"0e2cc3cf-9b76-434f-ab51-9caa10f3acee",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a74313ff-724d-47f8-9b95-5774bb25d824",
	'');
INSERT INTO PE_PE
	VALUES ("0e2cc3cf-9b76-434f-ab51-9caa10f3acee",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9295fe30-840b-469b-97a1-7813474ff54f",
	"00000000-0000-0000-0000-000000000000",
	'Conjunction_loop8_end',
	'ParserValidateFunction: TRUE',
	'if (param.b2_relational_expr2_id != GD::NULL_UNIQUE_ID() )
  op_id = ::binary_operator_create( a1_text: "and", a2_dt_name: "boolean" );
  lhs_id = param.b1_relational_expr1_id;
  if ( param.a3_ruleid_name != param.b1_relational_expr1_id )
    lhs_id = param.a3_ruleid_name;
  end if;
  return  ::binary_operation_validate( a1_left_op: lhs_id, 
              a2_operator: op_id, 
              a3_right_op: param.b2_relational_expr2_id, 
              a4_op_type: "boolean and expression",
              a5_set_dt: false, a6_rule_token: param.a1_rule_token, a7_rule_id:param.a3_ruleid_name );

end if;
return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("44c74cba-691d-41ec-8c9f-9603802725b9",
	"9295fe30-840b-469b-97a1-7813474ff54f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a913b010-09af-40bc-9073-4000c80a4248",
	"9295fe30-840b-469b-97a1-7813474ff54f",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"44c74cba-691d-41ec-8c9f-9603802725b9",
	'');
INSERT INTO S_SPARM
	VALUES ("0b971494-eafa-4c6d-88b0-d8293712ed3a",
	"9295fe30-840b-469b-97a1-7813474ff54f",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a913b010-09af-40bc-9073-4000c80a4248",
	'');
INSERT INTO S_SPARM
	VALUES ("69025ace-7702-4d99-b9f8-501951b7f807",
	"9295fe30-840b-469b-97a1-7813474ff54f",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0b971494-eafa-4c6d-88b0-d8293712ed3a",
	'');
INSERT INTO S_SPARM
	VALUES ("d14b443c-68d6-4640-9973-8561c208d9d0",
	"9295fe30-840b-469b-97a1-7813474ff54f",
	'b1_relational_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"69025ace-7702-4d99-b9f8-501951b7f807",
	'');
INSERT INTO S_SPARM
	VALUES ("1633fd8e-d09a-4678-b548-56d586e573a4",
	"9295fe30-840b-469b-97a1-7813474ff54f",
	'b2_relational_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d14b443c-68d6-4640-9973-8561c208d9d0",
	'');
INSERT INTO PE_PE
	VALUES ("9295fe30-840b-469b-97a1-7813474ff54f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	"00000000-0000-0000-0000-000000000000",
	'Conjunction_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b0b6cecf-213c-4ba0-ac8b-0167994eaa00",
	"2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("db80c89f-cdba-4c79-9ad6-4b16d0ee4507",
	"2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b0b6cecf-213c-4ba0-ac8b-0167994eaa00",
	'');
INSERT INTO S_SPARM
	VALUES ("a556ccbb-4add-40ac-825a-41aa30700622",
	"2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"db80c89f-cdba-4c79-9ad6-4b16d0ee4507",
	'');
INSERT INTO S_SPARM
	VALUES ("d6433997-72ce-4b72-93fa-417a0b26cbf3",
	"2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a556ccbb-4add-40ac-825a-41aa30700622",
	'');
INSERT INTO S_SPARM
	VALUES ("351aeaf1-5866-4d24-8115-d5ddd9f4e4ff",
	"2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	'b1_relational_expr1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d6433997-72ce-4b72-93fa-417a0b26cbf3",
	'');
INSERT INTO S_SPARM
	VALUES ("04fbc25a-6b3d-4308-b856-1767fdcf5f68",
	"2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	'b2_relational_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"351aeaf1-5866-4d24-8115-d5ddd9f4e4ff",
	'');
INSERT INTO PE_PE
	VALUES ("2e6c6bd3-c1fc-4cbd-98ac-65a32fb088ff",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f7571fcc-0f26-4aca-9a93-339c919a379f",
	"00000000-0000-0000-0000-000000000000",
	'Relational_expr_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8266bfbf-1d2e-419e-b1d9-ae46b1458949",
	"f7571fcc-0f26-4aca-9a93-339c919a379f",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f7571fcc-0f26-4aca-9a93-339c919a379f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	"00000000-0000-0000-0000-000000000000",
	'Addition_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("82ef1428-bfac-49b3-8591-41aea1f3d699",
	"6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("342ea559-7f01-4103-82f9-354a8ac6f30c",
	"6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"82ef1428-bfac-49b3-8591-41aea1f3d699",
	'');
INSERT INTO S_SPARM
	VALUES ("db2cbf53-2fe3-45bb-8ddc-3ed7470e5250",
	"6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"342ea559-7f01-4103-82f9-354a8ac6f30c",
	'');
INSERT INTO S_SPARM
	VALUES ("b393f1f2-912c-4f2a-8e9c-6652a7ed3c40",
	"6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"db2cbf53-2fe3-45bb-8ddc-3ed7470e5250",
	'');
INSERT INTO S_SPARM
	VALUES ("f67659a1-450f-4018-93f7-9476f3900cab",
	"6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b393f1f2-912c-4f2a-8e9c-6652a7ed3c40",
	'');
INSERT INTO PE_PE
	VALUES ("6d238870-0c06-4ded-bf0c-b861ab8c4f04",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("368acb98-1c32-40d8-8256-215fc69ccff4",
	"00000000-0000-0000-0000-000000000000",
	'Comparison_operator_validate',
	'ParserValidateFunction: TRUE',
	'
return ::binary_operator_create( a1_text: param.a3_text, a2_dt_name: "boolean" );










































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("001d9660-7c8b-4309-be52-22b5b1e5fc93",
	"368acb98-1c32-40d8-8256-215fc69ccff4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0449312a-465e-47b0-b19e-1a991cf10d70",
	"368acb98-1c32-40d8-8256-215fc69ccff4",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"001d9660-7c8b-4309-be52-22b5b1e5fc93",
	'');
INSERT INTO S_SPARM
	VALUES ("1267569a-8ebc-4332-8bf2-fb5d6522c4f6",
	"368acb98-1c32-40d8-8256-215fc69ccff4",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0449312a-465e-47b0-b19e-1a991cf10d70",
	'');
INSERT INTO S_SPARM
	VALUES ("4dbc04f0-46de-4ccc-9ce0-632761837362",
	"368acb98-1c32-40d8-8256-215fc69ccff4",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1267569a-8ebc-4332-8bf2-fb5d6522c4f6",
	'');
INSERT INTO S_SPARM
	VALUES ("e275e5e6-9995-4f16-962f-01b24f692799",
	"368acb98-1c32-40d8-8256-215fc69ccff4",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4dbc04f0-46de-4ccc-9ce0-632761837362",
	'');
INSERT INTO PE_PE
	VALUES ("368acb98-1c32-40d8-8256-215fc69ccff4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	"00000000-0000-0000-0000-000000000000",
	'Relational_expr_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b2_comparison_operator2_id != GD::NULL_UNIQUE_ID() )

  return  ::binary_operation_validate( a1_left_op: param.b1_addition1_id, 
              a2_operator: param.b2_comparison_operator2_id, 
              a3_right_op: param.b3_addition3_id, 
              a4_op_type: "relational expression",
              a5_set_dt: FALSE, a6_rule_token: param.a1_rule_token, a7_rule_id:param.a4_rule_id );

end if;

return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6aa063d3-d535-4f33-bd3a-861521dd0859",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("61bdf6a2-8a46-4ed8-a188-76586198d85f",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6aa063d3-d535-4f33-bd3a-861521dd0859",
	'');
INSERT INTO S_SPARM
	VALUES ("e2852c6b-b648-4454-8213-afec0cfa01b2",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"61bdf6a2-8a46-4ed8-a188-76586198d85f",
	'');
INSERT INTO S_SPARM
	VALUES ("37bf609d-5345-40a8-acda-f39b35fd1701",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e2852c6b-b648-4454-8213-afec0cfa01b2",
	'');
INSERT INTO S_SPARM
	VALUES ("1c4dd71f-4249-4b5e-954a-e9e9e6d85399",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'b1_addition1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"37bf609d-5345-40a8-acda-f39b35fd1701",
	'');
INSERT INTO S_SPARM
	VALUES ("572a1282-6528-4a56-8ca1-e41974cba33e",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'b2_comparison_operator2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1c4dd71f-4249-4b5e-954a-e9e9e6d85399",
	'');
INSERT INTO S_SPARM
	VALUES ("66838b15-9772-4258-aea0-f572c395aa2b",
	"5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	'b3_addition3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"572a1282-6528-4a56-8ca1-e41974cba33e",
	'');
INSERT INTO PE_PE
	VALUES ("5c7bcf36-cd3c-4699-8ed4-ec0b19b60f40",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4991d6d4-0f3f-4c2a-8034-01eadbdecbf3",
	"00000000-0000-0000-0000-000000000000",
	'Addition_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7039924d-f9a3-4545-9c93-9331f8695434",
	"4991d6d4-0f3f-4c2a-8034-01eadbdecbf3",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4991d6d4-0f3f-4c2a-8034-01eadbdecbf3",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("673e4200-d686-406e-9660-b0a70e351d12",
	"00000000-0000-0000-0000-000000000000",
	'Multiplication_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("88427ac9-3587-4df7-b595-395df904bfe5",
	"673e4200-d686-406e-9660-b0a70e351d12",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ee47b4b3-dcc7-4172-81a2-9e18f50a51ae",
	"673e4200-d686-406e-9660-b0a70e351d12",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"88427ac9-3587-4df7-b595-395df904bfe5",
	'');
INSERT INTO S_SPARM
	VALUES ("50e18e05-c3fb-4851-95c1-3c5fbf483d6b",
	"673e4200-d686-406e-9660-b0a70e351d12",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ee47b4b3-dcc7-4172-81a2-9e18f50a51ae",
	'');
INSERT INTO S_SPARM
	VALUES ("01be327b-4c37-4961-a94f-74b8a2c0ffeb",
	"673e4200-d686-406e-9660-b0a70e351d12",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"50e18e05-c3fb-4851-95c1-3c5fbf483d6b",
	'');
INSERT INTO S_SPARM
	VALUES ("9a5e9ab0-adaa-4c37-8e47-ff5265a22b31",
	"673e4200-d686-406e-9660-b0a70e351d12",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"01be327b-4c37-4961-a94f-74b8a2c0ffeb",
	'');
INSERT INTO PE_PE
	VALUES ("673e4200-d686-406e-9660-b0a70e351d12",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e4e6548b-47b8-4257-a55a-b3761062242b",
	"00000000-0000-0000-0000-000000000000",
	'Addition_loop9_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("61d55b2a-cb06-4dd2-8136-1debfa8aaab3",
	"e4e6548b-47b8-4257-a55a-b3761062242b",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a903ea9a-8e8a-4a5b-a1b4-f5b221bba9a1",
	"e4e6548b-47b8-4257-a55a-b3761062242b",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"61d55b2a-cb06-4dd2-8136-1debfa8aaab3",
	'');
INSERT INTO S_SPARM
	VALUES ("c58279d7-cf67-41e4-ae48-414aafd2c9bc",
	"e4e6548b-47b8-4257-a55a-b3761062242b",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a903ea9a-8e8a-4a5b-a1b4-f5b221bba9a1",
	'');
INSERT INTO PE_PE
	VALUES ("e4e6548b-47b8-4257-a55a-b3761062242b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("554f57d8-d98d-41b6-833a-17325d2ac2ab",
	"00000000-0000-0000-0000-000000000000",
	'Plus_or_minus_validate',
	'ParserValidateFunction: TRUE',
	'
return ::binary_operator_create( a1_text: param.a3_text, a2_dt_name: "" );











































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5b317ccb-9fbf-4b71-a9fb-49052bf2f85a",
	"554f57d8-d98d-41b6-833a-17325d2ac2ab",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5db29eb3-501a-4f51-96d7-0edfdd9ad646",
	"554f57d8-d98d-41b6-833a-17325d2ac2ab",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5b317ccb-9fbf-4b71-a9fb-49052bf2f85a",
	'');
INSERT INTO S_SPARM
	VALUES ("e083d082-4374-45e7-a358-ef2cb1a7fdc4",
	"554f57d8-d98d-41b6-833a-17325d2ac2ab",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5db29eb3-501a-4f51-96d7-0edfdd9ad646",
	'');
INSERT INTO S_SPARM
	VALUES ("09b73f15-8f72-4f50-9a50-dca549137da7",
	"554f57d8-d98d-41b6-833a-17325d2ac2ab",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e083d082-4374-45e7-a358-ef2cb1a7fdc4",
	'');
INSERT INTO S_SPARM
	VALUES ("57aef138-eafc-4569-883d-cc7a64050ad7",
	"554f57d8-d98d-41b6-833a-17325d2ac2ab",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"09b73f15-8f72-4f50-9a50-dca549137da7",
	'');
INSERT INTO PE_PE
	VALUES ("554f57d8-d98d-41b6-833a-17325d2ac2ab",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2da55453-7c0d-4edc-919c-8bf5104b07a9",
	"00000000-0000-0000-0000-000000000000",
	'Addition_loop9_end',
	'ParserValidateFunction: TRUE',
	'if (param.b2_plus_or_minus2_id != GD::NULL_UNIQUE_ID() )
  lhs_id = param.b1_multiplication1_id;
  if ( param.a3_ruleid_name != param.b1_multiplication1_id )
    lhs_id = param.a3_ruleid_name;
  end if;
  return  ::binary_operation_validate( a1_left_op: lhs_id, 
              a2_operator: param.b2_plus_or_minus2_id, 
              a3_right_op: param.b3_multiplication3_id, 
              a4_op_type: "addition expression",
              a5_set_dt: TRUE, a6_rule_token: param.a1_rule_token, a7_rule_id:param.a3_ruleid_name );

end if;
return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a4b8f19e-417f-44de-b185-6f5898be1f69",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("65cb5c52-3852-4ab3-ad52-15e46b9ffac3",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a4b8f19e-417f-44de-b185-6f5898be1f69",
	'');
INSERT INTO S_SPARM
	VALUES ("0f747e6e-423c-4e4e-acd2-3bbf567c71d7",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"65cb5c52-3852-4ab3-ad52-15e46b9ffac3",
	'');
INSERT INTO S_SPARM
	VALUES ("357ce342-96f8-4341-98ac-ff7ac7c1b5ac",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0f747e6e-423c-4e4e-acd2-3bbf567c71d7",
	'');
INSERT INTO S_SPARM
	VALUES ("3777b61b-4774-4d81-8f73-82be7f8e4ae0",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'b1_multiplication1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"357ce342-96f8-4341-98ac-ff7ac7c1b5ac",
	'');
INSERT INTO S_SPARM
	VALUES ("85deb5d5-4a2c-44b7-8ead-bd39b45ee99d",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'b2_plus_or_minus2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3777b61b-4774-4d81-8f73-82be7f8e4ae0",
	'');
INSERT INTO S_SPARM
	VALUES ("6dd4757d-4d77-4d66-b811-091616c566f8",
	"2da55453-7c0d-4edc-919c-8bf5104b07a9",
	'b3_multiplication3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"85deb5d5-4a2c-44b7-8ead-bd39b45ee99d",
	'');
INSERT INTO PE_PE
	VALUES ("2da55453-7c0d-4edc-919c-8bf5104b07a9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d866cb73-6a73-4847-97eb-8455ee9ff9df",
	"00000000-0000-0000-0000-000000000000",
	'Addition_end',
	'ParserValidateFunction: TRUE',
	'
return param.a4_rule_id;









































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e567c3f1-29a1-4eb5-98e0-4ba0129c912e",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("08529130-9856-4cbd-bc13-7ac5bdbc45a5",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e567c3f1-29a1-4eb5-98e0-4ba0129c912e",
	'');
INSERT INTO S_SPARM
	VALUES ("05ddd5da-1815-450e-a309-4ba5277d1d5e",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"08529130-9856-4cbd-bc13-7ac5bdbc45a5",
	'');
INSERT INTO S_SPARM
	VALUES ("e1de6af4-18e0-42d1-a960-90b19aa7cba9",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"05ddd5da-1815-450e-a309-4ba5277d1d5e",
	'');
INSERT INTO S_SPARM
	VALUES ("b72aa8b6-a933-4b87-9f43-729a06b68a9e",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'b1_multiplication1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e1de6af4-18e0-42d1-a960-90b19aa7cba9",
	'');
INSERT INTO S_SPARM
	VALUES ("44af8366-5a4b-4e55-be8f-226928ed6a0b",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'b2_plus_or_minus2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b72aa8b6-a933-4b87-9f43-729a06b68a9e",
	'');
INSERT INTO S_SPARM
	VALUES ("2ec89cf4-f1b8-4621-b51d-e21dd646f3fc",
	"d866cb73-6a73-4847-97eb-8455ee9ff9df",
	'b3_multiplication3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"44af8366-5a4b-4e55-be8f-226928ed6a0b",
	'');
INSERT INTO PE_PE
	VALUES ("d866cb73-6a73-4847-97eb-8455ee9ff9df",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("38ded3fb-63fa-48a6-9cd5-16cdaca95b65",
	"00000000-0000-0000-0000-000000000000",
	'Multiplication_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("96e9e487-9269-49eb-9973-dafb45f28c80",
	"38ded3fb-63fa-48a6-9cd5-16cdaca95b65",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("38ded3fb-63fa-48a6-9cd5-16cdaca95b65",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2404cbe-ec15-436e-9aa7-a62644b22263",
	"00000000-0000-0000-0000-000000000000",
	'Boolean_negation_validate',
	'ParserValidateFunction: TRUE',
	'
return ::unary_operation_validate( a1_rule_token: param.a1_rule_token, 
    a2_op_type: "boolean negation", a3_op_dt_name: "boolean",
    a4_dt_name: "boolean", a5_val_id: param.a6_current_rule_id,
    a6_text: "not", a7_rule_id: param.a6_current_rule_id );













































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a9d2e28b-9c14-424c-a56f-ed8784b617ed",
	"a2404cbe-ec15-436e-9aa7-a62644b22263",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e1851e97-ff18-4fd4-bae9-508df3e623c8",
	"a2404cbe-ec15-436e-9aa7-a62644b22263",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a9d2e28b-9c14-424c-a56f-ed8784b617ed",
	'');
INSERT INTO S_SPARM
	VALUES ("a744b7bd-ced4-4e1d-8996-b9ead14779fc",
	"a2404cbe-ec15-436e-9aa7-a62644b22263",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e1851e97-ff18-4fd4-bae9-508df3e623c8",
	'');
INSERT INTO S_SPARM
	VALUES ("9acce6c8-9ef3-45f0-9933-6aabbddaf000",
	"a2404cbe-ec15-436e-9aa7-a62644b22263",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a744b7bd-ced4-4e1d-8996-b9ead14779fc",
	'');
INSERT INTO S_SPARM
	VALUES ("330f00fa-c8e3-45f1-aa48-6baebe5b15c5",
	"a2404cbe-ec15-436e-9aa7-a62644b22263",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9acce6c8-9ef3-45f0-9933-6aabbddaf000",
	'');
INSERT INTO PE_PE
	VALUES ("a2404cbe-ec15-436e-9aa7-a62644b22263",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("66acc844-5601-49df-87eb-5248a07af9f9",
	"00000000-0000-0000-0000-000000000000",
	'Sign_expr_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("04e3cc9e-aecb-437e-abd4-dae3d6554905",
	"66acc844-5601-49df-87eb-5248a07af9f9",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("70719261-ae95-4014-9958-874433b8d09b",
	"66acc844-5601-49df-87eb-5248a07af9f9",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"04e3cc9e-aecb-437e-abd4-dae3d6554905",
	'');
INSERT INTO S_SPARM
	VALUES ("e1e115be-2e93-432b-b658-e586642bd26d",
	"66acc844-5601-49df-87eb-5248a07af9f9",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"70719261-ae95-4014-9958-874433b8d09b",
	'');
INSERT INTO S_SPARM
	VALUES ("6b6150d4-64f1-4273-afb4-dc5e23f9535d",
	"66acc844-5601-49df-87eb-5248a07af9f9",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e1e115be-2e93-432b-b658-e586642bd26d",
	'');
INSERT INTO S_SPARM
	VALUES ("7aae8436-52d1-4fdd-9982-4c83b9e4021c",
	"66acc844-5601-49df-87eb-5248a07af9f9",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6b6150d4-64f1-4273-afb4-dc5e23f9535d",
	'');
INSERT INTO PE_PE
	VALUES ("66acc844-5601-49df-87eb-5248a07af9f9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("369267f2-9ca0-4d23-a90c-7c93e999c06f",
	"00000000-0000-0000-0000-000000000000",
	'Multiplication_loop10_start',
	'ParserValidateFunction: TRUE',
	'return param.a2_rule_begin_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9346b551-c312-44a2-ab3e-ef1e55768342",
	"369267f2-9ca0-4d23-a90c-7c93e999c06f",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4082cf3c-501c-4086-9fa7-9d92fc41cd8e",
	"369267f2-9ca0-4d23-a90c-7c93e999c06f",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9346b551-c312-44a2-ab3e-ef1e55768342",
	'');
INSERT INTO S_SPARM
	VALUES ("bf08b4fd-d86f-434f-a415-54bd90055c1f",
	"369267f2-9ca0-4d23-a90c-7c93e999c06f",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4082cf3c-501c-4086-9fa7-9d92fc41cd8e",
	'');
INSERT INTO PE_PE
	VALUES ("369267f2-9ca0-4d23-a90c-7c93e999c06f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b99e0c92-280c-464c-843a-57c30957d72e",
	"00000000-0000-0000-0000-000000000000",
	'Mult_op_validate',
	'ParserValidateFunction: TRUE',
	'
return ::binary_operator_create( a1_text: param.a3_text, a2_dt_name: "" );










































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ab77c3fd-194d-424c-89e9-a3beb0db0ec7",
	"b99e0c92-280c-464c-843a-57c30957d72e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e89235ff-0ad4-4c19-ada5-18cea3246fbd",
	"b99e0c92-280c-464c-843a-57c30957d72e",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ab77c3fd-194d-424c-89e9-a3beb0db0ec7",
	'');
INSERT INTO S_SPARM
	VALUES ("565a5bdb-ffd4-4151-9298-650edb10de2d",
	"b99e0c92-280c-464c-843a-57c30957d72e",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e89235ff-0ad4-4c19-ada5-18cea3246fbd",
	'');
INSERT INTO S_SPARM
	VALUES ("46514454-53d3-4aec-ba9a-4d51b1b33211",
	"b99e0c92-280c-464c-843a-57c30957d72e",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"565a5bdb-ffd4-4151-9298-650edb10de2d",
	'');
INSERT INTO S_SPARM
	VALUES ("ed0c1c1c-7b79-4ec3-86fc-891a6c839486",
	"b99e0c92-280c-464c-843a-57c30957d72e",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"46514454-53d3-4aec-ba9a-4d51b1b33211",
	'');
INSERT INTO PE_PE
	VALUES ("b99e0c92-280c-464c-843a-57c30957d72e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("627426cf-5efc-4d15-9bba-072a538a4ffa",
	"00000000-0000-0000-0000-000000000000",
	'Multiplication_loop10_end',
	'ParserValidateFunction: TRUE',
	'if (param.b3_mult_op3_id != GD::NULL_UNIQUE_ID() )
  lhs_id = param.b2_sign_expr2_id;
  if ( param.a3_ruleid_name != param.b2_sign_expr2_id )
    lhs_id = param.a3_ruleid_name;
  end if;
  return  ::binary_operation_validate( a1_left_op: lhs_id, 
              a2_operator: param.b3_mult_op3_id, 
              a3_right_op: param.b4_sign_expr4_id, 
              a4_op_type: "multiplication expression",
              a5_set_dt: TRUE, a6_rule_token: param.a1_rule_token, a7_rule_id:param.a3_ruleid_name );

end if;
return param.a3_ruleid_name;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d5a837a7-796d-4660-ac98-e38adf759cd0",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("52c58837-1142-4fdf-9ecd-40e4185bbaf8",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d5a837a7-796d-4660-ac98-e38adf759cd0",
	'');
INSERT INTO S_SPARM
	VALUES ("d792b3cb-63ba-4491-811b-2a674b59aead",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"52c58837-1142-4fdf-9ecd-40e4185bbaf8",
	'');
INSERT INTO S_SPARM
	VALUES ("a6cdb4bd-e4c3-4c5b-a4e0-328ecfcbe1a9",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d792b3cb-63ba-4491-811b-2a674b59aead",
	'');
INSERT INTO S_SPARM
	VALUES ("de628715-a476-4970-bc41-75bafbe3a3fd",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'b1_boolean_negation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a6cdb4bd-e4c3-4c5b-a4e0-328ecfcbe1a9",
	'');
INSERT INTO S_SPARM
	VALUES ("2d80adbe-52c7-4c9c-a57f-dd8610b9dae5",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'b2_sign_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"de628715-a476-4970-bc41-75bafbe3a3fd",
	'');
INSERT INTO S_SPARM
	VALUES ("020d2dd4-ac47-4488-af8d-e300ea946a60",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'b3_mult_op3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2d80adbe-52c7-4c9c-a57f-dd8610b9dae5",
	'');
INSERT INTO S_SPARM
	VALUES ("2074620d-10ff-4b36-b10a-13f86dba218f",
	"627426cf-5efc-4d15-9bba-072a538a4ffa",
	'b4_sign_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"020d2dd4-ac47-4488-af8d-e300ea946a60",
	'');
INSERT INTO PE_PE
	VALUES ("627426cf-5efc-4d15-9bba-072a538a4ffa",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	"00000000-0000-0000-0000-000000000000",
	'Multiplication_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("80013a86-eb42-4eb2-ae7a-f14717eb2511",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("30ab4fae-007d-4e94-ac6b-7530adc8e91c",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"80013a86-eb42-4eb2-ae7a-f14717eb2511",
	'');
INSERT INTO S_SPARM
	VALUES ("50fa13e3-3c0f-4ba0-a7bf-864c50fc15e8",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"30ab4fae-007d-4e94-ac6b-7530adc8e91c",
	'');
INSERT INTO S_SPARM
	VALUES ("0b169b6b-e4a5-4126-8044-4e9c6263c879",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"50fa13e3-3c0f-4ba0-a7bf-864c50fc15e8",
	'');
INSERT INTO S_SPARM
	VALUES ("b5da197a-2e96-4bc5-bc5d-d514dca7a51f",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'b1_boolean_negation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0b169b6b-e4a5-4126-8044-4e9c6263c879",
	'');
INSERT INTO S_SPARM
	VALUES ("d5d22528-f263-4a3a-b3fb-af5968041e91",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'b2_sign_expr2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b5da197a-2e96-4bc5-bc5d-d514dca7a51f",
	'');
INSERT INTO S_SPARM
	VALUES ("135a9c0d-a782-4198-b669-4433be6a8b94",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'b3_mult_op3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d5d22528-f263-4a3a-b3fb-af5968041e91",
	'');
INSERT INTO S_SPARM
	VALUES ("7575326d-b031-4ae9-adf5-00fa5ffcad2b",
	"d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	'b4_sign_expr4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"135a9c0d-a782-4198-b669-4433be6a8b94",
	'');
INSERT INTO PE_PE
	VALUES ("d6a04005-5f25-4978-98f9-3e2408f1f7d8",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("35157084-10d6-461f-83fd-40aa99131cf9",
	"00000000-0000-0000-0000-000000000000",
	'Sign_expr_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d47ec01b-fb5d-40af-b786-d640ba252bec",
	"35157084-10d6-461f-83fd-40aa99131cf9",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("35157084-10d6-461f-83fd-40aa99131cf9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("93312800-8714-4cc7-943b-1849cba021f5",
	"00000000-0000-0000-0000-000000000000",
	'Term_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("83eecd19-0605-4a3d-a978-6c7f77ee0d64",
	"93312800-8714-4cc7-943b-1849cba021f5",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d4673fd8-5f48-46de-b799-7f4229ebc1ea",
	"93312800-8714-4cc7-943b-1849cba021f5",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"83eecd19-0605-4a3d-a978-6c7f77ee0d64",
	'');
INSERT INTO S_SPARM
	VALUES ("120c3a5b-509e-45be-ba28-3b94df2b013d",
	"93312800-8714-4cc7-943b-1849cba021f5",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d4673fd8-5f48-46de-b799-7f4229ebc1ea",
	'');
INSERT INTO S_SPARM
	VALUES ("6e92660b-7c37-4669-ad33-de70a05418b0",
	"93312800-8714-4cc7-943b-1849cba021f5",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"120c3a5b-509e-45be-ba28-3b94df2b013d",
	'');
INSERT INTO S_SPARM
	VALUES ("1367fdf7-1cac-41e9-8313-ec3b63fad546",
	"93312800-8714-4cc7-943b-1849cba021f5",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6e92660b-7c37-4669-ad33-de70a05418b0",
	'');
INSERT INTO PE_PE
	VALUES ("93312800-8714-4cc7-943b-1849cba021f5",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aeadf833-4d28-464f-af7f-f56458b7b6ea",
	"00000000-0000-0000-0000-000000000000",
	'Sign_expr_end',
	'ParserValidateFunction: TRUE',
	'
if ( param.b1_plus_or_minus1_id != GD::NULL_UNIQUE_ID() )
  select any val from instances of V_VAL 
    where ( selected.Value_ID == param.b1_plus_or_minus1_id );
  select one bin related by val->V_BIN[R801];

  select any operand from instances of V_VAL 
        where ( selected.Value_ID == param.b2_term2_id );
  if ( empty operand  )
    val.dispose();
    ERR::reportParseError( msg: "Operand not found for unary" + bin.Operator,
        token: param.a1_rule_token );
  else
    select one op_dt related by operand->S_DT[R820];
    if ( empty op_dt )
      val.dispose();
      operand.dispose();
      ERR::reportParseError( msg: "Operand for unary "+bin.Operator+"  has unknown data type.",
            token: param.a1_rule_token );
    else
      select one op_udt related by op_dt->S_UDT[R17];
      if ( not_empty op_udt )
        core_id = op_udt.getCoreType();
        select any op_dt_pe from instances of PE_PE
                                       where (selected.Element_ID == core_id);
        select one op_dt related by op_dt_pe->S_DT[R8001];
      end if;
      if ( op_dt.Name != "integer" and op_dt.Name != "real" )
        val.dispose();
        operand.dispose();
        ERR::reportParseError( msg: "Incompatible operand for unary " + bin.Operator,
              token: param.a1_rule_token );
      else
        // migrate to unary op
        create object instance u of V_UNY;
        u.Operator = bin.Operator;
        unrelate bin from val across R801;
        bin.dispose();
        relate val to op_dt across R820;
        relate val to u across R801;
        relate u to operand across R804;
        return val.Value_ID;
      end if;
    end if;
  end if;
end if;
return param.a4_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("72aaec89-600b-47b5-bef6-f9b8d2d58002",
	"aeadf833-4d28-464f-af7f-f56458b7b6ea",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("cf74628d-a060-49f1-906b-b068441fc894",
	"aeadf833-4d28-464f-af7f-f56458b7b6ea",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"72aaec89-600b-47b5-bef6-f9b8d2d58002",
	'');
INSERT INTO S_SPARM
	VALUES ("07344247-60a3-4a81-b446-a8dc750809e7",
	"aeadf833-4d28-464f-af7f-f56458b7b6ea",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cf74628d-a060-49f1-906b-b068441fc894",
	'');
INSERT INTO S_SPARM
	VALUES ("a443e67a-82f1-4572-a696-621d09f1c964",
	"aeadf833-4d28-464f-af7f-f56458b7b6ea",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"07344247-60a3-4a81-b446-a8dc750809e7",
	'');
INSERT INTO S_SPARM
	VALUES ("662df9dc-b86f-43a2-828c-55cf490129c2",
	"aeadf833-4d28-464f-af7f-f56458b7b6ea",
	'b1_plus_or_minus1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a443e67a-82f1-4572-a696-621d09f1c964",
	'');
INSERT INTO S_SPARM
	VALUES ("43865263-c1aa-41f1-8071-147b69fe8716",
	"aeadf833-4d28-464f-af7f-f56458b7b6ea",
	'b2_term2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"662df9dc-b86f-43a2-828c-55cf490129c2",
	'');
INSERT INTO PE_PE
	VALUES ("aeadf833-4d28-464f-af7f-f56458b7b6ea",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("581b4c15-73c5-4377-a7b3-4f5c630ee7ae",
	"00000000-0000-0000-0000-000000000000",
	'Term_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("561e7b62-a043-424e-bc8d-7116debb644a",
	"581b4c15-73c5-4377-a7b3-4f5c630ee7ae",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("581b4c15-73c5-4377-a7b3-4f5c630ee7ae",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	"00000000-0000-0000-0000-000000000000",
	'Cardinality_op_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;


































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("40d034f0-b878-412c-a950-b237ec4f9032",
	"b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5ea41085-6921-4027-84c8-1e6718503b21",
	"b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"40d034f0-b878-412c-a950-b237ec4f9032",
	'');
INSERT INTO S_SPARM
	VALUES ("563e90de-bfa4-4550-9a90-13437ec51af5",
	"b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5ea41085-6921-4027-84c8-1e6718503b21",
	'');
INSERT INTO S_SPARM
	VALUES ("aa138078-cad9-4bd1-8f11-92df17d18680",
	"b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"563e90de-bfa4-4550-9a90-13437ec51af5",
	'');
INSERT INTO S_SPARM
	VALUES ("2dcac113-949d-44cc-a92d-e9f34e12254b",
	"b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"aa138078-cad9-4bd1-8f11-92df17d18680",
	'');
INSERT INTO PE_PE
	VALUES ("b4cd60d2-35d6-49bd-a845-d2ae10785e96",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e30d2535-7aed-4c55-943d-8c61523f6a61",
	"00000000-0000-0000-0000-000000000000",
	'Empty_op_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;

































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fcfdaea9-31f6-48ca-b212-d84e6df339fe",
	"e30d2535-7aed-4c55-943d-8c61523f6a61",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("396e5fb0-df11-4235-acfc-d184916ae634",
	"e30d2535-7aed-4c55-943d-8c61523f6a61",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fcfdaea9-31f6-48ca-b212-d84e6df339fe",
	'');
INSERT INTO S_SPARM
	VALUES ("66646936-054b-4902-8064-e329dfc1d85e",
	"e30d2535-7aed-4c55-943d-8c61523f6a61",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"396e5fb0-df11-4235-acfc-d184916ae634",
	'');
INSERT INTO S_SPARM
	VALUES ("2dc12907-5a1c-4a3b-b717-3ff687e1daea",
	"e30d2535-7aed-4c55-943d-8c61523f6a61",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"66646936-054b-4902-8064-e329dfc1d85e",
	'');
INSERT INTO S_SPARM
	VALUES ("9c5349e4-8185-4d72-bc6b-2fb0886375f1",
	"e30d2535-7aed-4c55-943d-8c61523f6a61",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2dc12907-5a1c-4a3b-b717-3ff687e1daea",
	'');
INSERT INTO PE_PE
	VALUES ("e30d2535-7aed-4c55-943d-8c61523f6a61",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	"00000000-0000-0000-0000-000000000000",
	'Not_empty_op_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;

































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ac6a3bbb-865c-441d-b797-3026ba0f2a43",
	"08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a267cb45-a9da-4f6b-b931-e211a0c5990f",
	"08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ac6a3bbb-865c-441d-b797-3026ba0f2a43",
	'');
INSERT INTO S_SPARM
	VALUES ("d39636be-ebe6-4919-8faf-613b9217c6a4",
	"08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a267cb45-a9da-4f6b-b931-e211a0c5990f",
	'');
INSERT INTO S_SPARM
	VALUES ("a96c4b3d-db04-46a6-8008-af50dccb97c9",
	"08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d39636be-ebe6-4919-8faf-613b9217c6a4",
	'');
INSERT INTO S_SPARM
	VALUES ("d4499c49-ab93-4573-a7b4-7d98fa8ff995",
	"08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a96c4b3d-db04-46a6-8008-af50dccb97c9",
	'');
INSERT INTO PE_PE
	VALUES ("08057ce2-2176-4195-b164-4a9bd3a2ae7e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("68d1c95b-252a-408c-bb7e-c0054faf0386",
	"00000000-0000-0000-0000-000000000000",
	'Rval_validate',
	'ParserValidateFunction: TRUE',
	'// Get the block that is currently being parsed
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);

allowOps = PREF::getBoolean( name:"bridgepoint_prefs_allow_operations_in_where" );

// Now we check for elements that are illegal inside a select...where... clause
if ( (allowOps == false ) and (block.InWhereSpec == true) ) 
  // Get the value instance out of this block that we are currently validating
  select any val related by block->V_VAL[R826] where ( selected.Value_ID == param.a4_rule_ref_id );
  if ( empty val )
    // an error has already been output and the value has been cleaned up
    return GD::NULL_UNIQUE_ID();
  end if;

  // If we get here, the value is part of a where clause, so check for disallowed actions
  select one fnv related by val->V_FNV[R801];  // Function Value
  select one trv related by val->V_TRV[R801];  // Operation Value
  select one msv related by val->V_MSV[R801];  // Message Value
  select one brv related by val->V_BRV[R801];  // Bridge Value
  select one avl related by val->V_AVL[R801];  // Attribute Value Reference

  if ( not_empty fnv )
    ERR::reportParseError( 
      msg: "Function calls are not allowed inside a where condition.", 
      token: param.a1_rule_token );
  elif ( not_empty trv )
    ERR::reportParseError( 
      msg: "Operation calls are not allowed inside a where condition.", 
      token: param.a1_rule_token );
  elif ( not_empty msv )
    ERR::reportParseError( 
      msg: "Message calls are not allowed inside a where condition.", 
      token: param.a1_rule_token );
  elif ( not_empty brv )
    ERR::reportParseError( 
      msg: "Bridge calls are not allowed inside a where condition.", 
      token: param.a1_rule_token );
  elif ( not_empty avl )
    select one dbattr related by avl->O_ATTR[R806]->O_BATTR[R106]->O_DBATTR[R107];
    if ( not_empty dbattr )
      ERR::reportParseError( 
        msg: "Accessing a derived base attribute value is not allowed inside a where condition.", 
        token: param.a1_rule_token );
    end if;
  end if;
end if;

return param.a6_current_rule_id;







































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("97d19897-c170-4f2d-abb7-f7c13fff76e8",
	"68d1c95b-252a-408c-bb7e-c0054faf0386",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9453c6e4-030c-4f76-b56e-a1825d681141",
	"68d1c95b-252a-408c-bb7e-c0054faf0386",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"97d19897-c170-4f2d-abb7-f7c13fff76e8",
	'');
INSERT INTO S_SPARM
	VALUES ("09fb4335-569c-44a5-b190-dfbead0b8400",
	"68d1c95b-252a-408c-bb7e-c0054faf0386",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9453c6e4-030c-4f76-b56e-a1825d681141",
	'');
INSERT INTO S_SPARM
	VALUES ("751f30d4-6d20-49db-bc87-aa8c04112414",
	"68d1c95b-252a-408c-bb7e-c0054faf0386",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"09fb4335-569c-44a5-b190-dfbead0b8400",
	'');
INSERT INTO S_SPARM
	VALUES ("8d0dc6c0-adb4-454e-8c74-c125325ccaf9",
	"68d1c95b-252a-408c-bb7e-c0054faf0386",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"751f30d4-6d20-49db-bc87-aa8c04112414",
	'');
INSERT INTO PE_PE
	VALUES ("68d1c95b-252a-408c-bb7e-c0054faf0386",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fb781743-ddcb-430c-b41f-1ae825214f16",
	"00000000-0000-0000-0000-000000000000",
	'Term_end',
	'ParserValidateFunction: TRUE',
	'if ( param.b1_cardinality_op1_id != GD::NULL_UNIQUE_ID() )
  return param.b1_cardinality_op1_id;
end if;

if ( param.b2_empty_op2_id != GD::NULL_UNIQUE_ID() )
  // create unary op for empty
  return param.b2_empty_op2_id;
end if;

if ( param.b3_not_empty_op3_id != GD::NULL_UNIQUE_ID() )
  // create unary op for not_empty
  return param.b3_not_empty_op3_id;
end if;

return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cf9370d2-e8c6-4276-8461-baa5e8bfae84",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c8ade44b-f450-487a-b847-7cb9248cc0c0",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cf9370d2-e8c6-4276-8461-baa5e8bfae84",
	'');
INSERT INTO S_SPARM
	VALUES ("b590789a-63c6-4c5c-85ea-007f9b63c4ae",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c8ade44b-f450-487a-b847-7cb9248cc0c0",
	'');
INSERT INTO S_SPARM
	VALUES ("0f6ac076-ed81-49ba-9a18-16ce3f947c71",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b590789a-63c6-4c5c-85ea-007f9b63c4ae",
	'');
INSERT INTO S_SPARM
	VALUES ("12ade713-e8c5-4ec1-b048-c80ccf4814d1",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'b1_cardinality_op1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0f6ac076-ed81-49ba-9a18-16ce3f947c71",
	'');
INSERT INTO S_SPARM
	VALUES ("7529cb29-82c5-45ca-96f7-72f67b3ea0cc",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'b2_empty_op2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"12ade713-e8c5-4ec1-b048-c80ccf4814d1",
	'');
INSERT INTO S_SPARM
	VALUES ("86d40d5f-fd45-41b8-81e2-f7593c793fa7",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'b3_not_empty_op3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7529cb29-82c5-45ca-96f7-72f67b3ea0cc",
	'');
INSERT INTO S_SPARM
	VALUES ("dad4d35e-1738-413e-9aca-1b3ec2d9500e",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'b4_rval4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"86d40d5f-fd45-41b8-81e2-f7593c793fa7",
	'');
INSERT INTO S_SPARM
	VALUES ("210f421c-4d76-430e-afa4-376c21773dab",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'b5_assignment_expr5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"dad4d35e-1738-413e-9aca-1b3ec2d9500e",
	'');
INSERT INTO S_SPARM
	VALUES ("0554cb55-c7c0-4601-bc7c-5ed74ee2a486",
	"fb781743-ddcb-430c-b41f-1ae825214f16",
	'b6_expr6_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"210f421c-4d76-430e-afa4-376c21773dab",
	'');
INSERT INTO PE_PE
	VALUES ("fb781743-ddcb-430c-b41f-1ae825214f16",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9e3782a5-fafe-4614-b4a4-f4226afc77d0",
	"00000000-0000-0000-0000-000000000000",
	'Cardinality_op_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("abdb03c3-3d4c-4018-bcbf-064f53636b68",
	"9e3782a5-fafe-4614-b4a4-f4226afc77d0",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9e3782a5-fafe-4614-b4a4-f4226afc77d0",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a397e569-7b85-4ecc-9f5c-579f895696e9",
	"00000000-0000-0000-0000-000000000000",
	'Cardinality_op_end',
	'ParserValidateFunction: TRUE',
	'return ::inst_ref_operator_validate( a1_variable_id: param.b1_local_variable1_id,
      a2_operator_name: "cardinality", a3_op_dt: "integer", a4_rule_token: param.a1_rule_token,
      a5_rule_id: param.a4_rule_id );


































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2dd8a601-91d7-4c05-9e1e-85a3c456ad90",
	"a397e569-7b85-4ecc-9f5c-579f895696e9",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("81579698-3fbe-4670-adfa-2d1aa23437e7",
	"a397e569-7b85-4ecc-9f5c-579f895696e9",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2dd8a601-91d7-4c05-9e1e-85a3c456ad90",
	'');
INSERT INTO S_SPARM
	VALUES ("c4b218aa-a238-4d7d-a461-7dc35cdcdaba",
	"a397e569-7b85-4ecc-9f5c-579f895696e9",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"81579698-3fbe-4670-adfa-2d1aa23437e7",
	'');
INSERT INTO S_SPARM
	VALUES ("5ad42d93-671a-4926-a9f3-467b04e16892",
	"a397e569-7b85-4ecc-9f5c-579f895696e9",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c4b218aa-a238-4d7d-a461-7dc35cdcdaba",
	'');
INSERT INTO S_SPARM
	VALUES ("a7c70238-35c7-4a45-bed8-c4814d9b0a29",
	"a397e569-7b85-4ecc-9f5c-579f895696e9",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5ad42d93-671a-4926-a9f3-467b04e16892",
	'');
INSERT INTO PE_PE
	VALUES ("a397e569-7b85-4ecc-9f5c-579f895696e9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("79ebb9c2-7c50-43fa-bcb0-3e1bcb6ceefc",
	"00000000-0000-0000-0000-000000000000",
	'Empty_op_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bfe94389-d3f1-4cbf-96ca-58b0fbc004be",
	"79ebb9c2-7c50-43fa-bcb0-3e1bcb6ceefc",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("79ebb9c2-7c50-43fa-bcb0-3e1bcb6ceefc",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	"00000000-0000-0000-0000-000000000000",
	'Empty_op_end',
	'ParserValidateFunction: TRUE',
	'return ::inst_ref_operator_validate( a1_variable_id: param.b1_local_variable1_id,
      a2_operator_name: "empty", a3_op_dt: "boolean", a4_rule_token: param.a1_rule_token,
      a5_rule_id: param.a4_rule_id );

































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("47209468-84d2-4cda-8f1a-1b24eb257f34",
	"334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0a87e191-7391-46f6-9e89-570f53e0203a",
	"334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"47209468-84d2-4cda-8f1a-1b24eb257f34",
	'');
INSERT INTO S_SPARM
	VALUES ("044c340a-e02e-484c-a9d3-a2eb771e5b75",
	"334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0a87e191-7391-46f6-9e89-570f53e0203a",
	'');
INSERT INTO S_SPARM
	VALUES ("683c399f-2d31-4a81-8b0b-1114063eb214",
	"334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"044c340a-e02e-484c-a9d3-a2eb771e5b75",
	'');
INSERT INTO S_SPARM
	VALUES ("80c8250e-d0a1-4fce-8879-847e1135d44a",
	"334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"683c399f-2d31-4a81-8b0b-1114063eb214",
	'');
INSERT INTO PE_PE
	VALUES ("334291eb-081e-47c2-85b3-bc9f82c5d4ba",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("96f5aac0-0b18-4a2a-8fca-3721a69231df",
	"00000000-0000-0000-0000-000000000000",
	'Not_empty_op_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b38477cb-634a-45f7-bb8c-5a8bcfbf7294",
	"96f5aac0-0b18-4a2a-8fca-3721a69231df",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("96f5aac0-0b18-4a2a-8fca-3721a69231df",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5611274c-803d-4c6b-b8fc-6486a9dae90e",
	"00000000-0000-0000-0000-000000000000",
	'Not_empty_op_end',
	'ParserValidateFunction: TRUE',
	'return ::inst_ref_operator_validate( a1_variable_id: param.b1_local_variable1_id,
      a2_operator_name: "not_empty", a3_op_dt: "boolean", a4_rule_token: param.a1_rule_token,
      a5_rule_id: param.a4_rule_id );


































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("85280754-4425-43b2-9161-6b60f07e8c06",
	"5611274c-803d-4c6b-b8fc-6486a9dae90e",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9d576874-aa12-4cfe-9aac-bbc65593c058",
	"5611274c-803d-4c6b-b8fc-6486a9dae90e",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"85280754-4425-43b2-9161-6b60f07e8c06",
	'');
INSERT INTO S_SPARM
	VALUES ("b70f1abd-fd49-4225-b84e-95661a9b0c65",
	"5611274c-803d-4c6b-b8fc-6486a9dae90e",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9d576874-aa12-4cfe-9aac-bbc65593c058",
	'');
INSERT INTO S_SPARM
	VALUES ("7cc8f183-047c-4e57-ae0e-eba570f2f268",
	"5611274c-803d-4c6b-b8fc-6486a9dae90e",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b70f1abd-fd49-4225-b84e-95661a9b0c65",
	'');
INSERT INTO S_SPARM
	VALUES ("cb23f302-a937-4fb4-92e7-a2ba5f04b734",
	"5611274c-803d-4c6b-b8fc-6486a9dae90e",
	'b1_local_variable1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7cc8f183-047c-4e57-ae0e-eba570f2f268",
	'');
INSERT INTO PE_PE
	VALUES ("5611274c-803d-4c6b-b8fc-6486a9dae90e",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5c495d3b-88ac-42ee-8f34-416622e991d0",
	"00000000-0000-0000-0000-000000000000",
	'Rval_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("61fcfa54-5b2f-4dcf-8369-b7c8baaf586d",
	"5c495d3b-88ac-42ee-8f34-416622e991d0",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5c495d3b-88ac-42ee-8f34-416622e991d0",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	"00000000-0000-0000-0000-000000000000",
	'Invocation_expr_validate',
	'ParserValidateFunction: TRUE',
	'return ::Invocation_validate(  a1_rule_token: param.a1_rule_token,
  a2_isRval: true, a3_text: param.a3_text, a4_rule_ref_id: param.a4_rule_ref_id,
  a5_upper_rule_id: param.a5_upper_rule_id, a6_current_rule_id: param.a6_current_rule_id );












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5b4cb3f5-3740-4108-80b7-532bee748264",
	"93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ad104f24-4e4b-4cbe-90e4-8ea3f5c04d7f",
	"93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5b4cb3f5-3740-4108-80b7-532bee748264",
	'');
INSERT INTO S_SPARM
	VALUES ("08a56bbe-a830-4999-bbe6-349e8cc0e615",
	"93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ad104f24-4e4b-4cbe-90e4-8ea3f5c04d7f",
	'');
INSERT INTO S_SPARM
	VALUES ("4bf08b9b-807e-4ad1-9bd8-9520b4718042",
	"93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"08a56bbe-a830-4999-bbe6-349e8cc0e615",
	'');
INSERT INTO S_SPARM
	VALUES ("9ade496b-8784-47e3-b1a6-769e48326ba7",
	"93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4bf08b9b-807e-4ad1-9bd8-9520b4718042",
	'');
INSERT INTO PE_PE
	VALUES ("93e5b6bb-2f5e-47ec-b3d4-9edaac7c46cb",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36d7f972-b5a7-4273-b357-9ae54ee496ce",
	"00000000-0000-0000-0000-000000000000",
	'Enumerator_access_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a072188a-fb17-4e18-89f0-1cd1fe2dd63a",
	"36d7f972-b5a7-4273-b357-9ae54ee496ce",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("57fbd27d-c266-4152-8daa-62b5ca8d1814",
	"36d7f972-b5a7-4273-b357-9ae54ee496ce",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a072188a-fb17-4e18-89f0-1cd1fe2dd63a",
	'');
INSERT INTO S_SPARM
	VALUES ("f45a0860-2e5c-4de3-b8e2-8ce7b4ebf9f3",
	"36d7f972-b5a7-4273-b357-9ae54ee496ce",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"57fbd27d-c266-4152-8daa-62b5ca8d1814",
	'');
INSERT INTO S_SPARM
	VALUES ("9afcc80d-5aea-4af9-9134-04787152d938",
	"36d7f972-b5a7-4273-b357-9ae54ee496ce",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f45a0860-2e5c-4de3-b8e2-8ce7b4ebf9f3",
	'');
INSERT INTO S_SPARM
	VALUES ("2f514bf1-dd2b-4962-95f5-4ae2e20b943f",
	"36d7f972-b5a7-4273-b357-9ae54ee496ce",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9afcc80d-5aea-4af9-9134-04787152d938",
	'');
INSERT INTO PE_PE
	VALUES ("36d7f972-b5a7-4273-b357-9ae54ee496ce",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("13329dfe-df92-4bb9-93c2-24855ae09563",
	"00000000-0000-0000-0000-000000000000",
	'Constant_value_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c60142d3-d64e-4505-bd78-db549da78e7e",
	"13329dfe-df92-4bb9-93c2-24855ae09563",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fe728a79-337b-49de-a5c2-6638dffcb836",
	"13329dfe-df92-4bb9-93c2-24855ae09563",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c60142d3-d64e-4505-bd78-db549da78e7e",
	'');
INSERT INTO S_SPARM
	VALUES ("bcd933ea-27e3-4358-817d-74f06939fc5c",
	"13329dfe-df92-4bb9-93c2-24855ae09563",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fe728a79-337b-49de-a5c2-6638dffcb836",
	'');
INSERT INTO S_SPARM
	VALUES ("447a57f2-5117-4010-8e26-7cb8346b7194",
	"13329dfe-df92-4bb9-93c2-24855ae09563",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bcd933ea-27e3-4358-817d-74f06939fc5c",
	'');
INSERT INTO S_SPARM
	VALUES ("a27b0558-2ff6-4e98-aa4d-37291c33f722",
	"13329dfe-df92-4bb9-93c2-24855ae09563",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"447a57f2-5117-4010-8e26-7cb8346b7194",
	'');
INSERT INTO PE_PE
	VALUES ("13329dfe-df92-4bb9-93c2-24855ae09563",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eaa39268-1589-478b-af34-83127927809d",
	"00000000-0000-0000-0000-000000000000",
	'Event_data_access_validate',
	'ParserValidateFunction: TRUE',
	'// ::Event_data_access_validate
return param.a6_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5c43f7fb-3460-43e8-8c34-152d5983f679",
	"eaa39268-1589-478b-af34-83127927809d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ec58a9ee-e5d4-4207-b431-c8e9bdf5d3a2",
	"eaa39268-1589-478b-af34-83127927809d",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5c43f7fb-3460-43e8-8c34-152d5983f679",
	'');
INSERT INTO S_SPARM
	VALUES ("0be3d795-0796-41cf-9de9-002bc94a3f0a",
	"eaa39268-1589-478b-af34-83127927809d",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ec58a9ee-e5d4-4207-b431-c8e9bdf5d3a2",
	'');
INSERT INTO S_SPARM
	VALUES ("60c89e56-5d6d-4b83-9419-90e20d6170b2",
	"eaa39268-1589-478b-af34-83127927809d",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0be3d795-0796-41cf-9de9-002bc94a3f0a",
	'');
INSERT INTO S_SPARM
	VALUES ("0f33596a-42f0-49a9-80f4-cb854c8e0c64",
	"eaa39268-1589-478b-af34-83127927809d",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"60c89e56-5d6d-4b83-9419-90e20d6170b2",
	'');
INSERT INTO PE_PE
	VALUES ("eaa39268-1589-478b-af34-83127927809d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("16288088-273a-4506-8ad4-f29b74728920",
	"00000000-0000-0000-0000-000000000000",
	'Bridge_expr_validate',
	'ParserValidateFunction: TRUE',
	'return ::Bridge_invocation_validate(  a1_rule_token: param.a1_rule_token,
  a2_isRval: true, a3_text: param.a3_text, a4_rule_ref_id: param.a4_rule_ref_id,
  a5_upper_rule_id: param.a5_upper_rule_id, a6_current_rule_id: param.a6_current_rule_id );












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1802493c-89c2-4fd4-8f7d-6e110e0cf762",
	"16288088-273a-4506-8ad4-f29b74728920",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("57e24c92-e426-4183-8239-c8775314f0e9",
	"16288088-273a-4506-8ad4-f29b74728920",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1802493c-89c2-4fd4-8f7d-6e110e0cf762",
	'');
INSERT INTO S_SPARM
	VALUES ("addf5cc0-c51f-48a9-b0c6-3c7174fda3ef",
	"16288088-273a-4506-8ad4-f29b74728920",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"57e24c92-e426-4183-8239-c8775314f0e9",
	'');
INSERT INTO S_SPARM
	VALUES ("4746994a-cee0-490f-875a-01869e4eb17f",
	"16288088-273a-4506-8ad4-f29b74728920",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"addf5cc0-c51f-48a9-b0c6-3c7174fda3ef",
	'');
INSERT INTO S_SPARM
	VALUES ("92610cff-be28-405f-a849-f278ada55af1",
	"16288088-273a-4506-8ad4-f29b74728920",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4746994a-cee0-490f-875a-01869e4eb17f",
	'');
INSERT INTO PE_PE
	VALUES ("16288088-273a-4506-8ad4-f29b74728920",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c576978f-777b-4b80-aabd-ef8f962a9176",
	"00000000-0000-0000-0000-000000000000",
	'Terminal_tok_qmark_validate',
	'ParserValidateFunction: TRUE',
	'return param.a4_current_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8c703f4a-a17c-4e07-9e26-1650c544959a",
	"c576978f-777b-4b80-aabd-ef8f962a9176",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b475a9a3-f1d9-40ed-a991-1f0d28a771c6",
	"c576978f-777b-4b80-aabd-ef8f962a9176",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8c703f4a-a17c-4e07-9e26-1650c544959a",
	'');
INSERT INTO S_SPARM
	VALUES ("4f00c42f-21a4-48dd-9c7f-aba126f6d613",
	"c576978f-777b-4b80-aabd-ef8f962a9176",
	'a3_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b475a9a3-f1d9-40ed-a991-1f0d28a771c6",
	'');
INSERT INTO S_SPARM
	VALUES ("43256e77-e822-46d1-8ffd-186349a60f8d",
	"c576978f-777b-4b80-aabd-ef8f962a9176",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4f00c42f-21a4-48dd-9c7f-aba126f6d613",
	'');
INSERT INTO PE_PE
	VALUES ("c576978f-777b-4b80-aabd-ef8f962a9176",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	"00000000-0000-0000-0000-000000000000",
	'Rval_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;












































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c1a7aba1-1a5a-4c8f-bd1a-c00726180e3e",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1fe81a70-c0f6-4d73-9b13-e834a73fdfa7",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c1a7aba1-1a5a-4c8f-bd1a-c00726180e3e",
	'');
INSERT INTO S_SPARM
	VALUES ("4d3fa746-b3be-463c-8b2c-fd6aa9275636",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1fe81a70-c0f6-4d73-9b13-e834a73fdfa7",
	'');
INSERT INTO S_SPARM
	VALUES ("2f4ce78a-7659-41df-ab0c-34bc4d266c09",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4d3fa746-b3be-463c-8b2c-fd6aa9275636",
	'');
INSERT INTO S_SPARM
	VALUES ("18a93529-8986-42c1-b6a5-da8fa21047cc",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b1_function_invocation1_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2f4ce78a-7659-41df-ab0c-34bc4d266c09",
	'');
INSERT INTO S_SPARM
	VALUES ("80bc2618-e580-45bf-9cec-ce14c36eb3cb",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b2_transform_ib_invocation2_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"18a93529-8986-42c1-b6a5-da8fa21047cc",
	'');
INSERT INTO S_SPARM
	VALUES ("0e76afc4-d87e-431b-8be4-2675fa01f31a",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b3_bridge_or_transform_expr3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"80bc2618-e580-45bf-9cec-ce14c36eb3cb",
	'');
INSERT INTO S_SPARM
	VALUES ("68b842f9-4fdb-41e8-98ce-222ceb39aa29",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b4_enumerator_access4_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0e76afc4-d87e-431b-8be4-2675fa01f31a",
	'');
INSERT INTO S_SPARM
	VALUES ("a78f0042-1a3e-4024-9efe-dfd95fbf8c22",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b6_constant_value6_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"760cab13-d7e0-4b00-b2cd-9c865997453c",
	'');
INSERT INTO S_SPARM
	VALUES ("b932fdd2-ecca-4208-8126-9a73554ea4d7",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b7_event_data_access7_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a78f0042-1a3e-4024-9efe-dfd95fbf8c22",
	'');
INSERT INTO S_SPARM
	VALUES ("ff7fb260-94c5-4763-9e3d-56f957750134",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b8_bridge_expr8_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b932fdd2-ecca-4208-8126-9a73554ea4d7",
	'');
INSERT INTO S_SPARM
	VALUES ("f97bf742-4e59-4dec-9a96-c65529c13ede",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b9_param_data_access9_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ff7fb260-94c5-4763-9e3d-56f957750134",
	'');
INSERT INTO S_SPARM
	VALUES ("760cab13-d7e0-4b00-b2cd-9c865997453c",
	"7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	'b5_member_access5_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"68b842f9-4fdb-41e8-98ce-222ceb39aa29",
	'');
INSERT INTO PE_PE
	VALUES ("7c536aff-c7b3-4b25-a6a8-5463287f2ba6",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f51063fe-de5c-4804-b9cd-e05f5aa4ec8a",
	"00000000-0000-0000-0000-000000000000",
	'Constant_value_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("07bf6f0c-4af9-4278-a276-e1dd4547fd02",
	"f51063fe-de5c-4804-b9cd-e05f5aa4ec8a",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f51063fe-de5c-4804-b9cd-e05f5aa4ec8a",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("50a27557-97e4-4a09-9c97-25e0ba59b334",
	"00000000-0000-0000-0000-000000000000",
	'Terminal_tok_fraction_validate',
	'ParserValidateFunction: TRUE',
	'create object instance lrl of V_LRL;
lrl.Value = param.a2_text;
create object instance val of V_VAL;
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
relate val to blk across R826;

  cur_sys_name = ::getSystemName();
  select any sys from instances of S_SYS where (selected.Name == cur_sys_name);
  dt_id = GD::NULL_UNIQUE_ID();
  if not_empty sys
    dt_id = sys.getCoreTypeId(name:"real");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one dt related by pe->S_DT[R8001]; 

if ( not_empty dt )
  relate val to dt across R820;
else
  USER::logError(msg: "Internal Error in OAL Validation Function " +
    "Terminal_tok_fraction_validate().  Variable <dt> is empty.",path:"PathNotProvided");
end if;
relate val to lrl across R801;
val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
val.setEndPosition();
return val.Value_ID;













































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("41ed030c-4f6a-47fb-9689-a3fdb3ec4764",
	"50a27557-97e4-4a09-9c97-25e0ba59b334",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3fff97bd-0027-49a6-8844-a6f881170e7e",
	"50a27557-97e4-4a09-9c97-25e0ba59b334",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"41ed030c-4f6a-47fb-9689-a3fdb3ec4764",
	'');
INSERT INTO S_SPARM
	VALUES ("0e77d24c-bf5f-45fe-951e-2410dbee2d85",
	"50a27557-97e4-4a09-9c97-25e0ba59b334",
	'a3_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3fff97bd-0027-49a6-8844-a6f881170e7e",
	'');
INSERT INTO S_SPARM
	VALUES ("ef8a95fc-4c8c-4d9e-9001-2c436b9f87c8",
	"50a27557-97e4-4a09-9c97-25e0ba59b334",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0e77d24c-bf5f-45fe-951e-2410dbee2d85",
	'');
INSERT INTO PE_PE
	VALUES ("50a27557-97e4-4a09-9c97-25e0ba59b334",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("53a383c8-3e84-49a5-9dc0-427f717014d2",
	"00000000-0000-0000-0000-000000000000",
	'Terminal_tok_number_validate',
	'ParserValidateFunction: TRUE',
	'create object instance lin of V_LIN;
lin.Value = param.a2_text;
create object instance val of V_VAL;
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
relate val to blk across R826;

  cur_sys_name = ::getSystemName();
  select any sys from instances of S_SYS where selected.Name == cur_sys_name;
  dt_id = GD::NULL_UNIQUE_ID();
  if not_empty sys
    dt_id = sys.getCoreTypeId(name:"integer");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one dt related by pe->S_DT[R8001]; 

if ( not_empty dt )
  relate val to dt across R820;
else
  USER::logError(msg: "Internal Error in OAL Validation Function " +
    "Terminal_tok_number_validate().  Variable <dt> is empty.",path:"PathNotProvided");
end if;
relate val to lin across R801;
val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
val.setEndPosition();
return val.Value_ID;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("22ec4e8c-ae81-4899-ab8c-45e9dc178a1e",
	"53a383c8-3e84-49a5-9dc0-427f717014d2",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("89c72c68-c8f0-467c-94a5-9e3d20a0e6e9",
	"53a383c8-3e84-49a5-9dc0-427f717014d2",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"22ec4e8c-ae81-4899-ab8c-45e9dc178a1e",
	'');
INSERT INTO S_SPARM
	VALUES ("61c9145e-109f-4f84-b38f-1f64076eb182",
	"53a383c8-3e84-49a5-9dc0-427f717014d2",
	'a3_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"89c72c68-c8f0-467c-94a5-9e3d20a0e6e9",
	'');
INSERT INTO S_SPARM
	VALUES ("16de96c4-88d3-4b5b-904b-223f209e2164",
	"53a383c8-3e84-49a5-9dc0-427f717014d2",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"61c9145e-109f-4f84-b38f-1f64076eb182",
	'');
INSERT INTO PE_PE
	VALUES ("53a383c8-3e84-49a5-9dc0-427f717014d2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("86ce40d4-18a8-4605-b5b6-d09600c62b4b",
	"00000000-0000-0000-0000-000000000000",
	'Terminal_tok_string_validate',
	'ParserValidateFunction: TRUE',
	'create object instance lst of V_LST;
lst.Value = lst.removeQuotes(s: param.a2_text);
create object instance val of V_VAL;
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
relate val to blk across R826;

  cur_sys_name = ::getSystemName();
  select any sys from instances of S_SYS where selected.Name == cur_sys_name;
  dt_id = GD::NULL_UNIQUE_ID();
  if not_empty sys
    dt_id = sys.getCoreTypeId(name:"string");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one dt related by pe->S_DT[R8001]; 

if ( not_empty dt )
  relate val to dt across R820;
else
  USER::logError(msg: "Internal Error in OAL Validation Function " +
    "Terminal_tok_string_validate().  Variable <dt> is empty.",path:"PathNotProvided");
end if;
relate val to lst across R801;
val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
val.setEndPosition();
return val.Value_ID;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4512c98f-af1d-4a5f-84ad-279c157256ae",
	"86ce40d4-18a8-4605-b5b6-d09600c62b4b",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e2726544-fbba-486f-9168-5cf8fff5afb5",
	"86ce40d4-18a8-4605-b5b6-d09600c62b4b",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4512c98f-af1d-4a5f-84ad-279c157256ae",
	'');
INSERT INTO S_SPARM
	VALUES ("f9d9a08f-aaad-4375-be00-578cac254ff9",
	"86ce40d4-18a8-4605-b5b6-d09600c62b4b",
	'a3_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e2726544-fbba-486f-9168-5cf8fff5afb5",
	'');
INSERT INTO S_SPARM
	VALUES ("c8f6b546-61b4-4ce7-8168-15ea848194e7",
	"86ce40d4-18a8-4605-b5b6-d09600c62b4b",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f9d9a08f-aaad-4375-be00-578cac254ff9",
	'');
INSERT INTO PE_PE
	VALUES ("86ce40d4-18a8-4605-b5b6-d09600c62b4b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e06ca2f0-c42b-4a9c-95fd-aabc0c5b68f1",
	"00000000-0000-0000-0000-000000000000",
	'String_literal_true_validate',
	'ParserValidateFunction: TRUE',
	'create object instance lbo of V_LBO;
lbo.Value = "TRUE";

create object instance val of V_VAL;
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
relate val to blk across R826;

  cur_sys_name = ::getSystemName();
  select any sys from instances of S_SYS where selected.Name == cur_sys_name;
  dt_id = GD::NULL_UNIQUE_ID();
  if not_empty sys
    dt_id = sys.getCoreTypeId(name:"boolean");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one dt related by pe->S_DT[R8001]; 

if ( not_empty dt )
  relate val to dt across R820;
else
  USER::logError(msg: "Internal Error in OAL Validation Function " +
    "String_literal_true_validate().  Variable <dt> is empty.",path:"PathNotProvided");
end if;

relate val to lbo across R801;

return val.Value_ID;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0944101a-2931-4df3-9574-7c009a3f2cb6",
	"e06ca2f0-c42b-4a9c-95fd-aabc0c5b68f1",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("66c35832-2649-4038-a774-fd753cb22c91",
	"e06ca2f0-c42b-4a9c-95fd-aabc0c5b68f1",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0944101a-2931-4df3-9574-7c009a3f2cb6",
	'');
INSERT INTO S_SPARM
	VALUES ("79574138-b55f-4411-8881-d6161bb007f2",
	"e06ca2f0-c42b-4a9c-95fd-aabc0c5b68f1",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"66c35832-2649-4038-a774-fd753cb22c91",
	'');
INSERT INTO PE_PE
	VALUES ("e06ca2f0-c42b-4a9c-95fd-aabc0c5b68f1",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("23bbd663-474a-4e66-b34f-1df912a2e209",
	"00000000-0000-0000-0000-000000000000",
	'String_literal_false_validate',
	'ParserValidateFunction: TRUE',
	'// PE_PE navigation is present (isInGenericPackage).  Do not remove this comment.
create object instance lbo of V_LBO;
lbo.Value = "FALSE";

create object instance val of V_VAL;
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
relate val to blk across R826;

  cur_sys_name = ::getSystemName();
  select any sys from instances of S_SYS where selected.Name == cur_sys_name;
  dt_id = GD::NULL_UNIQUE_ID();
  if not_empty sys
    dt_id = sys.getCoreTypeId(name:"boolean");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one dt related by pe->S_DT[R8001]; 

if ( not_empty dt )
  relate val to dt across R820;
else
  USER::logError(msg: "Internal Error in OAL Validation Function " +
    "String_literal_false_validate().  Variable <dt> is empty.",path:"PathNotProvided");
end if;

relate val to lbo across R801;

return val.Value_ID;













































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("00deb08d-6e7a-4dc2-af0f-5c85fe0155ca",
	"23bbd663-474a-4e66-b34f-1df912a2e209",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8639d9c2-ad50-4cf5-a581-38bb121d5acc",
	"23bbd663-474a-4e66-b34f-1df912a2e209",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00deb08d-6e7a-4dc2-af0f-5c85fe0155ca",
	'');
INSERT INTO S_SPARM
	VALUES ("abfc5651-f9d4-457f-b9d0-6e42ee1743da",
	"23bbd663-474a-4e66-b34f-1df912a2e209",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8639d9c2-ad50-4cf5-a581-38bb121d5acc",
	'');
INSERT INTO PE_PE
	VALUES ("23bbd663-474a-4e66-b34f-1df912a2e209",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6adfe149-649d-4088-b4ce-8e6e2ee1e430",
	"00000000-0000-0000-0000-000000000000",
	'Constant_value_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_rule_id;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("58256bc1-e39f-4952-bfb6-b2134e8dc6d0",
	"6adfe149-649d-4088-b4ce-8e6e2ee1e430",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("99caedfe-cefa-4fa3-b8ac-0580df613347",
	"6adfe149-649d-4088-b4ce-8e6e2ee1e430",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"58256bc1-e39f-4952-bfb6-b2134e8dc6d0",
	'');
INSERT INTO S_SPARM
	VALUES ("837f1be5-9e5f-495e-aa3b-ea1c9e065554",
	"6adfe149-649d-4088-b4ce-8e6e2ee1e430",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"99caedfe-cefa-4fa3-b8ac-0580df613347",
	'');
INSERT INTO S_SPARM
	VALUES ("179a148a-3b81-4f4c-81ef-6fb35864c7a3",
	"6adfe149-649d-4088-b4ce-8e6e2ee1e430",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"837f1be5-9e5f-495e-aa3b-ea1c9e065554",
	'');
INSERT INTO PE_PE
	VALUES ("6adfe149-649d-4088-b4ce-8e6e2ee1e430",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("431ad61a-5c6c-490f-bf12-4f41db87597f",
	"00000000-0000-0000-0000-000000000000",
	'Member_access_end',
	'ParserValidateFunction: TRUE',
	'// PE_PE navigation is present (isInGenericPackage).  Do not remove this comment.
// ::Member_access_end()
if ( param.b1_root_inst_access_id == GD::NULL_UNIQUE_ID())
  // There is no field, dispose incompletely created value instances . . .
  ::clear_value_data();
  // ... and report an error
  select any val from instances of V_VAL where
                              selected.Value_ID == param.b1_root_inst_access_id;
  if ( not_empty val )
    select one obj related by val->V_IRF[R801]->V_VAR[R808]->
                                                       V_INT[R814]->O_OBJ[R818];
    if ( not_empty obj )
      ERR::reportParseError( msg: "Field %s not found for class " + obj.Name,
                                                   token: param.a1_rule_token );
    else
      ERR::reportParseError( msg: "Field %s not found for class",
                                                   token: param.a1_rule_token );
    end if;
  else
    ERR::reportParseError( msg: "Field %s not found for class",
                                                   token: param.a1_rule_token );
  end if;
else
  current_scope = ::get_current_scope();
  if ( current_scope == GD::NULL_UNIQUE_ID() )
    ERR::reportParseError( msg: "Internal Error: Unable to determine " +
             "context to define variable ->%s<-.", token: param.a1_rule_token );
  else
    select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
    // This code is a close copy of what is in Member_access_loop11_end.
    // Need to look and see if this can be refactored.
      cur_sys_name = ::getSystemName();
      select any sys from instances of S_SYS where selected.Name == cur_sys_name;
      dt_id = GD::NULL_UNIQUE_ID();
      if not_empty sys
        dt_id = sys.getCoreTypeId(name:"inst_ref<Object>");
      end if;
      select any pe from instances of PE_PE where selected.Element_ID == dt_id;
      select one instRefDt related by pe->S_DT[R8001];

    if empty instRefDt
      USER::logError(msg: "Internal Error in OAL Validation " +
        "Member_access_end().  Variable <instRefDt> is empty.",path:"PathNotProvided");
    end if;
    select any rootVal from instances of V_VAL where
                              selected.Value_ID == param.b1_root_inst_access_id;
    if (not_empty rootVal)
      name = rootVal.Text;
      if (not rootVal.hasSubtype())
        if (::constant_validate(a1_name:name, a2_ruleToken:param.a1_rule_token,
          a3_reportError:false, a4_valID:rootVal.Value_ID) != GD::NULL_UNIQUE_ID())
          return rootVal.Value_ID;
        end if;
        // Initialize the root value instance
        ::self_validate(a1_text: name,
                     a2_isLval:rootVal.isLValue, a3_token: param.a1_rule_token);
        ::sender_validate( a1_name: name, a2_isLval: rootVal.isLValue,
                                                a3_token: param.a1_rule_token );
        if ( ::selected_validate( name: name, rule_token: param.a1_rule_token ))
          // selected is always an r-value
          block.SelectedFound = true;
          create object instance slr of V_SLR;
          relate slr to rootVal across R801;
          relate rootVal to instRefDt across R820;
          relate rootVal to block across R826;
          return rootVal.Value_ID;
        end if;
        // Is the root value an argument ?
        select any parmVal from instances of V_PVL where
                                    selected.Value_ID == param.a2_upper_rule_id;
        select one preCreatedVal related by parmVal->V_VAL[R801];
        select any evtVal from instances of V_EDV where
                                    selected.Value_ID == param.a2_upper_rule_id;
        if not_empty evtVal
          select one preCreatedVal related by evtVal->V_VAL[R801];
        end if;
        if not_empty parmVal and preCreatedVal.Text == ""
          unrelate preCreatedVal from parmVal across R801;
          preCreatedVal.dispose();
          relate rootVal to parmVal across R801;
          ::param_root_value_validate(a1_name:name, a2_token:param.a1_rule_token,
                           a3_value_id: rootVal.Value_ID, a4_isRootAccess:true);
        elif not_empty evtVal and preCreatedVal.Text == ""
          unrelate preCreatedVal from evtVal across R801;
          preCreatedVal.dispose();
          relate rootVal to evtVal across R801;
              ::event_root_value_validate(name:name,
                         token:param.a1_rule_token, value_id: rootVal.Value_ID);
        else
          var_id = ::get_var_in_scope(name: name,
                                               rule_token: param.a1_rule_token);
          select any varInst from instances of V_VAR where
                                                      selected.Var_ID == var_id;
          if empty varInst
            // We didn''''t see this value before in this action
            if not rootVal.isLValue
              // We''''re reading from it - Error
              ::clear_value_data();
              ERR::reportParseError( msg: "Variable ->%s<- used in " +
                                    "context where it must already exist.",
                                                   token: param.a1_rule_token );
            else
              // We''''re writing it
              // Create variable implicitly
              current_scope = ::get_current_scope();
              if current_scope == GD::NULL_UNIQUE_ID()
                ::clear_value_data();
                ERR::reportParseError( msg: "Internal Error: Unable to " +
                              "determine context to define variable ->%s<-.",
                                                   token: param.a1_rule_token );
              else
                select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
                create object instance trn of V_TRN;
                create object instance varInst of V_VAR;
                varInst.Name = name;
                relate trn to varInst across R814;
                relate varInst to block across R823;
                var_id = varInst.Var_ID;
                rootVal.isImplicit = true;
              end if;
            end if;
          end if;
          if (not_empty varInst)
            varInst.addLocation(line: rootVal.LineNumber,
                                                    col: rootVal.StartPosition);
            if not rootVal.hasSubtype()
              // We''''re now ready to establish the Value subtype
              select one inst related by varInst->V_INT[R814];
              select one instSet related by varInst->V_INS[R814];
              select one tran related by varInst->V_TRN[R814];
              if empty inst and empty instSet and empty tran
                ::clear_value_data();
                ERR::reportParseError( msg: "Internal Error: Variable " +
                                  "subtype instance not found for token %s.",
                                                   token: param.a1_rule_token );
              else
                if not_empty inst
                  select one instRefDt2 related by varInst->S_DT[R848]->S_IRDT[R17];
                  create object instance instRef of V_IRF;
                  relate instRef to varInst across R808;
                  relate instRef to rootVal across R801;
                  relate instRefDt to rootVal across R820;
                  if (empty instRefDt2)
                    relate instRefDt to rootVal across R820;
                  else
                    select one instRefDt2super related by instRefDt2->S_DT[R17];
                    relate instRefDt2super to rootVal across R820;
                  end if;
                elif not_empty instSet
                  create object instance instSetRef of V_ISR;
                  relate instSetRef to varInst across R809;
                  relate instSetRef to rootVal across R801;
                  select one instSetDt2 related by varInst->S_DT[R848]->S_IRDT[R17];
                  if empty instSetDt2
                      cur_sys_name = ::getSystemName();
                      select any sys from instances of S_SYS where
                                                  selected.Name == cur_sys_name;
                      dt_id = GD::NULL_UNIQUE_ID();
                      if not_empty sys
                        dt_id = sys.getCoreTypeId(name:"inst_ref_set<Object>");
                      end if;
                      select any pe from instances of PE_PE where
                                                   selected.Element_ID == dt_id;
                      select one instSetDt related by pe->S_DT[R8001];
                    if empty instSetDt
                      USER::logError(msg: "Internal Error in OAL Validation " +
                        "Member_access_end().  Variable <instSetDt> is empty.",path:"PathNotProvided");
                    else
                     relate instSetDt to rootVal across R820;
                    end if;
                  end if;
                  if not_empty instSetDt2
                    select one instSetDt2super related by instSetDt2->S_DT[R17];
                    relate instSetDt2super to rootVal across R820;
                  end if;
                else // transient
                  create object instance tranRef of V_TVL;
                  relate tranRef to varInst across R805;
                  relate tranRef to rootVal across R801;
                  select one dt related by varInst->S_DT[R848];
                  if (not_empty dt)
                    relate rootVal to dt across R820;
                  else
                    // if no dt is found, it is because this transient is being
                    // created implicitly. Data type cannot be determined until
                    // the whole assignment is parsed. See Assignment_expr_end
                    // for data type assignment handling in this case.
                    varInst.resizeDimensions(dimension:0,elementCount:0,numDimensions:0);
                  end if;
                end if;
                rootVal.setEndPosition();
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
    select many values from instances of V_VAL where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
    for each value in values
      relate value to block across R826;
    end for;
  end if;
end if;
return param.a4_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("aa6a87f2-b68a-4ef2-b299-35a7eb7b89b0",
	"431ad61a-5c6c-490f-bf12-4f41db87597f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("02964b99-1c08-4a28-8f82-40f1409bc7da",
	"431ad61a-5c6c-490f-bf12-4f41db87597f",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"aa6a87f2-b68a-4ef2-b299-35a7eb7b89b0",
	'');
INSERT INTO S_SPARM
	VALUES ("9e16da5e-334a-43da-9d8e-d68e33ea4090",
	"431ad61a-5c6c-490f-bf12-4f41db87597f",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"02964b99-1c08-4a28-8f82-40f1409bc7da",
	'');
INSERT INTO S_SPARM
	VALUES ("8943ad37-188f-4b93-9ceb-d8dc5c18807b",
	"431ad61a-5c6c-490f-bf12-4f41db87597f",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9e16da5e-334a-43da-9d8e-d68e33ea4090",
	'');
INSERT INTO S_SPARM
	VALUES ("5fae3fcd-406d-4a66-8a52-06ae60daaf27",
	"431ad61a-5c6c-490f-bf12-4f41db87597f",
	'b1_root_inst_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8943ad37-188f-4b93-9ceb-d8dc5c18807b",
	'');
INSERT INTO S_SPARM
	VALUES ("ee021607-5e19-4028-a625-535616ecbe47",
	"431ad61a-5c6c-490f-bf12-4f41db87597f",
	'b2_final_inst_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5fae3fcd-406d-4a66-8a52-06ae60daaf27",
	'');
INSERT INTO PE_PE
	VALUES ("431ad61a-5c6c-490f-bf12-4f41db87597f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eb00ac64-1ca6-4983-8715-4aa3854d3a19",
	"00000000-0000-0000-0000-000000000000",
	'Member_access_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_ruleid_name;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("46523de4-6244-45fd-8bb3-ef009c9f532b",
	"eb00ac64-1ca6-4983-8715-4aa3854d3a19",
	'a1_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("cdccc48e-e7ff-4669-ae22-39441fc3cabc",
	"eb00ac64-1ca6-4983-8715-4aa3854d3a19",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"46523de4-6244-45fd-8bb3-ef009c9f532b",
	'');
INSERT INTO PE_PE
	VALUES ("eb00ac64-1ca6-4983-8715-4aa3854d3a19",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	"00000000-0000-0000-0000-000000000000",
	'Member_access_validate',
	'ParserValidateFunction: TRUE',
	'// ::Member_access_validate()
// return the last member of the value chain
return ::get_value_chain_end(start_value_ID:param.a6_current_rule_id);',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e86005d3-6a3f-4e68-b61b-3add8d4c1ce5",
	"b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4758810b-3afa-46e7-957d-88a0a4c660fe",
	"b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e86005d3-6a3f-4e68-b61b-3add8d4c1ce5",
	'');
INSERT INTO S_SPARM
	VALUES ("a259c5bb-d137-4474-a1ea-fa740d7e5c35",
	"b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4758810b-3afa-46e7-957d-88a0a4c660fe",
	'');
INSERT INTO S_SPARM
	VALUES ("3b29d7eb-a463-45f9-b4d6-f3bfdaa4e01c",
	"b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	'a4_rule_ref_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a259c5bb-d137-4474-a1ea-fa740d7e5c35",
	'');
INSERT INTO S_SPARM
	VALUES ("82c11310-5c8c-4c17-b70c-577ffa594467",
	"b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3b29d7eb-a463-45f9-b4d6-f3bfdaa4e01c",
	'');
INSERT INTO S_SPARM
	VALUES ("d6312633-01ad-4430-9615-588e370c1c68",
	"b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"82c11310-5c8c-4c17-b70c-577ffa594467",
	'');
INSERT INTO PE_PE
	VALUES ("b7870fb4-87c2-408c-b2a4-e2db88cdcc7a",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("67334b9f-d9ca-420f-82a8-3ba47a67fb06",
	"00000000-0000-0000-0000-000000000000",
	'Member_access_loop11_start',
	'ParserValidateFunction: TRUE',
	'// ::Member_access_loop11_start()
return param.a3_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7d4292e7-635d-4b94-ac0a-20bf2d381b2e",
	"67334b9f-d9ca-420f-82a8-3ba47a67fb06",
	'a1_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3ed99eed-da5a-4dbc-a2e3-f1d434449aa7",
	"67334b9f-d9ca-420f-82a8-3ba47a67fb06",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c2c41ff6-d409-49d5-acfc-6bb101677de5",
	'');
INSERT INTO S_SPARM
	VALUES ("c2c41ff6-d409-49d5-acfc-6bb101677de5",
	"67334b9f-d9ca-420f-82a8-3ba47a67fb06",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7d4292e7-635d-4b94-ac0a-20bf2d381b2e",
	'');
INSERT INTO PE_PE
	VALUES ("67334b9f-d9ca-420f-82a8-3ba47a67fb06",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a299e195-4f30-41a4-8578-97224b72cedd",
	"00000000-0000-0000-0000-000000000000",
	'Member_access_loop11_end',
	'ParserValidateFunction: TRUE',
	'// Member_access_loop_11_end()
select any rootVal from instances of V_VAL where
                              selected.Value_ID == param.b1_root_inst_access_id;
if (empty rootVal)
  // There was a problem with parsing the value . ..
  ::clear_value_data();
else

    cur_sys_name = ::getSystemName();
    select any sys from instances of S_SYS where selected.Name == cur_sys_name;
    dt_id = GD::NULL_UNIQUE_ID();
    if not_empty sys
      dt_id = sys.getCoreTypeId(name:"inst_ref<Object>");
    end if;
    select any pe from instances of PE_PE where selected.Element_ID == dt_id;
    select one instRefDt related by pe->S_DT[R8001];

  if empty instRefDt
    USER::logError(msg: "Internal Error in OAL Validation Function " +
                 "Member_access_loop11_end().  Variable <instRefDt> is empty.",path:"PathNotProvided");
  end if;
  name = rootVal.Text;
  var_id = ::get_var_in_scope( name: name, rule_token: param.a1_rule_token );
  select any varInst from instances of V_VAR where selected.Var_ID == var_id;
  if (not rootVal.hasSubtype())
    // This is the first iteration of the repeating instance access
    // syntax pattern; x.y.z etc.
    // Initialize the root value instance
    ::self_validate(a1_text: name,
                                a2_isLval:false, a3_token: param.a1_rule_token);
    if ( ::selected_validate( name: name, rule_token: param.a1_rule_token ))
      // selected is always an r-value
      current_scope = ::get_current_scope();
      if ( current_scope == GD::NULL_UNIQUE_ID() )
        ::clear_value_data();
        ERR::reportParseError( msg: "Internal Error: Unable to determine " +
                                     "context to define variable ->selected<-.",
                                                   token: param.a1_rule_token );
      else
        select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
        blk.SelectedFound = true;
        create object instance slr of V_SLR;
        relate slr to rootVal across R801;
        relate rootVal to instRefDt across R820;
        relate rootVal to blk across R826;
      end if;
    end if;
    var_id = ::get_var_in_scope( name: name, rule_token: param.a1_rule_token );
    select any varInst from instances of V_VAR where selected.Var_ID == var_id;
    if empty varInst
      // Either we didn''''t see this value before in this action,
      // or the root value is an argument
      select any parmVal from instances of V_PVL where
                                selected.Value_ID == param.a2_upper_ruleid_name;
      select any evtVal from instances of V_EDV where
                                selected.Value_ID == param.a2_upper_ruleid_name;
      if not_empty parmVal
        select one preCreatedVal related by parmVal->V_VAL[R801];
        unrelate preCreatedVal from parmVal across R801;
        preCreatedVal.dispose();
        relate rootVal to parmVal across R801;
        ::param_root_value_validate(a1_name:name, a2_token:param.a1_rule_token,
                           a3_value_id: rootVal.Value_ID,a4_isRootAccess:false);
      elif not_empty evtVal
        select one preCreatedVal related by evtVal->V_VAL[R801];
        unrelate preCreatedVal from evtVal across R801;
        preCreatedVal.dispose();
        relate rootVal to evtVal across R801;
            ::event_root_value_validate(name:name,
                         token:param.a1_rule_token, value_id: rootVal.Value_ID);
      else
        // We didn''''t see this value before in this action
        if not rootVal.isLValue
          // We''''re reading from it - Error
          ::clear_value_data();
          ::set_token(a1_token:param.a1_rule_token, a2_line:rootVal.LineNumber,
                         a3_column:rootVal.StartPosition, a4_text:rootVal.Text);
          ERR::reportParseError( msg: "Variable ->%s<- used in context where " +
                         "it must already exist.", token: param.a1_rule_token );
        else
          // We''''re writing it
          // Create variable implicitly
          current_scope = ::get_current_scope();
          if ( current_scope == GD::NULL_UNIQUE_ID() )
            ::clear_value_data();
            ERR::reportParseError( msg: "Internal Error: Unable to determine " +
             "context to define variable ->%s<-.", token: param.a1_rule_token );
          else
            select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
            create object instance trn of V_TRN;
            create object instance varInst of V_VAR;
            varInst.Name = name;
            relate trn to varInst across R814;
            relate varInst to block across R823;
            var_id = varInst.Var_ID;
            rootVal.isImplicit = true;
          end if;
        end if;
      end if;
    end if;
    if (not_empty varInst)
      varInst.addLocation(line:rootVal.LineNumber, col:rootVal.StartPosition );
      // We''''re now ready to establish the Value subtype . . . .
      // . . . . unless it was already established (in the param
      // and rcvd event cases)
      if (not rootVal.hasSubtype())
        select one inst related by varInst->V_INT[R814];
        select one tran related by varInst->V_TRN[R814];
        if not_empty inst and not_empty tran
          ::clear_value_data();
          ERR::reportParseError( msg:
                  "Internal Error: Variable subtype instance " +
                        "not found for token %s.", token: param.a1_rule_token );
        else
          if not_empty inst
            select one instRefDt2 related by varInst->S_DT[R848]->S_IRDT[R17];
            create object instance instRef of V_IRF;
            relate instRef to varInst across R808;
            relate instRef to rootVal across R801;
            if (empty instRefDt2)
              relate instRefDt to rootVal across R820;
            else
              select one instRefDt2super related by instRefDt2->S_DT[R17];
              relate instRefDt2super to rootVal across R820;
            end if;
          else // transient
            create object instance tranRef of V_TVL;
            relate tranRef to varInst across R805;
            relate tranRef to rootVal across R801;
            select one dt related by varInst->S_DT[R848];
            if (empty dt)
              ::clear_value_data();
              ERR::reportParseError( msg: "->" + name +
                                     "<- is not a class or " +
                          "structured data type.", token: param.a1_rule_token );
            else
              relate rootVal to dt across R820;
            end if;
          end if;
          rootVal.setEndPosition();
        end if;
      end if;
    end if;
  end if;
  // Root Value is initialized, now handle current value
  // Iterate down the value chain leaving prevVal at the last link
  select any curVal from instances of V_VAL where
                                     selected.Value_ID == param.a4_loop_id_name;
  if (not empty curVal)
    name = curVal.Text;
    endVal_ID = ::get_value_chain_end(start_value_ID:rootVal.Value_ID);
    select any endVal from instances of V_VAL where
                                                 selected.Value_ID == endVal_ID;
    select one instRef related by endVal->V_IRF[R801];
    select one attrVal related by endVal->V_AVL[R801];
    select one membrVal related by endVal->V_MVL[R801];
    select one tranVal related by endVal->V_TVL[R801];
    select one arrayVal related by endVal->V_AER[R801];
    select one paramVal related by endVal->V_PVL[R801];
    select one evtVal related by endVal->V_EDV[R801];
    select one selVal related by endVal->V_SLR[R801];
    if (not_empty instRef)
      select one instVar related by instRef->V_VAR[R808];
      if (empty instVar)
        ::clear_value_data();
        ERR::reportParseError( msg: "Internal Error: Variable not found for " +
                "instance reference at token %s.", token: param.a1_rule_token );
      else
        select one inst related by instVar->V_INT[R814];
        select one tran related by instVar->V_TRN[R814];
        if (not_empty inst) // Variable refers to an instance
          select one modelClass related by inst->O_OBJ[R818];
          if (empty modelClass)
            ::clear_value_data();
            ERR::reportParseError( msg: "Internal Error: Class not found for " +
                      "variable " + instVar.Name, token: param.a1_rule_token );
          else
            select any attr related by inst->O_OBJ[R818]->O_ATTR[R102] where
                                                          selected.Name == name;
            if (empty attr)
              ::clear_value_data();
              ERR::reportParseError( msg: "->%s<- is not an attribute of " +
                                         "class ->" + modelClass.Name + "<-.",
                                                   token: param.a1_rule_token );
            else
              // Successfully recognized an attribute reference
              create object instance attrVal of V_AVL;
              relate attrVal to curVal across R801;
              relate attrVal to attr across R806;
              select one dt related by attr->S_DT[R114];
              select one rattr related by attr->O_RATTR[R106];
              if not_empty rattr
                select one dt related by rattr->O_BATTR[R113]->
                                                       O_ATTR[R106]->S_DT[R114];
              end if;
              relate curVal to dt across R820;
              relate endVal to attrVal across R807;
            end if;
          end if;
        elif (not_empty tran)
          select one dt related by endVal->S_DT[R820];
          if (empty dt)
            ::clear_value_data();
            ERR::reportParseError( msg: "Internal Error: Data type not found " +
                                 " for token %s.", token: param.a1_rule_token );
          else
            select one sdt related by dt->S_SDT[R17];
            if (empty sdt)
              ::clear_value_data();
              ERR::reportParseError( msg: "->%s<- is not a structured data " +
                                          "type.", token: param.a1_rule_token );
            else
              select any member related by sdt->S_MBR[R44] where
                                                          selected.Name == name;
              if (empty member)
                ::clear_value_data();
                ERR::reportParseError( msg: "->%s<- is not a member of " +
                                    "structured data type ->" + dt.Name + "<-",
                                                   token: param.a1_rule_token );
              else
                // Successfully recognized a member reference
                create object instance membrVal of V_MVL;
                relate membrVal to curVal across R801;
                relate membrVal to member across R836;
                select one dt related by member->S_DT[R45];
                relate curVal to dt across R820;
                relate endVal to membrVal across R837;
              end if;
            end if;
          end if;
        else
          ::clear_value_data();
          ERR::reportParseError( msg: "Internal Error: Variable subtype not " +
                            "found for token %s.", token: param.a1_rule_token );
        end if;
      end if;  // instance variable found
    elif (not_empty selVal)
      if (empty varInst)
        ::clear_value_data();
        ERR::reportParseError( msg: "Internal Error: Variable not found for " +
                    "selected class at token %s.", token: param.a1_rule_token );
      else
        select one selClass related by varInst->V_INT[R814]->O_OBJ[R818];
        if empty selClass
          ::clear_value_data();
          ERR::reportParseError( msg: "Internal Error: selected class not " +
                            "found for token %s.", token: param.a1_rule_token );
        else
          select any attr related by selClass->O_ATTR[R102] where
                                                          selected.Name == name;
          if (empty attr)
            ::clear_value_data();
            ERR::reportParseError( msg: "->%s<- is not an attribute of " +
                                         "class ->" + selClass.Name + "<-.",
                                                   token: param.a1_rule_token );
          else
            // Successfully recognized an attribute reference
            create object instance attrVal of V_AVL;
            relate attrVal to curVal across R801;
            relate attrVal to attr across R806;
            select one dt related by attr->S_DT[R114];
            select one rattr related by attr->O_RATTR[R106];
            if not_empty rattr
              select one dt related by rattr->O_BATTR[R113]->
                                                       O_ATTR[R106]->S_DT[R114];
            end if;
            relate curVal to dt across R820;
            relate endVal to attrVal across R807;
          end if;
        end if;
      end if; // selected variable found
    elif (not_empty attrVal or not_empty membrVal or not_empty tranVal
                or not_empty arrayVal or not_empty paramVal or not_empty evtVal)
      select one dt related by endVal->S_DT[R820];
      if (empty dt)
        ::clear_value_data();
        ERR::reportParseError( msg: "Internal Error: Data type not found " +
                                 " for token %s.", token: param.a1_rule_token );
      else
        select one irdt related by dt->S_IRDT[R17];
        select one sdt related by dt->S_SDT[R17];
        select one udt related by dt->S_UDT[R17];
        if(not_empty udt)
          core_id = udt.getCoreType();
          select any dt_pe from instances of PE_PE
                                         where (selected.Element_ID == core_id);
          select one base_dt related by dt_pe->S_DT[R8001];
          select one sdt related by base_dt->S_SDT[R17];
          select one irdt related by base_dt->S_IRDT[R17];
        end if;
        if (empty sdt)
          if (empty irdt)
            if not ::array_length_validate(a1_name:name,
              a2_isArray:endVal.getDimensions() > 0, a3_curVal_ID:curVal.Value_ID,
                    a4_token:param.a1_rule_token, a5_endVal_ID:endVal.Value_ID);
              mbrName = "";
              if not_empty attrVal
                select one attr related by attrVal->O_ATTR[R806];
                mbrName = attr.Name;
              elif not_empty membrVal
                select one member related by membrVal->S_MBR[R836];
                mbrName = member.Name;
              elif not_empty tranVal
                select one var related by tranVal->V_VAR[R805];
                mbrName = var.Name;
              end if;
              ::clear_value_data();
              if (mbrName != "")
                ERR::reportParseError( msg: "->" + mbrName +
                      "<- is not a structured data type or instance reference.",
                                                   token: param.a1_rule_token );
              else
                ERR::reportParseError( msg: "The variable to the left of ->" +
                  name + "<- is not a structured data type or instance reference.",
                                                   token: param.a1_rule_token );
              end if;
            end if;
          else
            /* TODO - this should probably be refactored to "attribute_validate" along with
               earlier identical code*/
            select one modelClass related by irdt->O_OBJ[R123];
            if (empty modelClass)
              ::clear_value_data();
              ERR::reportParseError( msg: "Internal Error: Class not found for " +
                        "variable " + endVal.Text, token: param.a1_rule_token );
            else
              select any attr related by irdt->O_OBJ[R123]->O_ATTR[R102] where
                                                          selected.Name == name;
              if (empty attr)
                ::clear_value_data();
                ERR::reportParseError( msg: "->%s<- is not an attribute of " +
                                           "class ->" + modelClass.Name + "<-.",
                                                   token: param.a1_rule_token );
              else
                // Successfully recognized an attribute reference
                create object instance attrVal of V_AVL;
                relate attrVal to curVal across R801;
                relate attrVal to attr across R806;
                select one dt related by attr->S_DT[R114];
                select one rattr related by attr->O_RATTR[R106];
                if not_empty rattr
                  select one dt related by rattr->O_BATTR[R113]->
                                                       O_ATTR[R106]->S_DT[R114];
                end if;
                relate curVal to dt across R820;
                relate endVal to attrVal across R807;
              end if;
            end if;
          end if;
        else
          select any member related by sdt->S_MBR[R44] where
                                                          selected.Name == name;
          if (empty member)
            if not ::array_length_validate(a1_name:name,
               a2_isArray:endVal.getDimensions() > 0, a3_curVal_ID:curVal.Value_ID,
                    a4_token:param.a1_rule_token, a5_endVal_ID:endVal.Value_ID);
              ::set_token(a1_token:param.a1_rule_token,
                                      a2_line:curVal.LineNumber,
                           a3_column:curVal.StartPosition, a4_text:curVal.Text);
              ::clear_value_data();
              ERR::reportParseError( msg: "->%s<- is not a member of " +
                                "structured data type ->" + dt.Name + "<-.",
                                                   token: param.a1_rule_token );
            end if;
          else
            // Successfully recognized a member reference
            create object instance membrVal of V_MVL;
            relate membrVal to curVal across R801;
            relate membrVal to member across R836;
            select one dt related by member->S_DT[R45];
            relate curVal to dt across R820;
            relate endVal to membrVal across R837;
          end if;
        end if;
      end if;
    else
      ::clear_value_data();
      ERR::reportParseError( msg: "Internal Error: Value subtype instance " +
                        "not found for token %s.", token: param.a1_rule_token );
    end if;
    if (endVal.getDimensions() > 0)
       if not ::array_length_validate(a1_name:name,
                        a2_isArray:true, a3_curVal_ID:curVal.Value_ID,
           a4_token:param.a1_rule_token, a5_endVal_ID:endVal.Value_ID);
       array_root_val_ID =
                     ::get_array_value_root(start_value_ID:endVal.Value_ID);
           select any val from instances of V_VAL where
                                     selected.Value_ID == array_root_val_ID;
            ::clear_value_data();
            ERR::reportParseError( msg: "Variable ->" + val.Text +
                            "<- is an array.", token: param.a1_rule_token );
       end if;
    elif (endVal.getDimensions() < 0)
       array_root_val_ID =
                 ::get_array_value_root(start_value_ID:endVal.Value_ID);
       select any val from instances of V_VAL where
                                 selected.Value_ID == array_root_val_ID;
       ::clear_value_data();
       ERR::reportParseError( msg: "Variable ->" + val.Text +
         "<- has too many array indices.", token: param.a1_rule_token );
    elif ( not endVal.isElementCountValid() )
    	// one of the indexes is out of bounds.
    	   array_root_val_ID =
           ::get_array_value_root(start_value_ID:endVal.Value_ID);
   	   select any val from instances of V_VAL where
                                 selected.Value_ID == array_root_val_ID;
   	   ::clear_value_data();
   	   ERR::reportParseError( msg: "Variable ->" + val.Text +
       "<- has index out of bounds.", token: param.a1_rule_token );
    end if;
    curVal.setEndPosition();
  end if;
end if;
return param.a3_ruleid_name;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7256828f-91ae-4e37-a3dc-efe5faeebd33",
	"a299e195-4f30-41a4-8578-97224b72cedd",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("de9a3f89-3ffa-4cee-b5c8-9845a3dbc684",
	"a299e195-4f30-41a4-8578-97224b72cedd",
	'a2_upper_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7256828f-91ae-4e37-a3dc-efe5faeebd33",
	'');
INSERT INTO S_SPARM
	VALUES ("978e4f84-ee44-468a-8674-7d943c331162",
	"a299e195-4f30-41a4-8578-97224b72cedd",
	'a3_ruleid_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"de9a3f89-3ffa-4cee-b5c8-9845a3dbc684",
	'');
INSERT INTO S_SPARM
	VALUES ("713df34e-b50b-4f02-9d44-c52c8653bc5c",
	"a299e195-4f30-41a4-8578-97224b72cedd",
	'a4_loop_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"978e4f84-ee44-468a-8674-7d943c331162",
	'');
INSERT INTO S_SPARM
	VALUES ("b69baf95-0803-4995-8670-bbfada4be854",
	"a299e195-4f30-41a4-8578-97224b72cedd",
	'b1_root_inst_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"713df34e-b50b-4f02-9d44-c52c8653bc5c",
	'');
INSERT INTO S_SPARM
	VALUES ("50ec54ea-4000-41e7-802f-ed995fe15522",
	"a299e195-4f30-41a4-8578-97224b72cedd",
	'b2_current_inst_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b69baf95-0803-4995-8670-bbfada4be854",
	'');
INSERT INTO PE_PE
	VALUES ("a299e195-4f30-41a4-8578-97224b72cedd",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3d08972b-b3d6-46e4-8369-404a8e64b368",
	"00000000-0000-0000-0000-000000000000",
	'Param_data_access_loop12_end',
	'ParserValidateFunction: TRUE',
	'// ::Param_data_access_loop12_end()
select any member from instances of S_MBR where
                              selected.Member_ID == param.b2_class_or_struct_id;
select any parmVal from instances of V_PVL where
                               selected.Value_ID == param.b2_class_or_struct_id;
if (empty member and empty parmVal)
  // TODO Log error
else
  if (not_empty member)
    discard = ::field_create(
                   new_attr_or_member_id:param.b2_class_or_struct_id,
                          prev_var_attr_or_member_id:param.a3_rule_id,
                                                     token:param.a1_rule_token);
  // In the parmVal case we already created the value
  end if;
end if;
return param.a4_loop_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a5760c51-5871-42d4-bb59-ee4337fbf143",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4b79831d-78df-4960-993a-755223eab5a8",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a5760c51-5871-42d4-bb59-ee4337fbf143",
	'');
INSERT INTO S_SPARM
	VALUES ("41f377ca-ba98-4f62-a97e-d6573a535208",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'a3_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4b79831d-78df-4960-993a-755223eab5a8",
	'');
INSERT INTO S_SPARM
	VALUES ("560a8386-cb3e-44f3-8bc3-f4445658a078",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'a4_loop_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"41f377ca-ba98-4f62-a97e-d6573a535208",
	'');
INSERT INTO S_SPARM
	VALUES ("7872a6d6-57e2-4c5c-87ec-43d90d6ec172",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'b1_data_item_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"560a8386-cb3e-44f3-8bc3-f4445658a078",
	'');
INSERT INTO S_SPARM
	VALUES ("c48c5565-a84c-4b50-bbb3-77ce1901f0f8",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'b2_class_or_struct_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7872a6d6-57e2-4c5c-87ec-43d90d6ec172",
	'');
INSERT INTO S_SPARM
	VALUES ("65ce411e-18e1-4931-9468-f7756bc837e4",
	"3d08972b-b3d6-46e4-8369-404a8e64b368",
	'b4_field_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c48c5565-a84c-4b50-bbb3-77ce1901f0f8",
	'');
INSERT INTO PE_PE
	VALUES ("3d08972b-b3d6-46e4-8369-404a8e64b368",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a68941a9-b98e-44d0-aafd-ce6f78fe0fc9",
	"00000000-0000-0000-0000-000000000000",
	'Param_data_access_loop12_start',
	'ParserValidateFunction: TRUE',
	'//::Param_data_access_loop12_start
return param.a3_this_rule;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2e7fa2e0-66a8-494b-a61b-70b345d508d2",
	"a68941a9-b98e-44d0-aafd-ce6f78fe0fc9",
	'a1_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d4127c12-2597-4145-8b06-e684d857d82f",
	"a68941a9-b98e-44d0-aafd-ce6f78fe0fc9",
	'a2_rule_begin',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2e7fa2e0-66a8-494b-a61b-70b345d508d2",
	'');
INSERT INTO S_SPARM
	VALUES ("5e6ae40f-2b1b-448f-a326-6295561cd11f",
	"a68941a9-b98e-44d0-aafd-ce6f78fe0fc9",
	'a3_this_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d4127c12-2597-4145-8b06-e684d857d82f",
	'');
INSERT INTO PE_PE
	VALUES ("a68941a9-b98e-44d0-aafd-ce6f78fe0fc9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c488c458-404c-48b1-90c7-ceb570a14e93",
	"00000000-0000-0000-0000-000000000000",
	'Event_data_access_end',
	'ParserValidateFunction: TRUE',
	'// ::Event_data_access_end()
result = param.a4_rule_id;
if ( param.b1_member_id == GD::NULL_UNIQUE_ID() and
                                param.a3_rule_begin_id ==  GD::NULL_UNIQUE_ID())
  // There is neither a field, nor an event parameter reference,
  // dispose incompletely created value instances . . .
  ::clear_value_data();
  // ... and report an error
  ERR::reportParseError( msg:
                 "Field or parameter %s not found for event parameter access",
                                                   token: param.a1_rule_token );
else
  current_scope = ::get_current_scope();
  select any blk from instances of ACT_BLK where
                                           (selected.Block_ID == current_scope);
  if (empty blk)
    ::clear_value_data();
    ERR::reportParseError(msg:"Block not found",
                                                   token: param.a1_rule_token );
  else
    // TBD
  end if;
  select many vals from instances of V_VAL where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
  for each val in vals
    relate val to blk across R826;
  end for;
end if;
return result;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2f4bb595-db7c-48a1-b177-ad2eac3219e8",
	"c488c458-404c-48b1-90c7-ceb570a14e93",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1c0d3d85-53a8-4922-a602-8b7662c88d7d",
	"c488c458-404c-48b1-90c7-ceb570a14e93",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2f4bb595-db7c-48a1-b177-ad2eac3219e8",
	'');
INSERT INTO S_SPARM
	VALUES ("197be39e-22c2-4458-98a3-14f79f1059be",
	"c488c458-404c-48b1-90c7-ceb570a14e93",
	'a3_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1c0d3d85-53a8-4922-a602-8b7662c88d7d",
	'');
INSERT INTO S_SPARM
	VALUES ("44d0091a-093b-47f2-b492-26b8fc566129",
	"c488c458-404c-48b1-90c7-ceb570a14e93",
	'a4_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"197be39e-22c2-4458-98a3-14f79f1059be",
	'');
INSERT INTO S_SPARM
	VALUES ("59a0e607-0fd2-4ca6-b669-368459209813",
	"c488c458-404c-48b1-90c7-ceb570a14e93",
	'b1_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"44d0091a-093b-47f2-b492-26b8fc566129",
	'');
INSERT INTO PE_PE
	VALUES ("c488c458-404c-48b1-90c7-ceb570a14e93",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d34bc23b-88cc-438f-ab67-721dfc1b1415",
	"00000000-0000-0000-0000-000000000000",
	'Event_data_access_loop13_end',
	'ParserValidateFunction: TRUE',
	'// ::Event_data_access_loop13_end()
select any member from instances of S_MBR where
                              selected.Member_ID == param.b2_class_or_struct_id;
select any evtVal from instances of V_EDV where
                               selected.Value_ID == param.b2_class_or_struct_id;
if (empty member and empty evtVal)
  // TODO Log error
else
  if (not_empty member)
    discard = ::field_create(
                   new_attr_or_member_id:param.b2_class_or_struct_id,
                          prev_var_attr_or_member_id:param.a3_rule_id,
                                                     token:param.a1_rule_token);
  // In the evtVal case we already created the value
  end if;
end if;
return param.a4_loop_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3ec74d1f-3d7c-40c4-8283-79cdb6697c03",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("98689164-e6b1-4a0c-9a6b-c550f61398e2",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3ec74d1f-3d7c-40c4-8283-79cdb6697c03",
	'');
INSERT INTO S_SPARM
	VALUES ("0bcbfd6c-2aaa-453b-81e2-e58391a7a065",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'a3_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"98689164-e6b1-4a0c-9a6b-c550f61398e2",
	'');
INSERT INTO S_SPARM
	VALUES ("3585e314-d7da-4ecc-9f37-170691980c5c",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'a4_loop_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0bcbfd6c-2aaa-453b-81e2-e58391a7a065",
	'');
INSERT INTO S_SPARM
	VALUES ("0f651958-4023-471a-a4d9-cc60bf18d01d",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'b1_supp_data_item_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3585e314-d7da-4ecc-9f37-170691980c5c",
	'');
INSERT INTO S_SPARM
	VALUES ("a2d9db18-6568-4b1d-8399-22aba487ec94",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'b2_class_or_struct_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0f651958-4023-471a-a4d9-cc60bf18d01d",
	'');
INSERT INTO S_SPARM
	VALUES ("f1bdddea-146c-40d6-acef-8a591f2b46f5",
	"d34bc23b-88cc-438f-ab67-721dfc1b1415",
	'b4_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a2d9db18-6568-4b1d-8399-22aba487ec94",
	'');
INSERT INTO PE_PE
	VALUES ("d34bc23b-88cc-438f-ab67-721dfc1b1415",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d17f0a8-fe83-462a-9e26-b4683df9b0c8",
	"00000000-0000-0000-0000-000000000000",
	'Event_data_access_loop13_start',
	'ParserValidateFunction: TRUE',
	'//::Event_data_access_loop13_start
return param.a3_this_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7c21776d-5a6c-4c9b-b908-cc945940765f",
	"7d17f0a8-fe83-462a-9e26-b4683df9b0c8",
	'a1_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0181eb50-ce65-4c0b-a945-89dc5fdd9b95",
	"7d17f0a8-fe83-462a-9e26-b4683df9b0c8",
	'a2_rule_begin_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7c21776d-5a6c-4c9b-b908-cc945940765f",
	'');
INSERT INTO S_SPARM
	VALUES ("6cfb9f1d-beae-4716-a47f-f0ab2c961b46",
	"7d17f0a8-fe83-462a-9e26-b4683df9b0c8",
	'a3_this_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0181eb50-ce65-4c0b-a945-89dc5fdd9b95",
	'');
INSERT INTO PE_PE
	VALUES ("7d17f0a8-fe83-462a-9e26-b4683df9b0c8",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b771f762-7a06-404d-8bd9-625fa22607e9",
	"00000000-0000-0000-0000-000000000000",
	'Event_data_access_start',
	'ParserValidateFunction: TRUE',
	'//::Event_data_access_start()
create object instance val of V_VAL;
create object instance edv of V_EDV;
relate edv to val across R801;
val.isLValue = false;
return val.Value_ID;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("24df1c97-7cb1-4bc2-b56a-0a0a75e64fc4",
	"b771f762-7a06-404d-8bd9-625fa22607e9",
	'a1_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b771f762-7a06-404d-8bd9-625fa22607e9",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	"00000000-0000-0000-0000-000000000000",
	'Array_refs_validate',
	'ParserValidateFunction: TRUE',
	'return param.a5_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("51aff261-c662-4583-a480-9de334ec8fa2",
	"99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d25cfc2-6f92-4157-88cc-310e1e86e179",
	"99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"51aff261-c662-4583-a480-9de334ec8fa2",
	'');
INSERT INTO S_SPARM
	VALUES ("649daeae-be3f-438c-ba69-616c472dad2f",
	"99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	'a3_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1d25cfc2-6f92-4157-88cc-310e1e86e179",
	'');
INSERT INTO S_SPARM
	VALUES ("ea53e761-2218-40f3-8e71-4cb0c8fd2ea8",
	"99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	'a4_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"649daeae-be3f-438c-ba69-616c472dad2f",
	'');
INSERT INTO S_SPARM
	VALUES ("dafc696d-87a8-4fe0-bf7c-1834ffec5faf",
	"99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	'a5_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ea53e761-2218-40f3-8e71-4cb0c8fd2ea8",
	'');
INSERT INTO PE_PE
	VALUES ("99112c89-d3a3-4de0-90ab-de5c74a00b4f",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e6e050bf-908b-4356-9576-9644952b9da2",
	"00000000-0000-0000-0000-000000000000",
	'Array_refs_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ce55a204-4d0b-4b56-8ba6-138220f2d5a6",
	"e6e050bf-908b-4356-9576-9644952b9da2",
	'a1_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e6e050bf-908b-4356-9576-9644952b9da2",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("15c087b3-bb32-447a-a6a9-e5853c032a87",
	"00000000-0000-0000-0000-000000000000",
	'Array_refs_loop12_start',
	'ParserValidateFunction: TRUE',
	'return param.a3_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b03e6110-1172-43ca-8762-ebac3334f7a5",
	"15c087b3-bb32-447a-a6a9-e5853c032a87",
	'a1_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("09f75a17-1ffe-4437-af76-88cba0c8c53e",
	"15c087b3-bb32-447a-a6a9-e5853c032a87",
	'a2_start_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b03e6110-1172-43ca-8762-ebac3334f7a5",
	'');
INSERT INTO S_SPARM
	VALUES ("bc190f16-aff8-4b53-b999-7ce0017199cf",
	"15c087b3-bb32-447a-a6a9-e5853c032a87",
	'a3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"09f75a17-1ffe-4437-af76-88cba0c8c53e",
	'');
INSERT INTO PE_PE
	VALUES ("15c087b3-bb32-447a-a6a9-e5853c032a87",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f2ea5a17-4121-4704-a699-17b1406a4b34",
	"00000000-0000-0000-0000-000000000000",
	'Array_refs_loop12_end',
	'ParserValidateFunction: TRUE',
	'rootVal_ID = ::get_value_chain_end(start_value_ID:param.a3_outer_loop_id);
select any rootVal from instances of V_VAL where
                                    selected.Value_ID == rootVal_ID;
select any exprVal  from instances of V_VAL where
                                          selected.Value_ID == param.a5_expr_id;
select one dt related by exprVal->S_DT[R820];
if ( (empty dt) or (dt.Name != "integer") )
  ::clear_value_data();
  ERR::reportParseError( msg: "Array index must be an integer.",
                                                   token: param.a1_rule_token );
else
  create object instance val of V_VAL;
  create object instance arrayRef of V_AER;
  relate val to  arrayRef across R801;
  relate arrayRef to rootVal across R838;
  relate arrayRef to exprVal across R839;
end if;
return param.a3_outer_loop_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("73ea96c9-56cb-4e0f-82f6-7185267ab6fa",
	"f2ea5a17-4121-4704-a699-17b1406a4b34",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("84d5cbc3-b796-40fe-b618-d14dfdc29cce",
	"f2ea5a17-4121-4704-a699-17b1406a4b34",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"73ea96c9-56cb-4e0f-82f6-7185267ab6fa",
	'');
INSERT INTO S_SPARM
	VALUES ("0de83dc9-cc2e-41a6-b9a8-a0bdb3da816b",
	"f2ea5a17-4121-4704-a699-17b1406a4b34",
	'a3_outer_loop_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"84d5cbc3-b796-40fe-b618-d14dfdc29cce",
	'');
INSERT INTO S_SPARM
	VALUES ("6aa38edf-b710-4a29-8a7f-84e9ddfc3cea",
	"f2ea5a17-4121-4704-a699-17b1406a4b34",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0de83dc9-cc2e-41a6-b9a8-a0bdb3da816b",
	'');
INSERT INTO S_SPARM
	VALUES ("5e85a3f2-74f9-41fb-bfef-144cfa794826",
	"f2ea5a17-4121-4704-a699-17b1406a4b34",
	'a5_expr_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6aa38edf-b710-4a29-8a7f-84e9ddfc3cea",
	'');
INSERT INTO PE_PE
	VALUES ("f2ea5a17-4121-4704-a699-17b1406a4b34",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f746b054-e7ab-4d57-9776-8b7ec838b975",
	"00000000-0000-0000-0000-000000000000",
	'Array_refs_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6309b1d2-f8f4-4cb4-bc6d-29f99aec8ade",
	"f746b054-e7ab-4d57-9776-8b7ec838b975",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1e06f856-5a96-4fa1-94c6-04af0a9ad228",
	"f746b054-e7ab-4d57-9776-8b7ec838b975",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6309b1d2-f8f4-4cb4-bc6d-29f99aec8ade",
	'');
INSERT INTO S_SPARM
	VALUES ("c105b7f3-5a11-414d-976b-0746a5cc2ee4",
	"f746b054-e7ab-4d57-9776-8b7ec838b975",
	'a3_start_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1e06f856-5a96-4fa1-94c6-04af0a9ad228",
	'');
INSERT INTO S_SPARM
	VALUES ("6b936c62-d779-4b03-982e-8932768cdb36",
	"f746b054-e7ab-4d57-9776-8b7ec838b975",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c105b7f3-5a11-414d-976b-0746a5cc2ee4",
	'');
INSERT INTO S_SPARM
	VALUES ("de09ff3b-724b-4f2c-8297-a1efd641fee0",
	"f746b054-e7ab-4d57-9776-8b7ec838b975",
	'a5_expr_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6b936c62-d779-4b03-982e-8932768cdb36",
	'');
INSERT INTO PE_PE
	VALUES ("f746b054-e7ab-4d57-9776-8b7ec838b975",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("73381d30-54c8-48e0-a503-3bc8dd9cf649",
	"00000000-0000-0000-0000-000000000000",
	'Instance_access_segment_end',
	'ParserValidateFunction: TRUE',
	'return param.a4_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b0fb19c7-57f3-47f5-883e-d964ba3f3821",
	"73381d30-54c8-48e0-a503-3bc8dd9cf649",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9c00b78c-c4f9-4f2b-ab77-2cac8a6699e0",
	"73381d30-54c8-48e0-a503-3bc8dd9cf649",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b0fb19c7-57f3-47f5-883e-d964ba3f3821",
	'');
INSERT INTO S_SPARM
	VALUES ("562289cb-4852-4ecb-ad6b-7576b894abb9",
	"73381d30-54c8-48e0-a503-3bc8dd9cf649",
	'a3_start_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9c00b78c-c4f9-4f2b-ab77-2cac8a6699e0",
	'');
INSERT INTO S_SPARM
	VALUES ("7fc91b4c-780d-4bca-b9da-790a6f1c3f5d",
	"73381d30-54c8-48e0-a503-3bc8dd9cf649",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"562289cb-4852-4ecb-ad6b-7576b894abb9",
	'');
INSERT INTO S_SPARM
	VALUES ("9a2c894f-cb01-4c91-9bab-6fe0fdc39798",
	"73381d30-54c8-48e0-a503-3bc8dd9cf649",
	'b1_local_variable_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7fc91b4c-780d-4bca-b9da-790a6f1c3f5d",
	'');
INSERT INTO S_SPARM
	VALUES ("a858395c-cc03-47f9-8ac6-ae4088a25ec1",
	"73381d30-54c8-48e0-a503-3bc8dd9cf649",
	'b2_array_refs_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9a2c894f-cb01-4c91-9bab-6fe0fdc39798",
	'');
INSERT INTO PE_PE
	VALUES ("73381d30-54c8-48e0-a503-3bc8dd9cf649",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2d69f02e-86a0-44e3-807b-60ec7717cdca",
	"00000000-0000-0000-0000-000000000000",
	'Instance_access_segment_start',
	'ParserValidateFunction: TRUE',
	'create object instance val of V_VAL;
val.isLValue = param.a2_isLval;
return val.Value_ID;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a8ca7249-39d9-4f74-82af-2bbe52215828",
	"2d69f02e-86a0-44e3-807b-60ec7717cdca",
	'a1_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("68174d55-5880-47c0-a628-29214aff71dd",
	"2d69f02e-86a0-44e3-807b-60ec7717cdca",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"a8ca7249-39d9-4f74-82af-2bbe52215828",
	'');
INSERT INTO PE_PE
	VALUES ("2d69f02e-86a0-44e3-807b-60ec7717cdca",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	"00000000-0000-0000-0000-000000000000",
	'Instance_access_segment_validate',
	'ParserValidateFunction: TRUE',
	'return param.a6_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3abb07a0-bc0b-441c-8749-12d0977e4586",
	"96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3281e1ed-cc6a-46d0-a5b3-6942fcf9fc58",
	"96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"3abb07a0-bc0b-441c-8749-12d0977e4586",
	'');
INSERT INTO S_SPARM
	VALUES ("5e79f1aa-163e-429e-ac24-d1cc4a2312d4",
	"96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3281e1ed-cc6a-46d0-a5b3-6942fcf9fc58",
	'');
INSERT INTO S_SPARM
	VALUES ("7eda88bb-6066-4678-b035-89743903f0bc",
	"96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	'a4_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5e79f1aa-163e-429e-ac24-d1cc4a2312d4",
	'');
INSERT INTO S_SPARM
	VALUES ("52d032ee-1699-4886-be95-728ab431581c",
	"96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7eda88bb-6066-4678-b035-89743903f0bc",
	'');
INSERT INTO S_SPARM
	VALUES ("a8d8359a-7f7e-4bc4-a80b-8467c6234756",
	"96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"52d032ee-1699-4886-be95-728ab431581c",
	'');
INSERT INTO PE_PE
	VALUES ("96bf2f2d-838a-4bf7-8f34-df3e7cedbf5b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("34d39c00-5d28-41af-9313-ba657c5c7be4",
	"00000000-0000-0000-0000-000000000000",
	'Element_label_validate',
	'ParserValidateFunction: TRUE',
	'select any value from instances of V_VAL where
                                  selected.Value_ID == param.c3_current_rule_id;
if (not_empty value)
  value.Text = ::getText(rule_token: param.a1_rule_token);
  value.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
  value.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
end if;
return param.c3_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d547800e-0476-4f49-aba2-a5c19cfef734",
	"34d39c00-5d28-41af-9313-ba657c5c7be4",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("56fc34a3-9da7-4e9c-8fd1-7ed8648b2875",
	"34d39c00-5d28-41af-9313-ba657c5c7be4",
	'b1_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"d547800e-0476-4f49-aba2-a5c19cfef734",
	'');
INSERT INTO S_SPARM
	VALUES ("0e5ec714-2bcc-4cfb-8006-3caa815489b1",
	"34d39c00-5d28-41af-9313-ba657c5c7be4",
	'b2_rule_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"56fc34a3-9da7-4e9c-8fd1-7ed8648b2875",
	'');
INSERT INTO S_SPARM
	VALUES ("6b3e83d5-17bd-442a-813f-6fe4452e4172",
	"34d39c00-5d28-41af-9313-ba657c5c7be4",
	'c1_element_label_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0e5ec714-2bcc-4cfb-8006-3caa815489b1",
	'');
INSERT INTO S_SPARM
	VALUES ("1264b9eb-0aab-4df0-aa67-37ca8bed7df4",
	"34d39c00-5d28-41af-9313-ba657c5c7be4",
	'c2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6b3e83d5-17bd-442a-813f-6fe4452e4172",
	'');
INSERT INTO S_SPARM
	VALUES ("cdf5f718-1f73-41d2-822c-6ea5bcf29e84",
	"34d39c00-5d28-41af-9313-ba657c5c7be4",
	'c3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1264b9eb-0aab-4df0-aa67-37ca8bed7df4",
	'');
INSERT INTO PE_PE
	VALUES ("34d39c00-5d28-41af-9313-ba657c5c7be4",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	"00000000-0000-0000-0000-000000000000",
	'Instance_start_segment_validate',
	'ParserValidateFunction: TRUE',
	'// ::Instance_start_segment_validate()
// See also ::Instance_access_segment_validate()
return param.a6_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9356e0a0-9fb3-448e-88db-a700b660a37c",
	"f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f3c83e1f-97ae-4758-bbb7-8a72b9bbb5b8",
	"f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"9356e0a0-9fb3-448e-88db-a700b660a37c",
	'');
INSERT INTO S_SPARM
	VALUES ("27d78848-0cf3-45b7-a513-14a6e1208fb1",
	"f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f3c83e1f-97ae-4758-bbb7-8a72b9bbb5b8",
	'');
INSERT INTO S_SPARM
	VALUES ("4a0ca07e-1ac0-4c25-a7e5-3456b3cf0a63",
	"f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	'a4_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"27d78848-0cf3-45b7-a513-14a6e1208fb1",
	'');
INSERT INTO S_SPARM
	VALUES ("b6334e00-37d3-44e7-9dfe-84f0ba3c0385",
	"f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	'a5_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4a0ca07e-1ac0-4c25-a7e5-3456b3cf0a63",
	'');
INSERT INTO S_SPARM
	VALUES ("dd5d973f-0187-4d4a-ace7-b9ff641a125e",
	"f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	'a6_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b6334e00-37d3-44e7-9dfe-84f0ba3c0385",
	'');
INSERT INTO PE_PE
	VALUES ("f4515b8b-7ff8-4a36-9bcf-7eb7e6578991",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("af2e27e0-991e-4c6c-bacc-3ee54d2f20cf",
	"00000000-0000-0000-0000-000000000000",
	'Instance_start_segment_start',
	'ParserValidateFunction: TRUE',
	'// ::Instance_start_segment_start()
return ::Instance_access_segment_start(
        a1_current_rule_id:param.a1_current_rule_id, a2_isLval:param.a2_isLval);',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b3aa6951-ca54-4bdc-bb4d-cad29e51730e",
	"af2e27e0-991e-4c6c-bacc-3ee54d2f20cf",
	'a1_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1acab53d-eaf5-4cd6-9567-aedeab1718ea",
	"af2e27e0-991e-4c6c-bacc-3ee54d2f20cf",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"b3aa6951-ca54-4bdc-bb4d-cad29e51730e",
	'');
INSERT INTO PE_PE
	VALUES ("af2e27e0-991e-4c6c-bacc-3ee54d2f20cf",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3089a480-1278-4dff-a2a4-de1b9c90fe13",
	"00000000-0000-0000-0000-000000000000",
	'Instance_start_segment_end',
	'ParserValidateFunction: TRUE',
	'// ::Instance_start_segment_end()
// See also ::Instance_access_segment_end()
return param.a4_current_rule_id;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c388ee11-1829-4bbc-ae55-e42259da19f8",
	"3089a480-1278-4dff-a2a4-de1b9c90fe13",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0734b4c1-2128-4582-8ba1-78e9cfaf72f6",
	"3089a480-1278-4dff-a2a4-de1b9c90fe13",
	'a2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c388ee11-1829-4bbc-ae55-e42259da19f8",
	'');
INSERT INTO S_SPARM
	VALUES ("c7f471e9-4be1-4281-85b1-37b664818927",
	"3089a480-1278-4dff-a2a4-de1b9c90fe13",
	'a3_start_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0734b4c1-2128-4582-8ba1-78e9cfaf72f6",
	'');
INSERT INTO S_SPARM
	VALUES ("516000a8-dd3d-494a-978b-19ec15e5aaf0",
	"3089a480-1278-4dff-a2a4-de1b9c90fe13",
	'a4_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"c7f471e9-4be1-4281-85b1-37b664818927",
	'');
INSERT INTO S_SPARM
	VALUES ("e4e4f511-2426-43de-8a5b-e05425a650b6",
	"3089a480-1278-4dff-a2a4-de1b9c90fe13",
	'b1_local_variable_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"516000a8-dd3d-494a-978b-19ec15e5aaf0",
	'');
INSERT INTO S_SPARM
	VALUES ("061f9bcc-86d1-4a32-888f-67ca7651cac1",
	"3089a480-1278-4dff-a2a4-de1b9c90fe13",
	'b2_array_refs_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e4e4f511-2426-43de-8a5b-e05425a650b6",
	'');
INSERT INTO PE_PE
	VALUES ("3089a480-1278-4dff-a2a4-de1b9c90fe13",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	"00000000-0000-0000-0000-000000000000",
	'Root_element_label_validate',
	'ParserValidateFunction: TRUE',
	'// ::Root_element_label_validate()
return ::Element_label_validate(a1_rule_token:param.a1_rule_token,
           b1_isLval:param.b1_isLval, b2_rule_text:param.b2_rule_text,
                 c1_element_label_rule_id:param.c1_element_label_rule_id,
                                    c2_upper_rule_id:param.c2_upper_rule_id,
                                   c3_current_rule_id:param.c3_current_rule_id);',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c8dacd90-e353-468d-b3bf-e4210901014f",
	"ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("652961fe-f477-489e-8892-193d44bcd414",
	"ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	'b1_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"c8dacd90-e353-468d-b3bf-e4210901014f",
	'');
INSERT INTO S_SPARM
	VALUES ("a016b78d-0cf3-4086-9e66-33e87f837aea",
	"ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	'b2_rule_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"652961fe-f477-489e-8892-193d44bcd414",
	'');
INSERT INTO S_SPARM
	VALUES ("946b9e97-06a0-4085-b49d-bc5a7079d97e",
	"ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	'c1_element_label_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a016b78d-0cf3-4086-9e66-33e87f837aea",
	'');
INSERT INTO S_SPARM
	VALUES ("ec6717a5-a0a0-4f4b-9273-586905e3d0af",
	"ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	'c2_upper_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"946b9e97-06a0-4085-b49d-bc5a7079d97e",
	'');
INSERT INTO S_SPARM
	VALUES ("fe320d68-1bd3-4b6f-a80a-98bb65b30fd3",
	"ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	'c3_current_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ec6717a5-a0a0-4f4b-9273-586905e3d0af",
	'');
INSERT INTO PE_PE
	VALUES ("ee6bf986-18b0-4624-bb2c-366c4c9af72d",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("17b771d5-e8c7-44c1-9d8a-5a6bdaecaf39",
	"00000000-0000-0000-0000-000000000000",
	'Send_statement_start',
	'ParserValidateFunction: TRUE',
	'return ::statement_create();',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c9d99192-000b-4314-a7d5-87c1f411168f",
	"17b771d5-e8c7-44c1-9d8a-5a6bdaecaf39",
	'a1_rule_id_name',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("17b771d5-e8c7-44c1-9d8a-5a6bdaecaf39",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("75571ae2-8095-463a-b071-041926e41bb3",
	"00000000-0000-0000-0000-000000000000",
	'Message_invocation_validate',
	'ParserValidateFunction: TRUE',
	'//::Message_invocation_validate()
if param.a6_current_rule != GD::NULL_UNIQUE_ID()
  select any val from instances of V_VAL where
                                     selected.Value_ID == param.a6_current_rule;
  if not_empty val
    select one sdt related by val->S_DT[R820];
    if ( empty sdt )
      ERR::reportParseError( msg: "Value has unknown data type",
                                                   token: param.a1_rule_token );
    else
      select one msg related by val->V_MSV[R801]->SPR_PEP[R841]->C_EP[R4501]; 
      if(empty msg)
        // if the executable property was not found
        // search for a required executable property
        select one msg related by val->V_MSV[R801]->SPR_REP[R845]->C_EP[R4500];
      end if;
      msgName = "";
      message_ok = true;
      if not_empty msg
        select one sig related by msg->C_AS[R4004];
        if not_empty sig
          if param.a2_isRVal
            message_ok = false;
            ERR::reportParseError( msg: "Signal ->" + sig.Name +
             "<- cannot be used in an expression", token: param.a1_rule_token );
          else
            msgName = sig.Name;
          end if;
        else
          select one io related by msg->C_IO[R4004];
          msgName = io.Name;
        end if;
      else
        message_ok = false;
      end if;
      if message_ok
        return ::is_valid_invocation( a1_type: sdt.Name,
                                a2_isRval: param.a2_isRVal,
                                a3_id: param.a6_current_rule,
                                a4_name: "Interface Operation ->"  + msgName,
                                           a5_rule_token: param.a1_rule_token );
      end if;
    end if;
  end if;
end if;

return GD::NULL_UNIQUE_ID();',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("93d11eda-4a5b-4951-9f69-fcf86b3b2e58",
	"75571ae2-8095-463a-b071-041926e41bb3",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e10cf9a8-1e98-4722-ae3e-720e53a31306",
	"75571ae2-8095-463a-b071-041926e41bb3",
	'a2_isRVal',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"93d11eda-4a5b-4951-9f69-fcf86b3b2e58",
	'');
INSERT INTO S_SPARM
	VALUES ("be6b7e18-a070-4b8d-8abc-c2c3424c6d9b",
	"75571ae2-8095-463a-b071-041926e41bb3",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e10cf9a8-1e98-4722-ae3e-720e53a31306",
	'');
INSERT INTO S_SPARM
	VALUES ("9e740211-db85-4c20-9cde-74cd68914488",
	"75571ae2-8095-463a-b071-041926e41bb3",
	'a4_rule_ref',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"be6b7e18-a070-4b8d-8abc-c2c3424c6d9b",
	'');
INSERT INTO S_SPARM
	VALUES ("405c853b-1d8a-4017-a39a-e9f26fbd7ad1",
	"75571ae2-8095-463a-b071-041926e41bb3",
	'a5_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9e740211-db85-4c20-9cde-74cd68914488",
	'');
INSERT INTO S_SPARM
	VALUES ("23fe8e4e-a28c-4534-8323-cc43f1977810",
	"75571ae2-8095-463a-b071-041926e41bb3",
	'a6_current_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"405c853b-1d8a-4017-a39a-e9f26fbd7ad1",
	'');
INSERT INTO PE_PE
	VALUES ("75571ae2-8095-463a-b071-041926e41bb3",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	"00000000-0000-0000-0000-000000000000",
	'Send_statement_end',
	'ParserValidateFunction: TRUE',
	'select any val from instances of V_VAL
                          where selected.Value_ID == param.a7_message_result_id;
if ( empty val )
  select any val from instances of V_VAL 
                      where selected.Value_ID == param.a8_message_invocation_id;
end if;
if ( empty val )
  // there was a problem with parsing the value
  select any stmt from instances of ACT_SMT 
        where selected.Statement_ID == param.a3_start_rule;
  stmt.dispose();
  return GD::NULL_UNIQUE_ID();
end if;
if (  param.a5_member_access_id != GD::NULL_UNIQUE_ID() )
  return ::Assignment_expr_end( a1_rule_token: param.a1_rule_token, 
      a2_upper_rule_id: param.a3_start_rule,
      a3_rule_begin_id: param.a3_start_rule,
      a4_rule_id: param.a4_current_rule,
      b1_member_id: param.a5_member_access_id,
      b2_expr2_id: param.a7_message_result_id,
      b3_param_data_access3_id: GD::NULL_UNIQUE_ID(),
      b4_expr4_id: GD::NULL_UNIQUE_ID()
  );
elif (  param.a6_parameter_access_id != GD::NULL_UNIQUE_ID() )
  // this creates a statement with an AssignToParameter subtype
  return ::Assignment_expr_end( a1_rule_token: param.a1_rule_token, 
        a2_upper_rule_id: param.a3_start_rule,
        a3_rule_begin_id: param.a3_start_rule,
        a4_rule_id: param.a4_current_rule,
        b1_member_id: GD::NULL_UNIQUE_ID(),
        b2_expr2_id: GD::NULL_UNIQUE_ID(),
        b3_param_data_access3_id: param.a6_parameter_access_id,
        b4_expr4_id: param.a7_message_result_id
  );
else
  select any stmt from instances of ACT_SMT 
where selected.Statement_ID == param.a3_start_rule;
  select one msv related by val->V_MSV[R801];
  select many parm_set related by msv->V_PAR[R842];
  select one reqOp related by msv->SPR_REP[R845]->SPR_RO[R4502];
  select one proOp related by msv->SPR_PEP[R841]->SPR_PO[R4503]; 
  select one reqSig related by msv->SPR_REP[R845]->SPR_RS[R4502];
  select one proSig related by msv->SPR_PEP[R841]->SPR_PS[R4503];
  if not_empty reqOp
    select one exProp related by reqOp->SPR_REP[R4502];
    create object instance aop of ACT_IOP;
    relate stmt to aop across R603;
    unrelate exProp from msv across R845;
    relate reqOp to aop across R657;
	// store the textual position of the op name
	aop.opNameLineNumber = val.LineNumber;
	aop.opNameColumn = val.StartPosition;
	// store the textual position of the owner name (i.e. the port or interface
	// name). Use the value that is in the message-value instance that was
	// created when the messages named was first parsed, rather than the value
	// in the current block, since the latter may have been overwritten
	// during the parsing of the messages parameters 
	aop.ownerNameLineNumber = msv.ownerNameLineNumber;
	aop.ownerNameColumn = msv.ownerNameColumn;
    for each parm in parm_set
      unrelate parm from msv across R842;
      relate parm to aop across R679;
    end for;
    // Migrate the target component reference
    select one targetCompRef related by msv->V_VAL[R851];
    unrelate msv from targetCompRef across R851;
    relate aop to targetCompRef across R629;
  elif(not_empty proOp)
    select one exProp related by proOp->SPR_PEP[R4503];
    create object instance aop of ACT_IOP;
    relate stmt to aop across R603;
    unrelate exProp from msv across R841;
    relate proOp to aop across R680;
	// store the textual position of the op name
	aop.opNameLineNumber = val.LineNumber;
	aop.opNameColumn = val.StartPosition;
	// store the textual position of the owner name (i.e. the port or interface
	// name). Use the value that is in the message-value instance that was
	// created when the messages named was first parsed, rather than the value
	// in the current block, since the latter may have been overwritten
	// during the parsing of the messages parameters 
	aop.ownerNameLineNumber = msv.ownerNameLineNumber;
	aop.ownerNameColumn = msv.ownerNameColumn;
    for each parm in parm_set
      unrelate parm from msv across R842;
      relate parm to aop across R679;
    end for;
    // Migrate the target component reference
    select one targetCompRef related by msv->V_VAL[R851];
    unrelate msv from targetCompRef across R851;
    relate aop to targetCompRef across R629;
  elif(not_empty reqSig)
    select one exProp related by reqSig->SPR_REP[R4502];
    create object instance asig of ACT_SGN;
    relate stmt to asig across R603;
    unrelate exProp from msv across R845;
    relate reqSig to asig across R660;
	// store the textual position of the signal name
	asig.sigNameLineNumber = val.LineNumber;
	asig.sigNameColumn = val.StartPosition;
	// See comment in block above
	asig.ownerNameLineNumber = msv.ownerNameLineNumber;
	asig.ownerNameColumn = msv.ownerNameColumn;
    for each parm in parm_set
      unrelate parm from msv across R842;
      relate parm to asig across R662;
    end for;
    // Migrate the target component reference
    select one targetCompRef related by msv->V_VAL[R851];
    unrelate msv from targetCompRef across R851;
    relate asig to targetCompRef across R630;
  elif(not_empty proSig)
    select one exProp related by proSig->SPR_PEP[R4503];
    create object instance asig of ACT_SGN;
    relate stmt to asig across R603;
    unrelate exProp from msv across R841;
    relate proSig to asig across R663;
	// store the textual position of the signal name
	asig.sigNameLineNumber = val.LineNumber;
	asig.sigNameColumn = val.StartPosition;
	// See comment in block above
	asig.ownerNameLineNumber = msv.ownerNameLineNumber;
	asig.ownerNameColumn = msv.ownerNameColumn;
    for each parm in parm_set
      unrelate parm from msv across R842;
      relate parm to asig across R662;
    end for;  
    // Migrate the target component reference
    select one targetCompRef related by msv->V_VAL[R851];
    unrelate msv from targetCompRef across R851;
    relate asig to targetCompRef across R630;
  end if;
  val.dispose();
  return stmt.Statement_ID;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6f882167-5bc5-458e-b725-369a3902c37a",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f57a38dc-6219-49b4-a624-7581645d645a",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a2_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6f882167-5bc5-458e-b725-369a3902c37a",
	'');
INSERT INTO S_SPARM
	VALUES ("d298b203-d72f-4aac-bb98-a1f33dcd2ae4",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a3_start_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f57a38dc-6219-49b4-a624-7581645d645a",
	'');
INSERT INTO S_SPARM
	VALUES ("e83030b7-fb28-43fa-a39f-109788f8e30c",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a4_current_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d298b203-d72f-4aac-bb98-a1f33dcd2ae4",
	'');
INSERT INTO S_SPARM
	VALUES ("14901052-7282-4ac3-8b1f-cb42a82b341b",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a5_member_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e83030b7-fb28-43fa-a39f-109788f8e30c",
	'');
INSERT INTO S_SPARM
	VALUES ("451d3948-5dd5-46f5-be06-1dc252a36748",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a6_parameter_access_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"14901052-7282-4ac3-8b1f-cb42a82b341b",
	'');
INSERT INTO S_SPARM
	VALUES ("baa898b1-eaaf-4adb-b540-355f6bc93d61",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a7_message_result_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"451d3948-5dd5-46f5-be06-1dc252a36748",
	'');
INSERT INTO S_SPARM
	VALUES ("b0681084-9f64-4c73-a940-53c2fd1194e2",
	"40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	'a8_message_invocation_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"baa898b1-eaaf-4adb-b540-355f6bc93d61",
	'');
INSERT INTO PE_PE
	VALUES ("40b56fd0-87e8-44e6-8612-f4ef4bb2fc3b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c03d650d-ed0c-48b4-90e6-39fed4ad2639",
	"00000000-0000-0000-0000-000000000000",
	'Message_invocation_start',
	'ParserValidateFunction: TRUE',
	'return param.a1_current_rule;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("af64ae59-17fc-4d5e-a4b1-71b4a984dbb5",
	"c03d650d-ed0c-48b4-90e6-39fed4ad2639",
	'a1_current_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d06c0689-844a-4a19-858e-8ff5bb73b0e7",
	"c03d650d-ed0c-48b4-90e6-39fed4ad2639",
	'a2_isRVal',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"af64ae59-17fc-4d5e-a4b1-71b4a984dbb5",
	'');
INSERT INTO PE_PE
	VALUES ("c03d650d-ed0c-48b4-90e6-39fed4ad2639",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("94022e6b-af01-4172-8d80-6525743ac55b",
	"00000000-0000-0000-0000-000000000000",
	'Interface_or_port_name_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
block.TempBuffer = param.a2_text;
// store the textual position of the name
block.currentKeyLettersLineNumber =
                               ::getLineNumber(rule_token: param.a1_rule_token);
block.currentKeyLettersColumn = ::getColumn(rule_token: param.a1_rule_token);
return param.a5_current_rule;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("24a826bd-68ef-49d8-b7fd-6ab207960102",
	"94022e6b-af01-4172-8d80-6525743ac55b",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3c78c3ec-cda4-4158-ad0b-5f6d4ad48e47",
	"94022e6b-af01-4172-8d80-6525743ac55b",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"24a826bd-68ef-49d8-b7fd-6ab207960102",
	'');
INSERT INTO S_SPARM
	VALUES ("6aca8540-61d7-473b-b0ce-e9d1343c0fb9",
	"94022e6b-af01-4172-8d80-6525743ac55b",
	'a3_this_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3c78c3ec-cda4-4158-ad0b-5f6d4ad48e47",
	'');
INSERT INTO S_SPARM
	VALUES ("3978bb3f-2033-4a37-99eb-a4c6b34e0e2d",
	"94022e6b-af01-4172-8d80-6525743ac55b",
	'a4_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6aca8540-61d7-473b-b0ce-e9d1343c0fb9",
	'');
INSERT INTO S_SPARM
	VALUES ("f76e3b61-2202-495b-815f-8aa3162c2332",
	"94022e6b-af01-4172-8d80-6525743ac55b",
	'a5_current_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3978bb3f-2033-4a37-99eb-a4c6b34e0e2d",
	'');
INSERT INTO PE_PE
	VALUES ("94022e6b-af01-4172-8d80-6525743ac55b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f79edc7d-3256-4e49-bfc0-c64381924d6b",
	"00000000-0000-0000-0000-000000000000",
	'Message_name_validate',
	'ParserValidateFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
ownerName = block.TempBuffer;
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one component related by body->ACT_BIE[R640]->PE_PE[R640]->C_C[R8001];
  select one package related by body->ACT_BIE[R640]->PE_PE[R640]->EP_PKG[R8001];
  if not_empty package
    compId = package.getContainingComponentId();
    select any component from instances of C_C where selected.Id == compId;
  end if;
  if empty component
    ERR::reportParseError( 
         msg: "Signalling syntax is valid only in the context of a component",
                                                   token: param.a1_rule_token ); 
  else
    select any ifRef from instances of C_IR;
    ifRef_found = false;
    portFound = false;
    select many ports related by component->C_PO[R4010];
    for each port in ports
      if port.Name == ownerName
        if not portFound
          portFound = true;
        else
          ERR::reportParseError( 
                      msg: "Found port with duplicate name ->" +
                                 ownerName + "<-", token: param.a1_rule_token ); 
        end if;
        select many ifRefs related by port->C_IR[R4016];
        if cardinality ifRefs > 1
          for each candidateIfRef in ifRefs
            select many messages related by candidateIfRef->
                                                        C_I[R4012]->C_EP[R4003];
            for each message in messages
              select one signal related by message->C_AS[R4004] where
                                                 selected.Name == param.a2_text;
              if not_empty signal
                if ifRef_found
                  ERR::reportParseError( 
                      msg: "Found signal with duplicate name ->" + ownerName +
                                         "::%s<-", token: param.a1_rule_token ); 
                else
                  ifRef = candidateIfRef;
                  ifRef_found = true;
                end if;
              else
                select one op related by message->C_IO[R4004] where
                                                 selected.Name == param.a2_text;
                if not_empty op
                  if ifRef_found
                    ERR::reportParseError( 
                     msg: "Found interface operation with duplicate name ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
                  else
                    ifRef = candidateIfRef;
                    ifRef_found = true;
                  end if;
                else
                  ERR::reportParseError( 
                     msg: "Internal error: subtype not found for message ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
                end if;
              end if;
            end for;
          end for;
        else // ifRef cardinality 0 (internal error) or 1
          if not ifRef_found
            select any ifRef related by port->C_IR[R4016];
            if not_empty ifRef
              select many ios related by ifRef->C_I[R4012]->C_EP[R4003]->
                               C_IO[R4004] where selected.Name == param.a2_text;
              select many sigs related by ifRef->C_I[R4012]->C_EP[R4003]->
                               C_AS[R4004] where selected.Name == param.a2_text;
              if (cardinality ios + cardinality sigs) > 1
                ERR::reportParseError( 
                     msg: "Ambiguous message reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
              end if;
              ifRef_found = true;
            else
              ERR::reportParseError( 
               msg: "Internal error: interface reference not found on Port " +
                                   port.Name + " for message ->" + ownerName +
                                         "::%s<-", token: param.a1_rule_token ); 
            end if;
          else
            ERR::reportParseError( 
                     msg: "Ambiguous port or interface reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
          end if;
        end if;
      else // port name does not match the owner name . . .
        //    see if the interface name matches
        select many ifRefs related by port->C_IR[R4016];
        for each candidateIfRef in ifRefs
          select one interface related by candidateIfRef->C_I[R4012];
          if not_empty interface
            if interface.Name == ownerName
              if not ifRef_found
                select many ios related by candidateIfRef->C_I[R4012]->C_EP[R4003]->
                               C_IO[R4004] where selected.Name == param.a2_text;
                select many sigs related by candidateIfRef->C_I[R4012]->C_EP[R4003]->
                               C_AS[R4004] where selected.Name == param.a2_text;
                if (cardinality ios + cardinality sigs) > 1
                  ERR::reportParseError( 
                     msg: "Ambiguous message reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token );
                else
                  allowIFName = PREF::getBoolean( name:"bridgepoint_prefs_allow_interface_name_in_ic_message" );
                  if ( allowIFName == true )
                    ifRef = candidateIfRef;
                    ifRef_found = true;
                  else
                    ERR::reportParseError( 
                       msg: "Interface names are not allowed for sending messages.  Use the port name.",
                       token: param.a1_rule_token );
                  end if;
                end if;
              else
                ERR::reportParseError( 
                     msg: "Ambiguous interface or port reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token );
              end if;
            end if;
          end if;
        end for;
      end if;
    end for;
    if ifRef_found
      select any iop related by ifRef->C_I[R4012]->C_EP[R4003]->C_IO[R4004] where
                                                 selected.Name == param.a2_text;
      if not_empty iop
        direction = iop.Direction;
        directionResult = ::is_message_direction_valid(direction:direction,
                                                         interface_id:ifRef.Id);
        if(directionResult)
          return ::is_valid_message(a1_ifRef: ifRef.Id, a2_msgName: param.a2_text,
                                           a3_rule_token: param.a1_rule_token );
        else
          if(direction == IFDirectionType::ServerClient)
            ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Server to " 
                                     + "Client, yet the invocation is from the "
                                 + "client.", token: param.a1_rule_token );
          else
            ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Client to " 
                                      + "Server, yet the invocation is from the"
                                 + " server.", token: param.a1_rule_token );
          end if;
        end if;
      else
        select any sig related by ifRef->C_I[R4012]->C_EP[R4003]->
                               C_AS[R4004] where selected.Name == param.a2_text;
        if not_empty sig
          direction = sig.Direction;
          directionResult = ::is_message_direction_valid(direction:direction,
                                                         interface_id:ifRef.Id);
          if(directionResult)
            return ::is_valid_message(a1_ifRef:ifRef.Id, a2_msgName: param.a2_text, 
                                            a3_rule_token: param.a1_rule_token);
          else
            if(direction == IFDirectionType::ServerClient)
              ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Server to " 
                                      + "Client, yet the invocation is from the"
                                 + " client.", token: param.a1_rule_token );
            else
              ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Client to " 
                                      + "Server, yet the invocation is from the"
                                 + " server.", token: param.a1_rule_token );
            end if;
          end if;
        else
          ERR::reportParseError( 
            msg: "Cannot find message with name ->" + ownerName + "::%s<-",
                                                   token: param.a1_rule_token ); 
        end if;
      end if; // not_empty iop
    else
      ERR::reportParseError( 
          msg: "Internal error, cannot find interface or port with name ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
    end if;  // not_empty interface
  end if;
  return GD::NULL_UNIQUE_ID();
else
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];
  if empty component
    ERR::reportParseError( 
         msg: "Signalling syntax is valid only in the context of a component",
                                                   token: param.a1_rule_token ); 
  else
    select any ifRef from instances of C_IR;
    ifRef_found = false;
    portFound = false;
    select many ports related by component->C_PO[R4010];
    for each port in ports
      if port.Name == ownerName
        if not portFound
          portFound = true;
        else
          ERR::reportParseError( 
                      msg: "Found port with duplicate name ->" +
                                 ownerName + "<-", token: param.a1_rule_token ); 
        end if;
        select many ifRefs related by port->C_IR[R4016];
        if cardinality ifRefs > 1
          for each candidateIfRef in ifRefs
            select many messages related by candidateIfRef->
                                                        C_I[R4012]->C_EP[R4003];
            for each message in messages
              select one signal related by message->C_AS[R4004] where
                                                 selected.Name == param.a2_text;
              if not_empty signal
                if ifRef_found
                  ERR::reportParseError( 
                      msg: "Found signal with duplicate name ->" + ownerName +
                                         "::%s<-", token: param.a1_rule_token ); 
                else
                  ifRef = candidateIfRef;
                  ifRef_found = true;
                end if;
              else
                select one op related by message->C_IO[R4004] where
                                                 selected.Name == param.a2_text;
                if not_empty op
                  if ifRef_found
                    ERR::reportParseError( 
                     msg: "Found interface operation with duplicate name ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
                  else
                    ifRef = candidateIfRef;
                    ifRef_found = true;
                  end if;
                else
                  ERR::reportParseError( 
                     msg: "Internal error: subtype not found for message ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
                end if;
              end if;
            end for;
          end for;
        else // ifRef cardinality 0 (internal error) or 1
          if not ifRef_found
            select any ifRef related by port->C_IR[R4016];
            if not_empty ifRef
              select many ios related by ifRef->C_I[R4012]->C_EP[R4003]->
                               C_IO[R4004] where selected.Name == param.a2_text;
              select many sigs related by ifRef->C_I[R4012]->C_EP[R4003]->
                               C_AS[R4004] where selected.Name == param.a2_text;
              if (cardinality ios + cardinality sigs) > 1
                ERR::reportParseError( 
                     msg: "Ambiguous message reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
              end if;
              ifRef_found = true;
            else
              ERR::reportParseError( 
               msg: "Internal error: interface reference not found on Port " +
                                   port.Name + " for message ->" + ownerName +
                                         "::%s<-", token: param.a1_rule_token ); 
            end if;
          else
            ERR::reportParseError( 
                     msg: "Ambiguous port or interface reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
          end if;
        end if;
      else // port name does not match the owner name . . .
        //    see if the interface name matches
        select many ifRefs related by port->C_IR[R4016];
        for each candidateIfRef in ifRefs
          select one interface related by candidateIfRef->C_I[R4012];
          if not_empty interface
            if interface.Name == ownerName
              if not ifRef_found
                select many ios related by candidateIfRef->C_I[R4012]->C_EP[R4003]->
                               C_IO[R4004] where selected.Name == param.a2_text;
                select many sigs related by candidateIfRef->C_I[R4012]->C_EP[R4003]->
                               C_AS[R4004] where selected.Name == param.a2_text;
                if (cardinality ios + cardinality sigs) > 1
                  ERR::reportParseError( 
                     msg: "Ambiguous message reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token );
                else
                  ifRef = candidateIfRef;
                  ifRef_found = true;
                end if;
              else
                ERR::reportParseError( 
                     msg: "Ambiguous interface or port reference found ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token );
              end if;
            end if;
          end if;
        end for;
      end if;
    end for;
    if ifRef_found
      select any iop related by ifRef->C_I[R4012]->C_EP[R4003]->C_IO[R4004] where
                                                 selected.Name == param.a2_text;
      if not_empty iop
        direction = iop.Direction;
        directionResult = ::is_message_direction_valid(direction:direction,
                                                         interface_id:ifRef.Id);
        if(directionResult)
          return ::is_valid_message(a1_ifRef: ifRef.Id, a2_msgName: param.a2_text,
                                           a3_rule_token: param.a1_rule_token );
        else
          if(direction == IFDirectionType::ServerClient)
            ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Server to " 
                                     + "Client, yet the invocation is from the "
                                 + "client.", token: param.a1_rule_token );
          else
            ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Client to " 
                                      + "Server, yet the invocation is from the"
                                 + " server.", token: param.a1_rule_token );
          end if;
        end if;
      else
        select any sig related by ifRef->C_I[R4012]->C_EP[R4003]->
                               C_AS[R4004] where selected.Name == param.a2_text;
        if not_empty sig
          direction = sig.Direction;
          directionResult = ::is_message_direction_valid(direction:direction,
                                                         interface_id:ifRef.Id);
          if(directionResult)
            return ::is_valid_message(a1_ifRef:ifRef.Id, a2_msgName: param.a2_text, 
                                            a3_rule_token: param.a1_rule_token);
          else
            if(direction == IFDirectionType::ServerClient)
              ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Server to " 
                                      + "Client, yet the invocation is from the"
                                 + " client.", token: param.a1_rule_token );
            else
              ERR::reportParseError( 
                        msg: "The message ->" + ownerName +
                                         "::%s<- is specified as Client to " 
                                      + "Server, yet the invocation is from the"
                                 + " server.", token: param.a1_rule_token );
            end if;
          end if;
        else
          ERR::reportParseError( 
            msg: "Cannot find message with name ->" + ownerName + "::%s<-",
                                                   token: param.a1_rule_token ); 
        end if;
      end if; // not_empty iop
    else
      ERR::reportParseError( 
          msg: "Internal error, cannot find interface or port with name ->" +
                             ownerName + "::%s<-", token: param.a1_rule_token ); 
    end if;  // not_empty interface
  end if;
  return GD::NULL_UNIQUE_ID();
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("84cf0523-c34d-47a2-b080-d235b4572ab6",
	"f79edc7d-3256-4e49-bfc0-c64381924d6b",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b891f2f8-59f7-4449-aefc-8d06d2ab68e0",
	"f79edc7d-3256-4e49-bfc0-c64381924d6b",
	'a2_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"84cf0523-c34d-47a2-b080-d235b4572ab6",
	'');
INSERT INTO S_SPARM
	VALUES ("8bfe90e9-4549-4487-907f-9306d62faecb",
	"f79edc7d-3256-4e49-bfc0-c64381924d6b",
	'a3_this_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b891f2f8-59f7-4449-aefc-8d06d2ab68e0",
	'');
INSERT INTO S_SPARM
	VALUES ("aba6ea3e-a967-4e17-85e4-e7c6e86eaed0",
	"f79edc7d-3256-4e49-bfc0-c64381924d6b",
	'a4_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8bfe90e9-4549-4487-907f-9306d62faecb",
	'');
INSERT INTO S_SPARM
	VALUES ("6c4d85b2-ec2e-4f7f-9f1d-4d2ecc67562c",
	"f79edc7d-3256-4e49-bfc0-c64381924d6b",
	'a5_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"aba6ea3e-a967-4e17-85e4-e7c6e86eaed0",
	'');
INSERT INTO PE_PE
	VALUES ("f79edc7d-3256-4e49-bfc0-c64381924d6b",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2577b597-d667-4a4c-abdd-b894c6041046",
	"00000000-0000-0000-0000-000000000000",
	'Message_invocation_end',
	'ParserValidateFunction: TRUE',
	'// ::Message_invocation_validate()
// validate the parameters
select any msv from instances of V_MSV 
                                    where selected.Value_ID == param.a6_message;
select one msg_val related by msv->V_VAL[R801];
if not msv.ParmListOK
  // error already output, still need to clean up
  msg_val.dispose();
  return GD::NULL_UNIQUE_ID();
end if;
select one exProp related by msv->SPR_PEP[R841]->C_EP[R4501]; 
if(empty exProp)
  // if the executable property was not found
  // search for a required executable property
  select one exProp related by msv->SPR_REP[R845]->C_EP[R4500];
end if;
msgName = "";
select one sig related by exProp->C_AS[R4004];
if not_empty sig
  msgName = sig.Name;
else
  select one op related by exProp->C_IO[R4004];
  if not_empty op
    msgName = op.Name;
  else
    // TODO: Internal Error no associated message
    // should have been trapped before this
  end if;
end if;
select many vparm_set related by msv->V_PAR[R842];
select many pparm_set related by exProp->C_PP[R4006];
if ( cardinality vparm_set < cardinality pparm_set )
  // arguments are missing
  msg_val.dispose();
  ERR::reportParseError( msg: "Message ->" + msgName +
        "<- is missing corresponding parameter(s)",token: param.a1_rule_token );
else
  for each pparm in pparm_set
    found = false;
    for each vparm in vparm_set
      if ( pparm.Name == vparm.Name )
        found = true;
        err_msg = "";
        select one parm_val related by vparm->V_VAL[R800];
        select one vdt related by parm_val->S_DT[R820];
        if ( empty vdt or ::data_types_compatible( dt1: pparm.DT_ID,
                                         dt2: vdt.DT_ID, op: "assign")  ==
                                                          GD::NULL_UNIQUE_ID() )
          err_msg = "Parameter ->" + pparm.Name +
                              "<- has been assigned value of different type";
        end if;
        if (pparm.getDimensionsCnt()!= parm_val.getDimensions())
          err_msg = "Parameter ->"+ pparm.Name + "<- has incompatible array depth.";
        elif ( not parm_val.isElementCountValid() )
          err_msg = "Parameter ->"+ pparm.Name + "<- contains an Array Index Out of Bounds.";
        end if;      
        if (err_msg == "")
          break;
        else 
          msg_val.dispose();        
          ERR::reportParseError( msg: err_msg, token: param.a1_rule_token );
        end if;
      end if;
    end for;
    if not found
      msg_val.dispose();
      ERR::reportParseError( msg: "Bridge ->" + msgName +
                                  "<- is missing corresponding parameter(s)",
                                                   token: param.a1_rule_token );
    end if;
  end for;
  // If execution gets here, all the data items from the database
  // were found in the parse data items . . . .
  if ( cardinality vparm_set > cardinality pparm_set )
    // If there are more data items in the parse then were found in the
    // database, that means there were redundant or extra data items in the
    // parameter list found by the parse.  Generate an error.
    for each vparm in vparm_set
      found = false;
      for each pparm in pparm_set
        if pparm.Name == vparm.Name
          found = true;
          break;
        end if;
      end for;
      if not found
        msg_val.dispose();
        ERR::reportParseError( msg: "Parameter ->" + pparm.Name +
                      "<- is not associated with message ->"+ msgName +"<-",
                                                   token: param.a1_rule_token );
      end if;
    end for;
    // If it gets out of the loop without error, there must be
    // a redundant data item, so report the error
    msg_val.dispose();
    ERR::reportParseError( msg: "Message ->" + msgName +
                    "<- has redundant parameters", token: param.a1_rule_token );
  end if;
end if;
// Now check the optional local variable reference
if param.a8_variable != GD::NULL_UNIQUE_ID()
  errorInToClause = false;
  select any val from instances of V_VAL where
                                         selected.Value_ID == param.a8_variable;
  select one dt related by val->S_DT[R820];
  if empty dt or dt.Name != "component_ref"
    ERR::reportParseError(msg:"->to<- variable must be of type component_ref",
                                                   token: param.a1_rule_token );
    errorInToClause = true;
  end if;
  if val.getDimensions() != 0
    ERR::reportParseError(msg:"->to<- variable cannot be an array",
                                                   token: param.a1_rule_token );
    errorInToClause = true;
  end if;
  if val.Text == "sender" or val.Text == "Sender" or val.Text == "SENDER"
    errMsg = ::is_valid_implicit_component_addressing();
    if errMsg != ""
      ERR::reportParseError( msg: errMsg, token: param.a1_rule_token );
      errorInToClause = true;
    end if;
  end if;
  if not errorInToClause
    relate msv to val across R851;
  end if;
end if;

return param.a6_message;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ff987374-2fb8-4d0f-bb5a-69dd1eb344a0",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a1_rule_token',
	"79308373-d912-4604-b1f4-c457977e3bd2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("55d5c0fc-91bf-4992-a9c6-6a4ef10d8e8e",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a2_upper_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ff987374-2fb8-4d0f-bb5a-69dd1eb344a0",
	'');
INSERT INTO S_SPARM
	VALUES ("83f0ab24-6918-4170-9c26-be954e8adc3e",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a3_start_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"55d5c0fc-91bf-4992-a9c6-6a4ef10d8e8e",
	'');
INSERT INTO S_SPARM
	VALUES ("9ef83b2b-0b84-4ff8-bc7a-b4a8225d0dcb",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a4_current_rule',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"83f0ab24-6918-4170-9c26-be954e8adc3e",
	'');
INSERT INTO S_SPARM
	VALUES ("f4bac6a6-3d73-4b65-a6f7-9c521ed08584",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a5_interface',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9ef83b2b-0b84-4ff8-bc7a-b4a8225d0dcb",
	'');
INSERT INTO S_SPARM
	VALUES ("a1ede823-7b14-46a3-b366-c4acab81f494",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a6_message',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f4bac6a6-3d73-4b65-a6f7-9c521ed08584",
	'');
INSERT INTO S_SPARM
	VALUES ("2e508bfb-07fb-40f6-a0e7-bb66803cc1cc",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a7_parameters',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a1ede823-7b14-46a3-b366-c4acab81f494",
	'');
INSERT INTO S_SPARM
	VALUES ("9f2a1166-0581-447d-97db-59e941993b87",
	"2577b597-d667-4a4c-abdd-b894c6041046",
	'a8_variable',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2e508bfb-07fb-40f6-a0e7-bb66803cc1cc",
	'');
INSERT INTO PE_PE
	VALUES ("2577b597-d667-4a4c-abdd-b894c6041046",
	1,
	"1fa794fb-723d-4a99-91a8-38a179e18be1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("1fa794fb-723d-4a99-91a8-38a179e18be1",
	1,
	"384b28cc-c6ad-40df-8458-61079e0f04f0",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("384b28cc-c6ad-40df-8458-61079e0f04f0",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Functions',
	'',
	0,
	'../Functions.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'ooaofooa',
	1,
	'../../../ooaofooa.xtuml');
