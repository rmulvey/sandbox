-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	'Statement',
	602,
	'ACT_SMT',
	'This class represents an action language statement within a block.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("981bab64-73f4-411b-9bb1-6e99fc74e8a7",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one ai related by self->ACT_AI[R603];
if ( not_empty ai )
  unrelate self from ai across R603;
  ai.dispose();
end if;

select one cr related by self->ACT_CR[R603];
if ( not_empty cr )
  unrelate self from cr across R603;
  cr.dispose();
end if;

select one cnv related by self->ACT_CNV[R603];
if ( not_empty cnv )
  unrelate self from cnv across R603;
  cnv.dispose();
end if;

select one whl related by self->ACT_WHL[R603];
if ( not_empty whl )
  unrelate self from whl across R603;
  whl.dispose();
end if;

select one ctl related by self->ACT_CTL[R603];
if ( not_empty ctl )
  unrelate self from ctl across R603;
  ctl.dispose();
end if;

select one ret related by self->ACT_RET[R603];
if ( not_empty ret )
  unrelate self from ret across R603;
  ret.dispose();
end if;

select one del related by self->ACT_DEL[R603];
if ( not_empty del )
  unrelate self from del across R603;
  del.dispose();
end if;

select one rel related by self->ACT_REL[R603];
if ( not_empty rel )
  unrelate self from rel across R603;
  rel.dispose();
end if;

select one relu related by self->ACT_RU[R603];
if ( not_empty relu )
  unrelate self from relu across R603;
  relu.dispose();
end if;

select one unrel related by self->ACT_UNR[R603];
if ( not_empty unrel )
  unrelate self from unrel across R603;
  unrel.dispose();
end if;

select one unrelu related by self->ACT_URU[R603];
if ( not_empty unrelu )
  unrelate self from unrelu across R603;
  unrelu.dispose();
end if;

select one fio related by self->ACT_FIO[R603];
if ( not_empty fio )
  unrelate self from fio across R603;
  fio.dispose();
end if;

select one fiw related by self->ACT_FIW[R603];
if ( not_empty fiw )
  unrelate self from fiw across R603;
  fiw.dispose();
end if;

select one sel related by self->ACT_SEL[R603];
if ( not_empty sel )
  unrelate self from sel across R603;
  sel.dispose();
end if;

select one brk related by self->ACT_BRK[R603];
if ( not_empty brk )
  unrelate self from brk across R603;
  brk.dispose();
end if;

select one con related by self->ACT_CON[R603];
if ( not_empty con )
  unrelate self from con across R603;
  con.dispose();
end if;

select one fstmt related by self->ACT_FOR[R603];
if ( not_empty fstmt )
  unrelate self from fstmt across R603;
  fstmt.dispose();
end if;

select one ifStmt related by self->ACT_IF[R603];
if ( not_empty ifStmt )
  unrelate self from ifStmt across R603;
  ifStmt.dispose();
end if;

select one elifStmt related by self->ACT_EL[R603];
if ( not_empty elifStmt )
  unrelate self from elifStmt across R603;
  elifStmt.dispose();
end if;

select one elseStmt related by self->ACT_E[R603];
if ( not_empty elseStmt )
  unrelate self from elseStmt across R603;
  elseStmt.dispose();
end if;

select one func related by self->ACT_FNC[R603];
if ( not_empty func )
  unrelate self from func across R603;
  func.dispose();
end if;

select one brg related by self->ACT_BRG[R603];
if ( not_empty brg )
  unrelate self from brg across R603;
  brg.dispose();
end if;

select one tfm related by self->ACT_TFM[R603];
if ( not_empty tfm )
  unrelate self from tfm across R603;
  tfm.dispose();
end if;

select one ess related by self->E_ESS[R603];
if ( not_empty ess )
  unrelate self from ess across R603;
  ess.dispose();
end if;

select one gpr related by self->E_GPR[R603];
if ( not_empty gpr )
  unrelate self from gpr across R603;
  gpr.dispose();
end if;

select one opInv related by self->ACT_IOP[R603];
if not_empty opInv
  unrelate self from opInv across R603;
  opInv.dispose();
end if;

select one sigInv related by self->ACT_SGN[R603];
if not_empty sigInv
  unrelate self from sigInv across R603;
  sigInv.dispose();
end if;

select one block related by self->ACT_BLK[R602];
if ( not_empty block )
  unrelate self from block across R602;
end if;

select many block_in_stackframes related by self->I_BSF[R2941];
for each block_in_stackframe in block_in_stackframes
  unrelate self from block_in_stackframe across R2941;
end for;

select one OAL_breakpoint related by self->BP_OAL[R3101];
if(not_empty OAL_breakpoint)
  unrelate self from OAL_breakpoint across R3101; 
  select one breakpoint related by OAL_breakpoint->BP_BP[R3102]; 
  breakpoint.dispose(); 
end if;  

// Pull self out of the instance order
select one successor related by self->ACT_SMT[R661.''precedes''];
select one predecessor related by self->ACT_SMT[R661.''succeeds''];
if (not_empty successor)
  unrelate self from successor across R661.''precedes'';
end if;
if (not_empty predecessor)
  unrelate self from predecessor across R661.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate predecessor to successor across R661.''precedes'';
end if;

delete object instance self;
',
	1,
	'',
	"cbbd0099-735a-47c3-89c6-61a2e2068302");
INSERT INTO O_TFR
	VALUES ("762286bb-6bdf-4a3d-8438-c5c40e238eff",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'execute',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Statement.execute()
// First check for a valid stack frame id and grab the stack frame
select one body related by self->ACT_BLK[R602]->ACT_ACT[R601];
select any stack_frame from instances of I_STF where 
                              (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
  //Invalid stack frame ID!
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Statement.execute: " +
                              "Invalid stack frame id. Terminating execution.",path:pathMsg);
  select any stack from instances of I_STACK;
  stack.runState = RunStateType::Terminated;
else 
  select one whileStmt related by self->ACT_WHL[R603];
  select one ifStmt related by self->ACT_IF[R603];
  select one assgnAttrStmt related by self->ACT_AI[R603];
  select one createStmt related by self->ACT_CR[R603];
  select one createNoVariableStmt related by self->ACT_CNV[R603];
  select one deleteStmt related by self->ACT_DEL[R603];
  select one selFIO related by self->ACT_FIO[R603];
  select one selectFromInstancesWhere related by self->ACT_FIW[R603];
  select one forStmt related by self->ACT_FOR[R603];
  select one evtSpecifier related by self->E_ESS[R603];
  select one relateStmt related by self->ACT_REL[R603];
  select one relateUsingStmt related by self->ACT_RU[R603];
  select one unrelateStmt related by self->ACT_UNR[R603];
  select one unrelateUsingStmt related by self->ACT_URU[R603];
  select one selectStmt related by self->ACT_SEL[R603];
  select one breakStmt related by self->ACT_BRK[R603];
  select one continueStmt related by self->ACT_CON[R603];
  select one functionInvocationStmt related by self->ACT_FNC[R603];
  select one operationInvocationStmt related by self->ACT_TFM[R603];
  select one bridgeInvocationStmt related by self->ACT_BRG[R603];
  select one returnStmt related by self->ACT_RET[R603];
  select one generatePreexistingEventStmt related by self->E_GPR[R603];
  select one ctrlStmt related by self->ACT_CTL[R603];
  select one iFaceOpStmt related by self->ACT_IOP[R603];
  select one signalStmt related by self->ACT_SGN[R603];
  select one stack related by stack_frame->I_STACK[R2943];
  if (not_empty whileStmt)
    whileStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty ifStmt)
    ifStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty assgnAttrStmt)
    assgnAttrStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty createStmt)
    createStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty createNoVariableStmt)
    createNoVariableStmt.execute();
  elif (not_empty deleteStmt)
    deleteStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty selFIO)
    selFIO.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty selectFromInstancesWhere)
    selectFromInstancesWhere.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty forStmt)
    forStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty evtSpecifier)
    evtSpecifier.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty relateStmt)
    relateStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty relateUsingStmt)
    relateUsingStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty unrelateStmt)
    unrelateStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty unrelateUsingStmt)
    unrelateUsingStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty selectStmt)
    selectStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty breakStmt)
    breakStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty continueStmt)
    continueStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty functionInvocationStmt)
    functionInvocationStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty operationInvocationStmt)
    operationInvocationStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty bridgeInvocationStmt)
    bridgeInvocationStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty returnStmt)
    returnStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty generatePreexistingEventStmt)
    generatePreexistingEventStmt.execute(stack_frame_id: param.stack_frame_id);
  elif (not_empty ctrlStmt)
    ctrlStmt.execute(stack_id: stack.Stack_ID);
  elif(not_empty iFaceOpStmt)
    iFaceOpStmt.execute(stack_frame_id: param.stack_frame_id);
  elif(not_empty signalStmt)
    signalStmt.execute(stack_frame_id: param.stack_frame_id);
  end if;
  // If a return statement placed a result onto a remote components queue,
  // we want to notify the remote component as the last thing we do here.
  // Get the stack now.
  select one resultStack related by stack_frame->I_STACK[R2967];
  // Note this policy is mirrored closely by the policy found at the end
  // of Stack.dequeue(). Any changes here should be reviewed for
  // inclusion there.
  select any bisf related by self->I_BSF[R2941] where
                          selected.Stack_Frame_ID == stack_frame.Stack_Frame_ID;
  select one stack related by stack_frame->I_STACK[R2929];
  //
  // If there are any intermediate values on the stack frame, then this
  // indicates that processing has been interrupted during a value
  // computation. We do not want to progress to the next statement in
  // this case.
  //
  select any intermediateValue related by stack_frame->I_VSF[R2951];
  //
  // If there is an instance associated with a selection reference, then a
  // where clause is being executed. We do not want to progress to the next
  // statement in that case either.
  //
  select one outer_block related by self->ACT_BLK[R602]->
                                                   ACT_ACT[R601]->ACT_BLK[R666];
  select any outer_bisf related by stack_frame->I_BSF[R2923]
                                where selected.Block_ID == outer_block.Block_ID;
  select any select_where_inst_ref related by outer_bisf->
                                       L_LCL[R3000]->L_LSR[R3001]->L_IWC[R3006];
  //
  // If a statement is blocked on an intercomponent call, we do not want to
  // progress to the next statement either.
  //
  select one blockingFrame related by stack_frame->I_STF[R2965.''blocked by''];
  
  if (empty intermediateValue and empty select_where_inst_ref and
                                 not_empty bisf and bisf.isExecuting and
                                        not_empty stack and empty blockingFrame)
    // There was no scope change, so we need to advance our program counter
    // association, R2941. If the scope had changed, the statement subtype
    // would have already set up a new instance of this association and
    // would have created whatever new stack frame and block in stack frame
    // instances were needed.
    //
    self.setupNextStatement(stack_frame_id:param.stack_frame_id);
  end if;
  // If a result is ready for a remote component, notify it now.
  if not_empty resultStack
    select one exe related by resultStack->I_EXE[R2930];
    stack_frame.readyForInterrupt = true;
    if not_empty exe
      exe.notify();
    end if;
  end if;
end if;',
	1,
	'',
	"981bab64-73f4-411b-9bb1-6e99fc74e8a7");
INSERT INTO O_TPARM
	VALUES ("f81e2a1d-6fdd-4b88-adff-7c36dacaf822",
	"762286bb-6bdf-4a3d-8438-c5c40e238eff",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("cbbd0099-735a-47c3-89c6-61a2e2068302",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'checkBreakpoint',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Statement.checkBreakpoint()
result = false;                                    
select one oal_breakpoint related by self->BP_OAL[R3101]->BP_BP[R3102];
if (not_empty oal_breakpoint and oal_breakpoint.enabled)
  result = oal_breakpoint.incrementAndTestHitCount();
  if (result)
    select any stack from instances of I_STACK where
                                            selected.Stack_ID == param.stack_id;
    stack.suspendReason = "Breakpoint at " + self.Label;
  end if;
else
  // The next two suspend conditions are checked here because otherwise the
  // suspension occurs too late . . .
  select one ctrlStmt related by self->ACT_CTL[R603];
  if (not_empty ctrlStmt)
    result = true;
    select any stack from instances of I_STACK where
                                            selected.Stack_ID == param.stack_id;
    stack.suspendReason = "Suspended. Control stop encountered at: " +
                                                                     self.Label;
  else
    select one evt related by self->E_ESS[R603]->E_GES[R701]->
                                                     E_GSME[R703]->SM_EVT[R707];
    if (not_empty evt and evt.checkBreakpoint(
                             processType:EventProcessType::Enqueued) == true)
      result = true;
      select any stack from instances of I_STACK where
                                            selected.Stack_ID == param.stack_id;
      stack.suspendReason = "Break on event enqueue: " + self.Label;
    end if;
  end if;
end if;
return result;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("ae0164e2-51ad-447f-81f2-d8264fa008af",
	"cbbd0099-735a-47c3-89c6-61a2e2068302",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e6164b15-faa5-43a4-a1e8-4dab63a650e4",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'stepIn',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Statement.stepIn

// If next statement is operation, bridge, or function invocation, step in.
select any first_op_statement related by self->ACT_TFM[R603]->O_TFR[R673]->ACT_OPB[R696]->ACT_ACT[R698]->ACT_BLK[R666]->ACT_SMT[R602]; 
select any first_funct_statement related by self->ACT_FNC[R603]->S_SYNC[R675]->ACT_FNB[R695]->ACT_ACT[R698]->ACT_BLK[R666]->ACT_SMT[R602];	
select any first_bridge_statement related by self->ACT_BRG[R603]->S_BRG[R674]->ACT_BRB[R697]->ACT_ACT[R698]->ACT_BLK[R666]->ACT_SMT[R602];
// TODO need to recursively descend all values and find 
// the invocation value that will be executed first
// must consider at the beginning of the descent:
// if, for, while boolean value
// select where boolean value
// assign to attribute value
// assign to transient value
// assign to parameter value
// return value
// must consider during the descent:
// actual parameter value
if (not_empty first_op_statement or not_empty first_funct_statement or not_empty first_bridge_statement)

  // Create breakpoint for stepping
  create object instance breakpoint of BP_BP;
  if (not_empty first_op_statement)
    set_breakpoint = breakpoint.createBreakpoint(breakpoint_type:Breakpoint_Type::OAL,Element_ID:first_op_statement.Statement_ID,hit_count:0,enabled:true,for_step:true); 
  elif(not_empty first_funct_statement)
    set_breakpoint = breakpoint.createBreakpoint(breakpoint_type:Breakpoint_Type::OAL,Element_ID:first_funct_statement.Statement_ID,hit_count:0,enabled:true,for_step:true); 
  elif(not_empty first_bridge_statement)
    set_breakpoint = breakpoint.createBreakpoint(breakpoint_type:Breakpoint_Type::OAL,Element_ID:first_bridge_statement.Statement_ID,hit_count:0,enabled:true,for_step:true); 
  end if;   
  return true;
end if;
// The statement cannot be stepped into, indicate this to the stack
return false;',
	1,
	'',
	"9af4e5f2-bf54-488f-bbcf-2452f947ac01");
INSERT INTO O_TFR
	VALUES ("9af4e5f2-bf54-488f-bbcf-2452f947ac01",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'setupNextStatement',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'//Body:Statement.setupNextStatement()
select any bisf related by self->I_BSF[R2941] where
                          selected.Stack_Frame_ID == param.stack_frame_id;
select one next_statement related by self->ACT_SMT[R661.''succeeds''];
if (not_empty next_statement)
  unrelate self from bisf across R2941;
  relate next_statement to bisf across R2941;
else
  // There is no next statement, we reached the end of the block.
  // Find the parent block if there is one and enable execution
  // on the appropriate block in stack frame.
  select one containingBlk related by self->ACT_BLK[R602];
  containingBlk.popUpBlock(stack_frame_id:param.stack_frame_id);
end if;',
	1,
	'',
	"f441e713-3b66-4b6f-8522-fd892beef6b6");
INSERT INTO O_TPARM
	VALUES ("b303898e-0006-4529-a3c2-14c8390839dc",
	"9af4e5f2-bf54-488f-bbcf-2452f947ac01",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f441e713-3b66-4b6f-8522-fd892beef6b6",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'popUpToBlock',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Now pop out to containing block
select one body related by self->ACT_BLK[R602]->ACT_ACT[R601];   
select any target_block related by self->ACT_BLK[R602]->ACT_ACT[R601]->
                        ACT_BLK[R601] where selected.Block_ID == param.block_id;
select one current_block related by self->ACT_BLK[R602];
while (current_block != target_block)
  select one containingWhile related by current_block->ACT_WHL[R608];
  select one containingIf related by current_block->ACT_IF[R607];
  select one containingElse related by current_block->ACT_E[R606];
  select one containingElif related by current_block->ACT_EL[R658];
  select one containingFor related by current_block->ACT_FOR[R605];
  if (not_empty containingWhile or not_empty containingIf or
    not_empty containingElse or not_empty containingElif or
    not_empty containingFor)
    select one containingStmt related by containingFor->ACT_SMT[R603];
    if (not_empty containingWhile)
      select one containingStmt related by containingWhile->ACT_SMT[R603];
    elif (not_empty containingIf)
      select one containingStmt related by containingIf->ACT_SMT[R603];
    elif (not_empty containingElse)
      select one containingStmt related by containingElse->
                                                    ACT_IF[R683]->ACT_SMT[R603];
    elif (not_empty containingElif)
      select one containingStmt related by containingElif->
                                                    ACT_IF[R682]->ACT_SMT[R603];
    end if;
    if (not_empty containingStmt)
      select any currentBisf related by current_block->I_BSF[R2923] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
      currentBisf.dispose();
      select one current_block related by containingStmt->ACT_BLK[R602];
      if (current_block == target_block)
        select any containingBisf related by target_block->I_BSF[R2923] where
                          selected.Stack_Frame_ID == param.stack_frame_id;
        if (not_empty containingBisf)
          containingBisf.isExecuting = true;
        else
          pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Statement.popUpToBlock Internal error: containing block not found.",path:pathMsg);
        end if;
      end if;
    else
      pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Statement.popUpToBlock Internal error: containing statement not found.",path:pathMsg);
    end if;
  else
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Statement.popUpToBlock Internal error: containing block control statement not found.",path:pathMsg);
  end if;
end while;

',
	1,
	'',
	"762286bb-6bdf-4a3d-8438-c5c40e238eff");
INSERT INTO O_TPARM
	VALUES ("e628357c-4fef-4a2b-82bd-3ae290513c1b",
	"f441e713-3b66-4b6f-8522-fd892beef6b6",
	'block_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("afac80dd-a77f-403f-a73f-8f7a6a895073",
	"f441e713-3b66-4b6f-8522-fd892beef6b6",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e628357c-4fef-4a2b-82bd-3ae290513c1b",
	'');
INSERT INTO O_NBATTR
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_BATTR
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_ATTR
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"00000000-0000-0000-0000-000000000000",
	'Statement_ID',
	'',
	'',
	'Statement_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"15942167-7d39-41e8-a154-f5cee0395f97",
	"7f4429cd-f005-4995-97a5-ff3ebb77207c",
	"0cde5149-057e-40cb-a755-64677e4cdc76",
	"46e49daf-c7c7-4935-936b-e184edbce924",
	"c0ef59fd-254f-4cb7-8863-4c96cdd9400b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Block',
	'Block_ID',
	'R602.''contains''');
INSERT INTO R_RGO_PROXY
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	"15942167-7d39-41e8-a154-f5cee0395f97",
	"7f4429cd-f005-4995-97a5-ff3ebb77207c",
	'../Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"15942167-7d39-41e8-a154-f5cee0395f97",
	"0cde5149-057e-40cb-a755-64677e4cdc76",
	'../Body.xtuml');
INSERT INTO O_REF
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	"46e49daf-c7c7-4935-936b-e184edbce924",
	"b3d256ba-f906-4f62-b179-c903fce895c7",
	"aa587d72-1c6e-410e-bdb8-b32775b01cd2",
	"2b52220d-c01f-408e-8dee-9b719fbc39ad",
	"46e49daf-c7c7-4935-936b-e184edbce924",
	"d1a0a7e4-c125-4d56-b0f6-223a66928f8b",
	"c0ef59fd-254f-4cb7-8863-4c96cdd9400b",
	0,
	'',
	'Statement',
	'Block_ID',
	'R661.''succeeds''');
INSERT INTO R_RGO_PROXY
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	"b3d256ba-f906-4f62-b179-c903fce895c7",
	"aa587d72-1c6e-410e-bdb8-b32775b01cd2",
	'../Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("46e49daf-c7c7-4935-936b-e184edbce924",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	"b3d256ba-f906-4f62-b179-c903fce895c7",
	"2b52220d-c01f-408e-8dee-9b719fbc39ad",
	'../Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("46e49daf-c7c7-4935-936b-e184edbce924",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	1,
	'Block_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	'../Block/Block.xtuml');
INSERT INTO O_ATTR
	VALUES ("46e49daf-c7c7-4935-936b-e184edbce924",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	'Block_ID',
	'',
	'',
	'Block_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"b3d256ba-f906-4f62-b179-c903fce895c7",
	"aa587d72-1c6e-410e-bdb8-b32775b01cd2",
	"2b52220d-c01f-408e-8dee-9b719fbc39ad",
	"61e63ba2-d202-4639-867d-97e06ae5b681",
	"250dd8bc-16c9-4ec3-9568-fdf1a39889bf",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Statement',
	'Statement_ID',
	'R661.''succeeds''');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	"b3d256ba-f906-4f62-b179-c903fce895c7",
	"2b52220d-c01f-408e-8dee-9b719fbc39ad",
	'../Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("61e63ba2-d202-4639-867d-97e06ae5b681",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_ATTR
	VALUES ("61e63ba2-d202-4639-867d-97e06ae5b681",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"46e49daf-c7c7-4935-936b-e184edbce924",
	'Previous_Statement_ID',
	'',
	'Previous_',
	'Statement_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a4f246a2-cbf0-4e79-aa6a-f1e1c8314f2d",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_BATTR
	VALUES ("a4f246a2-cbf0-4e79-aa6a-f1e1c8314f2d",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_ATTR
	VALUES ("a4f246a2-cbf0-4e79-aa6a-f1e1c8314f2d",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"61e63ba2-d202-4639-867d-97e06ae5b681",
	'LineNumber',
	'The line in the activity at which this statement resides.  For multi-line
statements, this is the line that the statement starts at.  It has
a default value of -1, indicating that the location is not known.
                        
Not_participating_value: -1',
	'',
	'LineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5b5dc781-14c5-4a01-82a2-ce2e7a29af5c",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_BATTR
	VALUES ("5b5dc781-14c5-4a01-82a2-ce2e7a29af5c",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_ATTR
	VALUES ("5b5dc781-14c5-4a01-82a2-ce2e7a29af5c",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"a4f246a2-cbf0-4e79-aa6a-f1e1c8314f2d",
	'StartPosition',
	'The column in the activity at which this statement starts. It has
a default value of -1, indicating that the location is not known.
                        
Not_participating_value: -1',
	'',
	'StartPosition',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("fa253a11-16db-425e-95b8-73cec13b7525",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'select one body related by self->ACT_BLK[R602]->ACT_ACT[R601];
result = "Unknown Activity";
if (not_empty body)
  result = body.Label;
end if;
self.Label = result + " line: " + GD::int_to_string(value:self.LineNumber);',
	1);
INSERT INTO O_BATTR
	VALUES ("fa253a11-16db-425e-95b8-73cec13b7525",
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_ATTR
	VALUES ("fa253a11-16db-425e-95b8-73cec13b7525",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	"5b5dc781-14c5-4a01-82a2-ce2e7a29af5c",
	'Label',
	'',
	'',
	'Label',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (1,
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_OIDA
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_OIDA
	VALUES ("46e49daf-c7c7-4935-936b-e184edbce924",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Block_ID');
INSERT INTO O_ID
	VALUES (0,
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO O_OIDA
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	'Statement_ID');
INSERT INTO O_ID
	VALUES (2,
	"4f42b756-0c2e-4a87-b40f-87291682433c");
INSERT INTO PE_PE
	VALUES ("4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	"5375dd69-33aa-4887-8270-296340adc334",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("5375dd69-33aa-4887-8270-296340adc334",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Body',
	'This subsystem abstracts the action itself, the blocks and statements
it contains together with the flow of control statements such as ''while'',
''for each'' and ''if''.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Body.xtuml');
