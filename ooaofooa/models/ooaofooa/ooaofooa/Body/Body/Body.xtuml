-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'Body',
	601,
	'ACT_ACT',
	'This class represents the action, whether it be a state action, operation or function body etc.

An Action consists of a number of statements scoped into one or more nested Blocks.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("fe40b537-ef7b-4e58-9747-4d094a4e71ec",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.clear_blocks();      // parsed blocks
self.clear_live_blocks(); // executable blocks

select one sab related by self->ACT_SAB[R698];
if ( not_empty sab )	
  unrelate self from sab across R698;
  sab.dispose();
end if;

select one tab related by self->ACT_TAB[R698];
if not_empty tab
  unrelate self from tab across R698;
  tab.dispose();
end if;

select one dab related by self->ACT_DAB[R698];
if ( not_empty dab )	
  unrelate self from dab across R698;
  dab.dispose();
end if;

select one fnb related by self->ACT_FNB[R698];
if ( not_empty fnb )	
  unrelate self from fnb across R698;
  fnb.dispose();
end if;

select one opb related by self->ACT_OPB[R698];
if ( not_empty opb )	
  unrelate self from opb across R698;
  opb.dispose();
end if;

select one psb related by self->ACT_PSB[R698];
if(not_empty psb)
  unrelate self from psb across R698;
  psb.dispose();
end if;

select one pob related by self->ACT_POB[R698];
if(not_empty pob)
  unrelate self from pob across R698;
  pob.dispose();
end if;

select one rsb related by self->ACT_RSB[R698];
if(not_empty rsb)
  unrelate self from rsb across R698;
  rsb.dispose();
end if;

select one rob related by self->ACT_ROB[R698];
if(not_empty rob)
  unrelate self from rob across R698;
  rob.dispose();
end if;

select one brb related by self->ACT_BRB[R698];
if ( not_empty brb )	
  unrelate self from brb across R698;
  brb.dispose();
end if;

select one blk related by self->ACT_BLK[R699];
if ( not_empty blk )
  unrelate self from blk across R699;
end if;

select one comp related by self->ACT_BIC[R694]->C_C[R694];
if not_empty comp
  select one bic related by self->ACT_BIC[R694];
  unrelate self from comp across R694 using bic;
  delete object instance bic;
end if;

select one pe related by self->ACT_BIE[R640]->PE_PE[R640];
if not_empty pe
  select one bie related by self->ACT_BIE[R640];
  unrelate self from pe across R640 using bie;
  delete object instance bie;
end if;
delete object instance self;
',
	1,
	'',
	"0489b92f-8217-43a4-980c-c3631eeb6b63");
INSERT INTO O_TFR
	VALUES ("b8f35b45-4fc4-47a4-addb-e0cc6261698f",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'entered_loop',
	'This operation is called during parsing each time a loop (for or while) is entered.
-----------------------------------------------------------------------------------
Bridge:ALS
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.LoopLevel = self.LoopLevel + 1;
',
	1,
	'',
	"fe40b537-ef7b-4e58-9747-4d094a4e71ec");
INSERT INTO O_TFR
	VALUES ("73ba7930-878e-49bd-a017-6a6a913c78f5",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'exitted_loop',
	'This operation is called during parsing each time a loop (for or while) is exitted.
-----------------------------------------------------------------------------------
Bridge:ALS',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.LoopLevel = self.LoopLevel - 1;
',
	1,
	'',
	"b8f35b45-4fc4-47a4-addb-e0cc6261698f");
INSERT INTO O_TFR
	VALUES ("cb3b8f9d-4f72-4b92-944a-75bd58d69660",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'in_loop',
	'This operation is called during parsing to determine if the current statement is inside of a loop.
-----------------------------------------------------------------------------------
Bridge:ALS',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'return self.LoopLevel > 0;
',
	1,
	'',
	"a22dc1c9-e054-428f-9249-0773e305ba4c");
INSERT INTO O_TFR
	VALUES ("0b5c6dc0-cac3-49d6-a5dc-1235b8f4d3e8",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'self_is_valid',
	'This operation returns true if the variable ''self'' can be referenced in this body.
-----------------------------------------------------------------------------------
Bridge:ALS',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one op related by self->ACT_OPB[R698]->O_TFR[R696];
if not_empty op
  if op.Instance_Based == Scope::Instance
    return true;
  end if;
else
  select one sm_act related by self->ACT_SAB[R698]->SM_ACT[R691];
  if empty sm_act
    select one sm_act related by self->ACT_TAB[R698]->SM_ACT[R688];
  end if;
  if not_empty sm_act
    select one ism related by sm_act->SM_SM[R515]->SM_ISM[R517];
    if not_empty ism
      return true;
    end if;
  else
    select one dab related by self->ACT_DAB[R698]->O_DBATTR[R693];
    if not_empty dab
      return true;
    end if;
  end if;
end if;

return false;',
	1,
	'',
	"20563017-6aa4-4aae-ac7a-be942ebd72b4");
INSERT INTO O_TFR
	VALUES ("5a1cc2ea-b6c2-495b-95cf-5300e39acf10",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'clear_blocks',
	'This operation removes all Block instances related to this instance.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.LoopLevel = 0;
select one first_block related by self->ACT_BLK[R650];
if ( not_empty first_block )
   unrelate self from first_block across R650;
end if;

select many block_set related by self->ACT_BLK[R612];
for each block in block_set
  unrelate self from block across R612;
  block.dispose();
end for;',
	1,
	'',
	"1a9142af-e06f-4a23-82e0-b9be00b5692c");
INSERT INTO O_TFR
	VALUES ("20563017-6aa4-4aae-ac7a-be942ebd72b4",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'return_is_required',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one fnb related by self->ACT_FNB[R698];
if ( not_empty fnb )	
  select one sync related by fnb->S_SYNC[R695];
  select one dt related by sync->S_DT[R25];
  if ( dt.Name != "void" )
    return true;
  end if;
else
  select one opb related by self->ACT_OPB[R698];
  if ( not_empty opb )	
    select one op related by opb->O_TFR[R696];
    select one dt related by op->S_DT[R116];
    if ( dt.Name != "void" )
      return true;
    end if;
  else
    select one brb related by self->ACT_BRB[R698];
    if ( not_empty brb )	
      select one brg related by brb->S_BRG[R697];
      select one dt related by brg->S_DT[R20];
      if ( dt.Name != "void" )
        return true;
      end if;
    else
      select one rqOpB related by self->ACT_ROB[R698];
      if not_empty rqOpB
        select one dt related by rqOpB->SPR_RO[R685]->SPR_REP[R4502]->
                                          C_EP[R4500]->C_IO[R4004]->S_DT[R4008];
        if ( dt.Name != "void" )
          return true;
        end if;
      else
        select one prOpB related by self->ACT_POB[R698];
        if not_empty prOpB
          select one dt related by prOpB->SPR_PO[R687]->SPR_PEP[R4503]->
                                          C_EP[R4501]->C_IO[R4004]->S_DT[R4008];
          if ( dt.Name != "void" )
            return true;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
return false;
',
	1,
	'',
	"e2326806-7da2-4181-b7f4-9f145bf124e0");
INSERT INTO O_TFR
	VALUES ("dcba3fb2-ce1b-4736-a148-c8e5f11673da",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'createStackFrame',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Body:Body.createStackFrame 
 
select any stack from instances of I_STACK where
                                            selected.Stack_ID == param.stack_id;
if (empty stack)
  //Invalid stack ID!
  USER::logError(msg:"Error in Body.createStackFrame: Invalid stack id used. Using random stack.",path:self.getPath());
  select any stack from instances of I_STACK;  
end if;

select any invoking_stack_frame from instances of I_STF where 
          selected.Stack_Frame_ID == param.invoking_stack_frame_or_component_id;

create object instance stack_frame of I_STF;

if param.enqueue
  // This flag prevents premature processing of intercomponent messages
  stack_frame.readyForInterrupt = false;
  stack.enqueue(stack_frame_id:stack_frame.Stack_Frame_ID,
          remote_stack_frame_id:param.invoking_stack_frame_or_component_id,
                                                               isActivity:true);
else
  // Add this stack frame to the stack
  stack.push(stack_frame_id:stack_frame.Stack_Frame_ID);
end if;
// Relate the outer_block to the top stack frame
select one outer_block related by self->ACT_BLK[R666];
if (not_empty outer_block)
  create object instance block_in_stack_frame of I_BSF;
  relate stack_frame to outer_block across R2923 using block_in_stack_frame;
  block_in_stack_frame.isExecuting = true;
  select any statement related by outer_block->ACT_SMT[R602];
  if (not_empty statement)
    relate statement to block_in_stack_frame across R2941;
  end if;
  outer_block.blockInStackFrameCreated = true;
  outer_block.initialize();
  // Create sender rvalues if needed
  select many sender_ih_vars related by outer_block->V_VAR[R823] where
                                   GD::toLower(value:selected.Name) == "sender";
  if (not_empty sender_ih_vars)
    // The sender keyword is used in the executing block,
    // so find it and relate it to the newly created local
    // Create a local reference for the sender 
    select one invoking_stack related by invoking_stack_frame->I_STACK[R2943];
    select one sender_eng related by invoking_stack->I_EXE[R2930];
    if empty sender_eng
      select any sender_eng from instances of I_EXE where 
                                     selected.Execution_Engine_ID == 
                                     param.invoking_stack_frame_or_component_id;
    end if;
    for each sender_ih_var in sender_ih_vars
      // Create a new local reference 
      loc_id = outer_block.newLocalValue(stack_frame_id:
                                                    stack_frame.Stack_Frame_ID);
      // Find the new local value and set it with the actual transient value
      select any local related by outer_block->I_BSF[R2923]->
                                 L_LCL[R3000] where selected.Local_ID == loc_id;
      select one lvl related by local->L_LVL[R3001];
      select one tv related by sender_ih_var->V_TRN[R814];
      relate lvl to tv across R3005;
      // create a runtime value and set its value to the execution engine
      create object instance lrtVal of RV_RVL;
      relate lrtVal to local across R3306;
      select one dt related by sender_ih_var->V_TRN[R814]->S_DT[R821];
      relate lrtVal to dt across R3307;
      create object instance simpleVal of RV_SMV;
      relate lrtVal to simpleVal across R3300;
      create object instance compRef of RV_CRV;
      relate simpleVal to compRef across R3308;
      if not_empty sender_eng
        // sender_eng should be null only when an activity with
        // a ''sender'' keyword is invoked directly by the user.
        relate compRef to sender_eng across R3309;
      end if;
      // Attach the sender keyword to the new stack frame
      // so that it will get disposed correctly.
      relate lrtVal to stack_frame across R3310;
    end for;   
  end if;
end if;      
return stack_frame.Stack_Frame_ID;',
	1,
	'',
	"177135ec-346e-443c-a011-a8a078dcb20a");
INSERT INTO O_TPARM
	VALUES ("526ec7ad-8e1f-471c-8811-9d7b7b429e2f",
	"dcba3fb2-ce1b-4736-a148-c8e5f11673da",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("659196ea-839b-4fe2-9cb4-46e88157df69",
	"dcba3fb2-ce1b-4736-a148-c8e5f11673da",
	'enqueue',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"526ec7ad-8e1f-471c-8811-9d7b7b429e2f",
	'');
INSERT INTO O_TPARM
	VALUES ("8ad9e7f7-241c-4c93-bad8-27b48f717510",
	"dcba3fb2-ce1b-4736-a148-c8e5f11673da",
	'invoking_stack_frame_or_component_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"659196ea-839b-4fe2-9cb4-46e88157df69",
	'');
INSERT INTO O_TFR
	VALUES ("53fa3ffc-cde0-4646-9035-e34d55d033d3",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'deleteStackFrame',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'//Body:Body.deleteStackFrame()

select any stack from instances of I_STACK where (selected.Stack_ID == param.stack_id);
if (not_empty stack)
   stack.pop(disposeFrame:true);
else
  //Invalid stack ID!
  USER::logError(msg:"Error in Body.deleteStackFrame: Invalid stack id used, not able to delete stack frame.",path:self.getPath());
end if;
    
    ',
	1,
	'',
	"73d88241-7d8b-4a1a-aa54-8fa5a9c18cd4");
INSERT INTO O_TPARM
	VALUES ("4676efda-89d3-42de-a7f2-fbf106d9aadf",
	"53fa3ffc-cde0-4646-9035-e34d55d033d3",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("88f95dc8-815e-49eb-920c-aaad522d7ff8",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'createStackFrameForBridge',
	'Called to create an initial stack frame for execution of a funtion wired to a bridge in another model.',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Body:Body.createStackFrameForBridge 

select any invocation_frame from instances of I_STF
                 where (selected.Stack_Frame_ID == param.stack_frame_id_caller);

select one source_ee related by invocation_frame->I_STACK[R2943]->I_EXE[R2930];

select one function related by self->ACT_FNB[R698]->S_SYNC[R695];
select one packageableElem related by function->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one dest_ee related by package->I_EXE[R2970];
if (empty dest_ee)
  select one component related by packageableElem->C_C[R8003];
  if (not_empty component)
    select any dest_ee related by component->I_EXE[R2955] where (component.Id == selected.Component_Id);
  end if;
end if;


if(empty dest_ee)
  // not supported, the destination function
  // is most likely defined under a component
  // inter-component communication is supported
  // only through interfaces
  return GD::NULL_UNIQUE_ID();
end if;

select one dest_stack related by dest_ee->I_STACK[R2930];

create object instance stack_frame of I_STF;
stack_frame.Created_For_Wired_Bridge = true;
stack_frame.Bridge_Caller_Stack_Frame_ID = param.stack_frame_id_caller;
  
// Add this stack frame to the stack
relate stack_frame to dest_stack across R2943;

select any bottom_frame related by dest_stack->I_STF[R2943]
                  where (selected.Child_Stack_Frame_ID == GD::NULL_UNIQUE_ID());

relate stack_frame to bottom_frame across R2928.''previous context'';

// Relate the outer_block to the top stack frame
select one outer_block related by self->ACT_BLK[R666];
if (not_empty outer_block)
  create object instance block_in_stack_frame of I_BSF;
  relate stack_frame to outer_block across R2923 using block_in_stack_frame;
  outer_block.blockInStackFrameCreated = true;
end if;  

return stack_frame.Stack_Frame_ID;',
	1,
	'',
	"dcba3fb2-ce1b-4736-a148-c8e5f11673da");
INSERT INTO O_TPARM
	VALUES ("d230b3c5-cb2c-4096-8a80-d1d9a28ab0bd",
	"88f95dc8-815e-49eb-920c-aaad522d7ff8",
	'stack_frame_id_caller',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0489b92f-8217-43a4-980c-c3631eeb6b63",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'deleteStackFrameForBridge',
	'Called to delete an initial stack frame used for execution of a funtion wired to a bridge in another model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'//Body:Body.deleteStackFrameForBridge()

select any stack from instances of I_STACK where (selected.Stack_ID == param.stack_id);
if (not_empty stack)
  stack.pop(disposeFrame:true);
else
  //Invalid stack ID!
  USER::logError(msg:"Error in Body.deleteStackFrameForBridge: Invalid stack id used, not able to delete stack frame.",path:self.getPath());
end if;',
	1,
	'',
	"53fa3ffc-cde0-4646-9035-e34d55d033d3");
INSERT INTO O_TPARM
	VALUES ("3511ad39-4984-415b-aadf-52acb2d8a4d2",
	"0489b92f-8217-43a4-980c-c3631eeb6b63",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("73d88241-7d8b-4a1a-aa54-8fa5a9c18cd4",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'deleteStackForBridge',
	'Called to delete a temporary stack used for execution of a funtion wired to a bridge in another model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	1,
	'',
	"63ff815f-7274-41ad-b5b7-e452e51ef8f2");
INSERT INTO O_TPARM
	VALUES ("e021e2b0-868f-4773-95b4-25baaed4951d",
	"73d88241-7d8b-4a1a-aa54-8fa5a9c18cd4",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e2326806-7da2-4181-b7f4-9f145bf124e0",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Body.initialize()
// First destroy all the old blocks
select one block related by self->ACT_BLK[R666];
if (not_empty block)
  unrelate self from block across R666;
end if;
select many blocks related by self->ACT_BLK[R601];
for each block in blocks
  unrelate self from block across R601;
  block.dispose();
end for;
// Now move new blocks from parse associations
// verifier associations ready for execution
select one block related by self->ACT_BLK[R650];
if (not_empty block)
  unrelate self from block across R650;
  relate self to block across R666;
end if;
select many blocks related by self->ACT_BLK[R612];
for each block in blocks
  unrelate self from block across R612;
  relate self to block across R601;
  block.initialize();
end for;',
	1,
	'',
	"cb3b8f9d-4f72-4b92-944a-75bd58d69660");
INSERT INTO O_TFR
	VALUES ("13ba4618-b947-4f57-a7b5-a22148c557d3",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'clear_live_blocks',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.LoopLevel = 0;
select one first_block related by self->ACT_BLK[R666];
if ( not_empty first_block )
   unrelate self from first_block across R666;
end if;

select many block_set related by self->ACT_BLK[R601];
for each block in block_set
  unrelate self from block across R601;
  block.dispose();
end for;',
	1,
	'',
	"5a1cc2ea-b6c2-495b-95cf-5300e39acf10");
INSERT INTO O_TFR
	VALUES ("1a9142af-e06f-4a23-82e0-b9be00b5692c",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'associateWithOwningComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// associateWithOwningComponent()
select one component related by self->ACT_BIC[R694]->C_C[R694];
if empty component
  // The component for a body will not change once,
  // established. So compute it only once
  id = self.getContainingComponentId();
  // the body will live in the same model-root as the component,
  // therefore it is safe to use a from instances selection
  select any component from instances of C_C where (selected.Id == id);
  if not_empty component
    create object instance bic of ACT_BIC;
    relate self to component across R694 using bic;
  end if;
end if;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("177135ec-346e-443c-a011-a8a078dcb20a",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'createStackForSignal',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"78d727f3-b2d1-4863-bed5-9b902f53f499");
INSERT INTO O_TPARM
	VALUES ("87c6f346-b9e2-4466-b6fa-e73787f71756",
	"177135ec-346e-443c-a011-a8a078dcb20a",
	'execution_engine_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("63ff815f-7274-41ad-b5b7-e452e51ef8f2",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'createStackFrameForMessage',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Body:Body.createStackFrameForMessage
frame_id = self.createStackFrame(stack_id:param.stack_id, enqueue: false,
                     invoking_stack_frame_or_component_id:GD::NULL_UNIQUE_ID());
self.startStackFrameForMessage(stackframe_id:frame_id);
return frame_id;',
	1,
	'',
	"88f95dc8-815e-49eb-920c-aaad522d7ff8");
INSERT INTO O_TPARM
	VALUES ("fc6f4ab2-73f2-404c-ba1e-608d7fd05750",
	"63ff815f-7274-41ad-b5b7-e452e51ef8f2",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f17c497e-3ff3-4a46-a9e2-5f48c5c73a78",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'createStackAndFrameForSignal',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// create a stack and frame for signal
// execution
stack_id = self.createStackForSignal(
    execution_engine_id:param.execution_engine_id);
frame_id = self.createStackFrameForMessage(stack_id:stack_id);
return stack_id;',
	1,
	'',
	"13ba4618-b947-4f57-a7b5-a22148c557d3");
INSERT INTO O_TPARM
	VALUES ("97410afe-46ff-4b09-8134-f4c9c9d5d53f",
	"f17c497e-3ff3-4a46-a9e2-5f48c5c73a78",
	'execution_engine_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a22dc1c9-e054-428f-9249-0773e305ba4c",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'getContainingComponentId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'select one rsb related by self->ACT_RSB[R698];
select one rob related by self->ACT_ROB[R698];
select one psb related by self->ACT_PSB[R698];
select one pob related by self->ACT_POB[R698];
select one tab related by self->ACT_TAB[R698];
select one sab related by self->ACT_SAB[R698];
select one dab related by self->ACT_DAB[R698];
select one fnb related by self->ACT_FNB[R698];
select one opb related by self->ACT_OPB[R698];
select one brb related by self->ACT_BRB[R698];
if(not_empty rsb)
  return rsb.getContainingComponentId();
elif(not_empty rob)
  return rob.getContainingComponentId();
elif(not_empty psb)
  return psb.getContainingComponentId();
elif(not_empty pob)
  return pob.getContainingComponentId();
elif(not_empty tab)
  return tab.getContainingComponentId();
elif(not_empty sab)
  return sab.getContainingComponentId();
elif(not_empty dab)
  return dab.getContainingComponentId();
elif(not_empty fnb)
  return fnb.getContainingComponentId();
elif(not_empty opb)
  return opb.getContainingComponentId();
elif(not_empty brb)
  return brb.getContainingComponentId();
end if;
return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"73ba7930-878e-49bd-a017-6a6a913c78f5");
INSERT INTO O_TFR
	VALUES ("78d727f3-b2d1-4863-bed5-9b902f53f499",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'createStackForBridge',
	'Called to create a temporary stack for execution of a funtion wired to a bridge in another model.',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Body:Body.createStackForBridge 

return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"f17c497e-3ff3-4a46-a9e2-5f48c5c73a78");
INSERT INTO O_TFR
	VALUES ("0d286c43-920b-4e29-aefd-84e5bee0b024",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// just return this instance as an Object
return this;',
	0,
	'',
	"0b5c6dc0-cac3-49d6-a5dc-1235b8f4d3e8");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("ce545571-1450-447c-9f0b-5e5b0973f267",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'startStackFrameForMessage',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Body.startStackFrameForMessage()
select any stack_frame from instances of I_STF
                         where (selected.Stack_Frame_ID == param.stackframe_id);
select one stack related by stack_frame->I_ICQE[R2966]->I_STACK[R2966];

// Since this is only called to deliver a message, we always
// look for the engine across R2966 from the interrupt stack.
select one engine related by stack->I_EXE[R2930];
stack.runState = RunStateType::Running;
stack_frame.readyForInterrupt = true;
engine.notify();',
	1,
	'',
	"0d286c43-920b-4e29-aefd-84e5bee0b024");
INSERT INTO O_TPARM
	VALUES ("9332cdcd-80b9-4931-a623-5df7811a6cc4",
	"ce545571-1450-447c-9f0b-5e5b0973f267",
	'stackframe_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("dc3b22f2-7a7a-4cef-a343-481a09fe475a",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'associateWithContainer',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Body.associateWithContainer()
select one container related by self->ACT_BIE[R640]->PE_PE[R640];
if empty container
  // The component for a body will not change once,
  // established. So compute it only once
  id = self.getContainerId();
  // the body will live in the same model-root as the component,
  // therefore it is safe to use a from instances selection
  select any container from instances of PE_PE where (selected.Element_ID == id);
  if not_empty container
    create object instance bie of ACT_BIE;
    relate self to container across R640 using bie;
  else
    return false;
  end if;
end if;
return true;',
	1,
	'',
	"ce545571-1450-447c-9f0b-5e5b0973f267");
INSERT INTO O_TFR
	VALUES ("580fde43-c3c4-4103-952c-062a2d86c8f3",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'getContainerId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Body.getContainerId()
select one rsb related by self->ACT_RSB[R698];
select one rob related by self->ACT_ROB[R698];
select one psb related by self->ACT_PSB[R698];
select one pob related by self->ACT_POB[R698];
select one tab related by self->ACT_TAB[R698];
select one sab related by self->ACT_SAB[R698];
select one dab related by self->ACT_DAB[R698];
select one fnb related by self->ACT_FNB[R698];
select one opb related by self->ACT_OPB[R698];
select one brb related by self->ACT_BRB[R698];
if(not_empty rsb)
  return rsb.getContainerId();
elif(not_empty rob)
  return rob.getContainerId();
elif(not_empty psb)
  return psb.getContainerId();
elif(not_empty pob)
  return pob.getContainerId();
elif(not_empty tab)
  return tab.getContainerId();
elif(not_empty sab)
  return sab.getContainerId();
elif(not_empty dab)
  return dab.getContainerId();
elif(not_empty fnb)
  return fnb.getContainerId();
elif(not_empty opb)
  return opb.getContainerId();
elif(not_empty brb)
  return brb.getContainerId();
end if;
return GD::NULL_UNIQUE_ID();',
	1,
	'',
	"dc3b22f2-7a7a-4cef-a343-481a09fe475a");
INSERT INTO O_TFR
	VALUES ("3fd2bf67-99bf-4e60-9f75-7f9543635027",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'getPath',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'//Route to the proper getPath() method
resultPath="<Path is not available in getPath()>";

select one functionBody related by self->ACT_FNB[R698]; 
select one stateActionBody related by self->ACT_SAB[R698];
select one derivedAttributeBody related by self->ACT_DAB[R698];
select one operationBody  related by self->ACT_OPB[R698];
select one bridgeBody related by self->ACT_BRB[R698];
select one providedOperationBody related by self-> ACT_POB[R698];
select one providedSignalBody related by self->ACT_PSB[R698];
select one requiredOperationBody related by self->ACT_ROB[R698];
select one requiredSignalBody related by self-> ACT_RSB[R698];
select one transitionActionBody related by self->ACT_TAB[R698]; 

if (not_empty functionBody)
resultPath = functionBody.getPath();

elif (not_empty stateActionBody )
resultPath = stateActionBody.getPath();

elif (not_empty derivedAttributeBody )
resultPath = derivedAttributeBody.getPath();

elif (not_empty operationBody )
resultPath = operationBody.getPath();

elif (not_empty bridgeBody)
resultPath = bridgeBody.getPath();

elif (not_empty providedOperationBody)
resultPath = providedOperationBody.getPath();

elif (not_empty providedSignalBody )
resultPath = providedSignalBody.getPath();

elif (not_empty requiredOperationBody )
resultPath = requiredOperationBody.getPath();

elif (not_empty requiredSignalBody)
resultPath =requiredSignalBody.getPath();

elif (not_empty transitionActionBody )
resultPath =  transitionActionBody.getPath();

end if;


return resultPath;',
	1,
	'',
	"580fde43-c3c4-4103-952c-062a2d86c8f3");
INSERT INTO O_TFR
	VALUES ("0c7ff8ba-6dad-4dcb-8db2-86a6187435db",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'isInitialized',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one outerblock related by self->ACT_BLK[R666];
if (not_empty outerblock)
  return true;
end if;
select any block related by self->ACT_BLK[R601];
if (not_empty block)
  return true;
end if;
return false;

',
	1,
	'',
	"3fd2bf67-99bf-4e60-9f75-7f9543635027");
INSERT INTO O_NBATTR
	VALUES ("753cfb59-20b8-4f4f-a6a9-a7836988b5d4",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_BATTR
	VALUES ("753cfb59-20b8-4f4f-a6a9-a7836988b5d4",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ATTR
	VALUES ("753cfb59-20b8-4f4f-a6a9-a7836988b5d4",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"00000000-0000-0000-0000-000000000000",
	'Action_ID',
	'',
	'',
	'Action_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("cd138a9a-6579-4b71-9b46-6d44b924c3ad",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_BATTR
	VALUES ("cd138a9a-6579-4b71-9b46-6d44b924c3ad",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ATTR
	VALUES ("cd138a9a-6579-4b71-9b46-6d44b924c3ad",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"753cfb59-20b8-4f4f-a6a9-a7836988b5d4",
	'Type',
	'This is the user-readable description of the body subtype. It it used for displaying error messages to the user. Possible values:  "function", "class operation", "operation", "bridge", "state", "class state", "derived attribute", "provided signal", "required signal", "provided operation", "required operation".',
	'',
	'Type',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("aa872e93-1cf7-4739-bb65-10ae21ff8e21",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_BATTR
	VALUES ("aa872e93-1cf7-4739-bb65-10ae21ff8e21",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ATTR
	VALUES ("aa872e93-1cf7-4739-bb65-10ae21ff8e21",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"cd138a9a-6579-4b71-9b46-6d44b924c3ad",
	'LoopLevel',
	'While parsing an action, this attribute contains the depth of nested loops in the body.
---------------------------------------------------------------------
Bridge:ALS',
	'',
	'LoopLevel',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"2182b210-2d27-437c-bfc9-682ab64dfdbc",
	"8743155e-f88f-4979-b6ee-f8cc31a5cd98",
	"9d8577c1-b059-4a2a-982c-6a75f55a186f",
	"55767fd8-b439-433c-ac1b-7e26753fc274",
	"e53a1fd9-8747-49b9-b7b0-58c1aa88b4be",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Block',
	'Block_ID',
	'R666.''has committed outer''');
INSERT INTO R_RGO_PROXY
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"2182b210-2d27-437c-bfc9-682ab64dfdbc",
	"8743155e-f88f-4979-b6ee-f8cc31a5cd98",
	'../Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"2182b210-2d27-437c-bfc9-682ab64dfdbc",
	"9d8577c1-b059-4a2a-982c-6a75f55a186f",
	'../Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("55767fd8-b439-433c-ac1b-7e26753fc274",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	1,
	'Block_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	'../Block/Block.xtuml');
INSERT INTO O_ATTR
	VALUES ("55767fd8-b439-433c-ac1b-7e26753fc274",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"aa872e93-1cf7-4739-bb65-10ae21ff8e21",
	'Block_ID',
	'',
	'',
	'Block_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"26369e0c-abde-4f83-a273-301d65cee060",
	"6b7a0bc3-3e25-4c73-85df-1a77291e4aef",
	"ef2ab526-b0ad-4534-a461-998bcb9acb2a",
	"a2373a6e-1448-480f-abec-5efa17762404",
	"e396981e-1414-421f-b09f-4ecbfa7b393d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Block',
	'Block_ID',
	'R699.''has current scope''');
INSERT INTO R_RGO_PROXY
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"26369e0c-abde-4f83-a273-301d65cee060",
	"6b7a0bc3-3e25-4c73-85df-1a77291e4aef",
	'../Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"26369e0c-abde-4f83-a273-301d65cee060",
	"ef2ab526-b0ad-4534-a461-998bcb9acb2a",
	'../Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("a2373a6e-1448-480f-abec-5efa17762404",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	'Block_ID');
INSERT INTO O_ATTR
	VALUES ("a2373a6e-1448-480f-abec-5efa17762404",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"55767fd8-b439-433c-ac1b-7e26753fc274",
	'CurrentScope_ID',
	'',
	'',
	'CurrentScope_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5985a8d6-17b7-4036-94be-bb04835e8b90",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_BATTR
	VALUES ("5985a8d6-17b7-4036-94be-bb04835e8b90",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ATTR
	VALUES ("5985a8d6-17b7-4036-94be-bb04835e8b90",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"a2373a6e-1448-480f-abec-5efa17762404",
	'return_value',
	'For bodies of OAL that return a value, this attribute will be set by the return statement.',
	'',
	'return_value',
	0,
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("14a50292-4172-4c58-a950-c8a7725c9078",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	'select one sab related by self->ACT_SAB[R698];
select one tab related by self->ACT_TAB[R698];
select one dab related by self->ACT_DAB[R698];
select one fnb related by self->ACT_FNB[R698];
select one opb related by self->ACT_OPB[R698];
select one brb related by self->ACT_BRB[R698];
select one psb related by self->ACT_PSB[R698];
select one pob related by self->ACT_POB[R698];
select one rsb related by self->ACT_RSB[R698];
select one rob related by self->ACT_ROB[R698];
if (not_empty sab)
  select one state related by sab->SM_ACT[R691]->SM_AH[R514]->SM_MOAH[R513]->SM_STATE[R511];
  select one clazz related by state->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
  if (empty clazz)
    select one clazz related by state->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
  end if;
  self.Label = clazz.Name + "::" + state.Name;
elif not_empty tab
  select one txn related by tab->SM_ACT[R688]->SM_AH[R514]->
                                                     SM_TAH[R513]->SM_TXN[R530];
  if (not_empty txn)
    self.Label = txn.get_name();
  else
    self.Label = "Internal error getting transition name";
  end if;
elif (not_empty dab)
  select one attr related by dab->O_DBATTR[R693]->O_BATTR[R107]->O_ATTR[R106];
  select one clazz related by attr->O_OBJ[R102];
  self.Label = clazz.Name + "::" + attr.Name;
elif (not_empty fnb)
  select one fn related by fnb->S_SYNC[R695];
  self.Label = fn.Name;
elif (not_empty opb)
  select one op related by opb->O_TFR[R696];
  select one clazz related by op->O_OBJ[R115];
  self.Label = clazz.Name + "::" + op.Name;
elif (not_empty brb)
  select one brg related by brb->S_BRG[R697];
  select one ee related by brg->S_EE[R19];
  self.Label = ee.Name + "::" + brg.Name;
elif(not_empty psb)
  select one proSig related by psb->SPR_PS[R686];
  select one irRef related by proSig->SPR_PEP[R4503]->C_P[R4501]->C_IR[R4009];
  select one port related by irRef->C_PO[R4016];
  self.Label = port.Name + "::" + irRef.interfaceName() + "::" + proSig.Name;
elif(not_empty pob)
  select one proOp related by pob->SPR_PO[R687];
  select one irRef related by proOp->SPR_PEP[R4503]->C_P[R4501]->C_IR[R4009];
  select one port related by irRef->C_PO[R4016];
  self.Label = port.Name + "::" + irRef.interfaceName() + "::" + proOp.Name;
elif(not_empty rsb)
  select one reqSig related by rsb->SPR_RS[R684];
  select one irRef related by reqSig->SPR_REP[R4502]->C_R[R4500]->C_IR[R4009];
  select one port related by irRef->C_PO[R4016];
  self.Label = port.Name + "::" + irRef.interfaceName() + "::" + reqSig.Name;
elif(not_empty rob)
  select one reqOp related by rob->SPR_RO[R685];
  select one irRef related by reqOp->SPR_REP[R4502]->C_R[R4500]->C_IR[R4009];
  select one port related by irRef->C_PO[R4016];
  self.Label = port.Name + "::" + irRef.interfaceName() + "::" + reqOp.Name;
else
  self.Label = "Error: Unknown Action type.";
end if;',
	1);
INSERT INTO O_BATTR
	VALUES ("14a50292-4172-4c58-a950-c8a7725c9078",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ATTR
	VALUES ("14a50292-4172-4c58-a950-c8a7725c9078",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"5985a8d6-17b7-4036-94be-bb04835e8b90",
	'Label',
	'',
	'',
	'Label',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"3a433661-4189-40c7-b3b5-eb9ad83e7e2b",
	"326149f3-37e4-4dae-aef4-ed7b5eb81e32",
	"702be1ef-bf6e-4062-be55-34203bbcef10",
	"e912f358-7859-4257-9b8d-904ea2b020f5",
	"16e3117c-2e2f-4f1d-85cd-b6ced1022172",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Block',
	'Block_ID',
	'R650.''has parsed outer''');
INSERT INTO R_RGO_PROXY
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"3a433661-4189-40c7-b3b5-eb9ad83e7e2b",
	"326149f3-37e4-4dae-aef4-ed7b5eb81e32",
	'../Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	0,
	"3a433661-4189-40c7-b3b5-eb9ad83e7e2b",
	"702be1ef-bf6e-4062-be55-34203bbcef10",
	'../Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("e912f358-7859-4257-9b8d-904ea2b020f5",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"d99d21d2-81d8-403b-9806-b4620234cdcc",
	"70a3e88d-3ee9-4e76-93d3-c4f447e317f4",
	1,
	'Block_ID');
INSERT INTO O_ATTR
	VALUES ("e912f358-7859-4257-9b8d-904ea2b020f5",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"14a50292-4172-4c58-a950-c8a7725c9078",
	'Parsed_Block_ID',
	'',
	'Parsed_',
	'Block_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0c7334f8-a17b-4b6f-81b7-2c764cff715e",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_BATTR
	VALUES ("0c7334f8-a17b-4b6f-81b7-2c764cff715e",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ATTR
	VALUES ("0c7334f8-a17b-4b6f-81b7-2c764cff715e",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	"e912f358-7859-4257-9b8d-904ea2b020f5",
	'ReturnFound',
	'Persistent:false',
	'',
	'ReturnFound',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_OIDA
	VALUES ("753cfb59-20b8-4f4f-a6a9-a7836988b5d4",
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	0,
	'Action_ID');
INSERT INTO O_ID
	VALUES (1,
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO O_ID
	VALUES (2,
	"395b247c-4d3a-4e4a-a7e4-6645a3a33371");
INSERT INTO PE_PE
	VALUES ("395b247c-4d3a-4e4a-a7e4-6645a3a33371",
	1,
	"5375dd69-33aa-4887-8270-296340adc334",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("5375dd69-33aa-4887-8270-296340adc334",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Body',
	'This subsystem abstracts the action itself, the blocks and statements
it contains together with the flow of control statements such as ''while'',
''for each'' and ''if''.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Body.xtuml');
