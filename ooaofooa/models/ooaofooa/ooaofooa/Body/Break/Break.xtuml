-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("6edc0adc-a052-48d8-b27e-4c7abc124a62",
	'Break',
	629,
	'ACT_BRK',
	'This class generates a break statement within a block.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("987c0985-5616-4741-af2c-1919cd0e6953",
	"6edc0adc-a052-48d8-b27e-4c7abc124a62",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// do nothing
delete object instance self;

',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("eca8cd66-02a9-4ec3-b8e0-68641e426102",
	"6edc0adc-a052-48d8-b27e-4c7abc124a62",
	'execute',
	'// WARNING: This function assumes that break and continue statements can only exist within a for each or while loop.
//          If a break or continue statement exists somewhere else, an infinite loop will occur.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Body:Break.execute()

// WARNING: This function assumes that break and continue statements can only exist within a for each or while loop.
//          If a break or continue statement exists somewhere else, an infinite loop will occur.

// Find the potentially nested block that is controlled by a for each or a while loop

found_loop_block = FALSE;
select one containing_block related by self->ACT_SMT[R603]->ACT_BLK[R602];

while (found_loop_block == FALSE)

  // Tell each block of OAL to stop executing up to the originating for each or while loop
  //containing_block.exitBlock();    

  // Test if break was called within a for loop
  select one for_statement related by containing_block->ACT_FOR[R605];
  if (not_empty for_statement)
    found_loop_block = TRUE;  
  else
    // See if break was called within a while loop
    select one while_statement related by containing_block->ACT_WHL[R608];
    if (not_empty while_statement)
      found_loop_block = TRUE;
    else 
  
      // This block isn''t the source of the while or for loop.  Find a nested control structure block.
      select one if_statement related by containing_block->ACT_IF[R607];
      select one elif_statement related by containing_block->ACT_EL[R658];
      select one else_statement related by containing_block->ACT_E[R606];
    
      if (not_empty if_statement)
        select one containing_block related by if_statement->ACT_SMT[R603]->ACT_BLK[R602];
      elif (not_empty elif_statement)
        select one containing_block related by elif_statement->ACT_SMT[R603]->ACT_BLK[R602];
      elif (not_empty else_statement)
        select one containing_block related by else_statement->ACT_SMT[R603]->ACT_BLK[R602];
      end if;
    end if;
  end if;
end while;

// Abandon all processing in all blocks below the loop block and stop iterating
select one for_statement related by containing_block->ACT_FOR[R605];
select one while_statement related by containing_block->ACT_WHL[R608];
select one statement related by self->ACT_SMT[R603];
if (not_empty for_statement)
  select any stack_frame from instances of I_STF where
                              (selected.Stack_Frame_ID == param.stack_frame_id);
  // Abandon set iteration point
  // Get the local reference to the loop variable
  select any loop_variable_local_ref related by stack_frame->
             I_BSF[R2923]->L_LCL[R3000]->L_LCR[R3001] where selected.Local_ID == 
           for_statement.getLocalLoopVarID(stack_frame_id:param.stack_frame_id);
  select one set_instance_in_ref related by 
                                          loop_variable_local_ref->L_IIR[R3012];
  // Unrelating the loop var from the instance in reference resets the iteration
  unrelate loop_variable_local_ref from set_instance_in_ref across R3012;
  // Pop up to for each block level
  select one target_statement related by for_statement->ACT_SMT[R603];
  select one containing_block related by target_statement->ACT_BLK[R602];
  statement.popUpToBlock(block_id:containing_block.Block_ID,
                                           stack_frame_id:param.stack_frame_id);
  target_statement.setupNextStatement(stack_frame_id:param.stack_frame_id);
elif (not_empty while_statement)
  select one target_statement related by while_statement->ACT_SMT[R603];
  select one containing_block related by target_statement->ACT_BLK[R602];
  statement.popUpToBlock(block_id:containing_block.Block_ID,
                                           stack_frame_id:param.stack_frame_id);
  target_statement.setupNextStatement(stack_frame_id:param.stack_frame_id);
end if;',
	1,
	'',
	"987c0985-5616-4741-af2c-1919cd0e6953");
INSERT INTO O_TPARM
	VALUES ("a9f5a495-5dd8-4dec-812b-ac807bfc1771",
	"eca8cd66-02a9-4ec3-b8e0-68641e426102",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_REF
	VALUES ("6edc0adc-a052-48d8-b27e-4c7abc124a62",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"5cc419db-8a23-493d-ac30-a432f8c90394",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	"a09847f1-fce3-46a6-bdb6-1e7d9ee9a891",
	"9041842c-6901-4ccf-8371-19d06a11d66b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Statement',
	'Statement_ID',
	'R603');
INSERT INTO R_RGO_PROXY
	VALUES ("6edc0adc-a052-48d8-b27e-4c7abc124a62",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"5cc419db-8a23-493d-ac30-a432f8c90394",
	'../Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	'../Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("a09847f1-fce3-46a6-bdb6-1e7d9ee9a891",
	"6edc0adc-a052-48d8-b27e-4c7abc124a62",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'../Statement/Statement.xtuml');
INSERT INTO O_ATTR
	VALUES ("a09847f1-fce3-46a6-bdb6-1e7d9ee9a891",
	"6edc0adc-a052-48d8-b27e-4c7abc124a62",
	"00000000-0000-0000-0000-000000000000",
	'Statement_ID',
	'

',
	'',
	'Statement_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"6edc0adc-a052-48d8-b27e-4c7abc124a62");
INSERT INTO O_OIDA
	VALUES ("a09847f1-fce3-46a6-bdb6-1e7d9ee9a891",
	"6edc0adc-a052-48d8-b27e-4c7abc124a62",
	0,
	'Statement_ID');
INSERT INTO O_ID
	VALUES (1,
	"6edc0adc-a052-48d8-b27e-4c7abc124a62");
INSERT INTO O_ID
	VALUES (2,
	"6edc0adc-a052-48d8-b27e-4c7abc124a62");
INSERT INTO PE_PE
	VALUES ("6edc0adc-a052-48d8-b27e-4c7abc124a62",
	1,
	"5375dd69-33aa-4887-8270-296340adc334",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("5375dd69-33aa-4887-8270-296340adc334",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Body',
	'This subsystem abstracts the action itself, the blocks and statements
it contains together with the flow of control statements such as ''while'',
''for each'' and ''if''.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Body.xtuml');
