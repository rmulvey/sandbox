-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	'Unrelate Using',
	616,
	'ACT_URU',
	'This class represents a statement that unrelates two instances that were related together, using a third as a link class instance.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("da623c55-4e90-44d5-abc8-869467e57aaa",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one one_var related by self->V_VAR[R622];
if ( not_empty one_var )
  unrelate self from one_var across R622;
end if;
select one other_var related by self->V_VAR[R623];
if ( not_empty other_var )
  unrelate self from other_var across R623;
end if;
select one assoc_var related by self->V_VAR[R624];
if ( not_empty assoc_var )
  unrelate self from assoc_var across R624;
end if;
select one rel related by self->R_REL[R656];
if ( not_empty rel )
  unrelate self from rel across R656;
end if;
delete object instance self;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("eee80e3f-67a1-4af6-82f3-dd7f816882ae",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	'execute',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Relate and Unlrelate:Unrelate Using(ACT_URU).execute()
select one body related by self->V_VAR[R622]->ACT_BLK[R823]->ACT_ACT[R601];
// unrelate <source instance handle> from <destination instance handle> 
// across <relationship specification> using <associative instance handle>; 

select one source_handle related by self->V_VAR[R623]->V_INT[R814];
select one destination_handle related by self->V_VAR[R622]->V_INT[R814];
select one associative_handle related by self->V_VAR[R624]->V_INT[R814];

// Grab the stack frame
select any stack_frame from instances of I_STF where (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
    //Invalid stack frame ID!
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Unrelate Using.execute: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
    select any stack from instances of I_STACK;
    select one stack_frame related by stack->I_STF[R2929];
end if;

// Set value to this block with the right type so we can use it later.  The value here is useless.
select any source_local_reference from instances of L_LCR;
select any destination_local_reference from instances of L_LCR;
select any associative_local_reference from instances of L_LCR;

// Get all of the block in stack frames that exist for the stack frame
select many block_in_stack_frames related by stack_frame->I_BSF[R2923];
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any source_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == source_handle.Var_ID;
  if (not_empty source_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

// Now do the same to find the correct local reference to use for the destination side of this relate statement
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any destination_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == destination_handle.Var_ID;
  if (not_empty destination_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

// Now do the same to find the correct local reference to use for the associative piece of this relate statement
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any associative_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == associative_handle.Var_ID;
  if (not_empty associative_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;


// Now that we know the correct block in stack frame to use for both the source and destination instances.  Get them.
select any source related by source_local_reference->
                         L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select any destination related by destination_local_reference->
                         L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select any associative related by associative_local_reference->
                         L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select one relationship_spec related by self->R_REL[R656];

select many links related by relationship_spec->I_LNK[R2904];
select any matchingLink related by relationship_spec->I_LNK[R2904] where
                                       selected.Link_ID == GD::NULL_UNIQUE_ID();
for each link in links
  select one sourceParticipant related by link->I_LIP[R2901]->I_INS[R2958];
  select one destinationParticipant related by link->I_LIP[R2902]->I_INS[R2958];
  select one associativeParticipant related by link->I_LIP[R2903]->I_INS[R2958];
  if(not_empty associative)
    // See if this is a link between our source and destination
    if ( associativeParticipant == associative )
      // There is exactly one associative instance per link.
      // We can therefore unambiguously remove the link
      matchingLink = link;
      // See if this is a link between our source and destination
    end if;
  elif ( sourceParticipant == source )
    if(not_empty destination)
      if ( destinationParticipant == destination )
        matchingLink = link;
      end if;
    else
      // the destination is empty and the source matched, remove the link
      link.dispose();
      // incomplete match, this may not be our link. Keep looking.
    end if;
  elif ( destinationParticipant == destination )
    if(not_empty source)
      if ( sourceParticipant == source )
        // Found the link. Now destroy it.
        matchingLink = link;
      end if;
    else
      // the source is empty and the desination matched, remove the link
      link.dispose();
      // incomplete match, this may not be our link. Keep looking.
    end if;
  end if;
end for;
halting = false;
if (PREF::getBoolean(name:"bridgepoint_prefs_enable_verifier_audit")== true)
  auditSev = PREF::getInteger(name:"bridgepoint_prefs_enable_unrelate_audit"); 
  if auditSev != 0  // 0 == Ignore
    severity = "";
    if empty matchingLink
      severity = "Warning";
      assocPhrase = "";
      if (self.relationship_phrase != "")
        assocPhrase = " (" + self.relationship_phrase + ")";
      end if;
      postFixMsg = "";
      if auditSev == 2 // 2 == FATAL
        severity = "FATAL";
        select one stack related by stack_frame->I_STACK[R2929];
        if stack.runState == RunStateType::Running
          // Only suspend execution if running, i.e. allow stepping over
          stack.suspendReason = "Halted on illegal link instance " +
                  "population on " + relationship_spec.get_name() + assocPhrase;
          stack.runState = RunStateType::Suspended;
          postFixMsg = GD::newline() + "Execution Halted. (Problem detected at previous statement)";
          halting = true;
        end if;
      else // 1 == Warning
        select one statement related by self->ACT_SMT[R603];
        postFixMsg = " at: " + statement.Label;
      end if;
      message = severity + " Unrelate: Instances not related on " +
                        relationship_spec.get_name() + assocPhrase + postFixMsg;
      USER::logError(msg:message,path:body.getPath());
    end if; // a matching link was not found
  end if; // audit is do not ignore
end if; // audit enabled
if not halting
  if not_empty matchingLink
    matchingLink.dispose();
  end if;
end if;',
	1,
	'',
	"da623c55-4e90-44d5-abc8-869467e57aaa");
INSERT INTO O_TPARM
	VALUES ("4449dc41-76e2-4a0f-8875-841918b61528",
	"eee80e3f-67a1-4af6-82f3-dd7f816882ae",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_REF
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"eb3d64a2-63d8-4c7c-9145-7638761886c7",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	"321e71f4-7960-40b1-b0f1-736b949d3689",
	"442facff-9048-497f-bb59-8bf49c0b1871",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Statement',
	'Statement_ID',
	'R603');
INSERT INTO R_RGO_PROXY
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"eb3d64a2-63d8-4c7c-9145-7638761886c7",
	'../../Body/Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	'../../Body/Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("321e71f4-7960-40b1-b0f1-736b949d3689",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'../../Body/Statement/Statement.xtuml');
INSERT INTO O_ATTR
	VALUES ("321e71f4-7960-40b1-b0f1-736b949d3689",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"00000000-0000-0000-0000-000000000000",
	'Statement_ID',
	'

',
	'',
	'Statement_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"687e1fe5-04f3-49cf-8e89-a560ef8d5046",
	"a4479536-34f9-41ff-b0e8-14dbd17d4dc3",
	"f617b082-7a6a-4f73-be09-bbeb9fc14d13",
	"04c6e066-12a2-4d11-9c2a-a89e213fc3dc",
	"1e948bba-75a2-49ed-b66f-fcd9703b4b45",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R622.''one''');
INSERT INTO R_RGO_PROXY
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"687e1fe5-04f3-49cf-8e89-a560ef8d5046",
	"a4479536-34f9-41ff-b0e8-14dbd17d4dc3",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"687e1fe5-04f3-49cf-8e89-a560ef8d5046",
	"f617b082-7a6a-4f73-be09-bbeb9fc14d13",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("04c6e066-12a2-4d11-9c2a-a89e213fc3dc",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	'../../Value/Variable/Variable.xtuml');
INSERT INTO O_ATTR
	VALUES ("04c6e066-12a2-4d11-9c2a-a89e213fc3dc",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"321e71f4-7960-40b1-b0f1-736b949d3689",
	'One_Side_Var_ID',
	'

',
	'One_Side_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"d8131ab6-1383-49ec-a71b-0bfd96e6a99b",
	"b4e033f0-44e7-4b75-badd-24f20958547d",
	"9519824d-bbdb-4211-9f58-48d9d3486779",
	"72b7917f-8619-432f-96bb-63140c547ca1",
	"2e109a34-f4dc-4100-92d9-61c3edeeddb4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R623.''other''');
INSERT INTO R_RGO_PROXY
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"d8131ab6-1383-49ec-a71b-0bfd96e6a99b",
	"b4e033f0-44e7-4b75-badd-24f20958547d",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"d8131ab6-1383-49ec-a71b-0bfd96e6a99b",
	"9519824d-bbdb-4211-9f58-48d9d3486779",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("72b7917f-8619-432f-96bb-63140c547ca1",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_ATTR
	VALUES ("72b7917f-8619-432f-96bb-63140c547ca1",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"04c6e066-12a2-4d11-9c2a-a89e213fc3dc",
	'Other_Side_Var_ID',
	'

',
	'Other_Side_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"b597a5b1-3106-433b-8315-ed145a80d3a5",
	"1a4e0362-77d6-4838-99ad-b052fa8f8b74",
	"bbbf3a99-2b41-4248-b1ab-aebea2c248cb",
	"1f5537eb-5394-4a88-a417-074ab6890b71",
	"7915b06e-812e-42fd-9045-0be40e962d6f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R624.''using''');
INSERT INTO R_RGO_PROXY
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"b597a5b1-3106-433b-8315-ed145a80d3a5",
	"1a4e0362-77d6-4838-99ad-b052fa8f8b74",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"b597a5b1-3106-433b-8315-ed145a80d3a5",
	"bbbf3a99-2b41-4248-b1ab-aebea2c248cb",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("1f5537eb-5394-4a88-a417-074ab6890b71",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_ATTR
	VALUES ("1f5537eb-5394-4a88-a417-074ab6890b71",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"72b7917f-8619-432f-96bb-63140c547ca1",
	'Associative_Var_ID',
	'

',
	'Associative_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c29e4712-09f1-4b2c-9610-e4661d08dff8",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_BATTR
	VALUES ("c29e4712-09f1-4b2c-9610-e4661d08dff8",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_ATTR
	VALUES ("c29e4712-09f1-4b2c-9610-e4661d08dff8",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"1f5537eb-5394-4a88-a417-074ab6890b71",
	'relationship_phrase',
	'Full Name: Relationship Phrase
Specifies the relationship phrase at the target end of the association.
Essential for disambiguating the navigation direction of reflexive
associations.',
	'',
	'relationship_phrase',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("da90a360-546c-43d9-9666-6e5700a07191",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_BATTR
	VALUES ("da90a360-546c-43d9-9666-6e5700a07191",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_ATTR
	VALUES ("da90a360-546c-43d9-9666-6e5700a07191",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"af0b167d-c097-40d2-89d6-743426211bdd",
	'associationNumberLineNumber',
	'',
	'',
	'associationNumberLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("90f7e292-8239-434b-9430-a4d34cd2b1dc",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_BATTR
	VALUES ("90f7e292-8239-434b-9430-a4d34cd2b1dc",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_ATTR
	VALUES ("90f7e292-8239-434b-9430-a4d34cd2b1dc",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"da90a360-546c-43d9-9666-6e5700a07191",
	'associationNumberColumn',
	'',
	'',
	'associationNumberColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bfbb6383-b329-4b1e-a706-1dfca5d94c05",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_BATTR
	VALUES ("bfbb6383-b329-4b1e-a706-1dfca5d94c05",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_ATTR
	VALUES ("bfbb6383-b329-4b1e-a706-1dfca5d94c05",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"90f7e292-8239-434b-9430-a4d34cd2b1dc",
	'associationPhraseLineNumber',
	'',
	'',
	'associationPhraseLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("47db69f3-3e51-42cb-8e24-351814601ea6",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_BATTR
	VALUES ("47db69f3-3e51-42cb-8e24-351814601ea6",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_ATTR
	VALUES ("47db69f3-3e51-42cb-8e24-351814601ea6",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"bfbb6383-b329-4b1e-a706-1dfca5d94c05",
	'associationPhraseColumn',
	'',
	'',
	'associationPhraseColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"b7a04cbe-22f6-4335-9c3c-d07de172d638",
	0,
	"9c1944f6-6264-4150-8eaf-e943918eb019",
	"bc453a97-8766-43af-a36b-f2927dd8abe1",
	"fa87cf4f-ea15-460e-bb7b-de001dc08766",
	"d98e023c-09f2-4ebe-9ecc-06f827a7396b",
	"af0b167d-c097-40d2-89d6-743426211bdd",
	"ec5c7c85-ea14-428e-8ecc-7978c403ae30",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Association',
	'Rel_ID',
	'R656.''destroys''');
INSERT INTO R_RGO_PROXY
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"bc453a97-8766-43af-a36b-f2927dd8abe1",
	"fa87cf4f-ea15-460e-bb7b-de001dc08766",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9c1944f6-6264-4150-8eaf-e943918eb019",
	"b7a04cbe-22f6-4335-9c3c-d07de172d638",
	0,
	"bc453a97-8766-43af-a36b-f2927dd8abe1",
	"d98e023c-09f2-4ebe-9ecc-06f827a7396b",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("af0b167d-c097-40d2-89d6-743426211bdd",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("af0b167d-c097-40d2-89d6-743426211bdd",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	"c29e4712-09f1-4b2c-9610-e4661d08dff8",
	'Rel_ID',
	'

',
	'',
	'Rel_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_OIDA
	VALUES ("321e71f4-7960-40b1-b0f1-736b949d3689",
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	0,
	'Statement_ID');
INSERT INTO O_ID
	VALUES (1,
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO O_ID
	VALUES (2,
	"b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91");
INSERT INTO PE_PE
	VALUES ("b324e5aa-23ca-46c5-a6cf-f5e7a1cf5f91",
	1,
	"f9b356b6-693b-4350-92c1-1341c5db2caa",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("f9b356b6-693b-4350-92c1-1341c5db2caa",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Relate And Unrelate',
	'Captures  the concepts of relating instances together. Also captures
unrelate and covers relations with link classes.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Relate And Unrelate.xtuml');
