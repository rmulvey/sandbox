-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	'Relate',
	608,
	'ACT_REL',
	'This class represents a statement that relates two instances together.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("bc8e6e9f-b59e-43e4-9e79-629d51aa2f81",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one one_var related by self->V_VAR[R615];
if ( not_empty one_var )
  unrelate self from one_var across R615;
end if;
select one other_var related by self->V_VAR[R616];
if ( not_empty other_var )
  unrelate self from other_var across R616;
end if;
select one rel related by self->R_REL[R653];
if ( not_empty rel )
  unrelate self from rel across R653;
end if;
delete object instance self;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("c35f69cf-2959-40bd-b18f-ee5e9b3971d8",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	'execute',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Relate and Unlrelate:Relate(ACT_REL).execute()
select one body related by self->V_VAR[R615]->ACT_BLK[R823]->ACT_ACT[R601];
// relate <source instance handle> to <destination instance handle> across
// <relationship spectification>

select one source_handle related by self->V_VAR[R615]->V_INT[R814];
select one destination_handle related by self->V_VAR[R616]->V_INT[R814];

// Grab the stack frame
select any stack_frame from instances of I_STF where (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
    //Invalid stack frame ID!
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Relate.execute: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
    select any stack from instances of I_STACK;
    select one stack_frame related by stack->I_STF[R2929];
end if;

// Set value to this block with the right type so we can use it later.  The value here is useless.
select any source_local_reference from instances of L_LCR;
select any destination_local_reference from instances of L_LCR;

// Get all of the block in stack frames that exist for the stack frame
select many block_in_stack_frames related by stack_frame->I_BSF[R2923];
for each block_in_stack_frame in block_in_stack_frames
  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any source_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == source_handle.Var_ID;
  if (not_empty source_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

// Now do the same to find the correct local reference to use for the destination side of this relate statement
for each block_in_stack_frame in block_in_stack_frames
  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any destination_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == destination_handle.Var_ID;
  if (not_empty destination_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

// Now that we know the correct block in stack frame to use for both the source and destination instances.  Get them.
select any source related by source_local_reference->L_LCL[R3001]->
        RV_RVL[R3306]->RV_SMV[R3300]->RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select any destination related by destination_local_reference->
                           L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select one relationship_spec related by self->R_REL[R653];

// Compute the sense of the relation, if any
reflexive = relationship_spec.is_reflexive();
rel_phrase = GD::strip_tics(value:self.relationship_phrase);


select any srcIil from instances of I_LIP
                                where (selected.Rel_ID == GD::NULL_UNIQUE_ID());
select any dstIil from instances of I_LIP
                                where (selected.Rel_ID == GD::NULL_UNIQUE_ID());

srcMultiplicity = 0;
if not_empty source
  // create the link participation
  create object instance srcIil of I_LIP;
  relate srcIil to source across R2958;
  relate srcIil to relationship_spec across R2959;
  
  select one sourceClass related by source->CSME_CIE[R2962]->O_OBJ[R2961];
  select many srcClassInAssociations related by sourceClass->
                             R_OIR[R201] where selected.Rel_ID == srcIil.Rel_ID;
  select any srcRgo related by srcClassInAssociations->R_RGO[R203];
  if reflexive
    select one form related by srcRgo->
                             R_FORM[R205] where selected.Txt_Phrs != rel_phrase;
    select one srcRgo related by form->R_RGO[R205];
    // If the rel phrase matches, srcRgo will be empty above. If not, srcRgo
    // will be unchanged and we will proceed to test the correct end.
  end if;
  if not_empty srcRgo  // There can only be one
    select one form related by srcRgo->R_FORM[R205];
    if not_empty form
      srcMultiplicity = form.Mult;
      // No need to test for subype as below,
      // because we''re not setting relatingFwd here.
    end if;
  else
    select any srcPart related by srcClassInAssociations->
                                                      R_RTO[R203]->R_PART[R204];
    if reflexive
      select any srcPart related by srcClassInAssociations->
                R_RTO[R203]->R_PART[R204] where selected.Txt_Phrs != rel_phrase;
    end if;
    if not_empty srcPart
      srcMultiplicity = srcPart.Mult;
    end if;
  end if;
end if;
relatingFwd = true;
dstMultiplicity = 0;
if not_empty destination
  // create the link participation
  create object instance dstIil of I_LIP;
  relate dstIil to destination across R2958;
  relate dstIil to relationship_spec across R2959;
  
  select one destClass related by destination->CSME_CIE[R2962]->O_OBJ[R2961];
  select many dstClassInAssociations related by destClass->
                             R_OIR[R201] where selected.Rel_ID == dstIil.Rel_ID;
  select any dstRgo related by dstClassInAssociations->R_RGO[R203];
  if reflexive
    select one form related by dstRgo->
                             R_FORM[R205] where selected.Txt_Phrs == rel_phrase;
    select one dstRgo related by form->R_RGO[R205];
    // If the rel phrase matches, dstRgo will be unchanged above. If not,
    // dstRgo will be empty and we will proceed to test the correct end.
    // This test does not interfere with subtype detection below, because
    // subtype/supertype associations cannot be reflexive.
  end if;
  if not_empty dstRgo  // There can only be one
    select one form related by dstRgo->R_FORM[R205];
    if not_empty form
      // The destination is playing the role of formalizer in this association,
      // so we are relating backwards across the association.
      relatingFwd = false;
      dstMultiplicity = form.Mult;
    else
      select one subType related by  dstRgo->R_SUB[R205];
      if not_empty subType
        // Multiplicity is already correct: exactly one.
        relatingFwd = false;
      end if;
    end if;
  else
    select any dstPart related by dstClassInAssociations->
                                                      R_RTO[R203]->R_PART[R204];
    if reflexive
      select any dstPart related by dstClassInAssociations->
                R_RTO[R203]->R_PART[R204] where selected.Txt_Phrs == rel_phrase;
    end if;
    if not_empty dstPart
      dstMultiplicity = dstPart.Mult;
      if not relationship_spec.isFormalized()
        // If we''re not formalized, then we assume the first participant
        // found is going to play the role of the formalizer. Thus, if
        // the destination rto participant is playing the formalizer
        // role, then we are relating backwards across the association.
        select any informalPart related by relationship_spec->
                                                     R_SIMP[R206]->R_PART[R207];
        if dstPart == informalPart
          relatingFwd = false; // The participant is playing a formalizer role.
        end if;
      end if;
    // else it''s a supertype, we''re relating forward, no action needed.
    end if;
  end if;
end if;
if (reflexive == true and relatingFwd == false)
  swap = srcMultiplicity;
  srcMultiplicity = dstMultiplicity;
  dstMultiplicity = swap;
end if;

populationError = false;
if (PREF::getBoolean(name:"bridgepoint_prefs_enable_verifier_audit")== true)
  auditSev = PREF::getInteger(name:"bridgepoint_prefs_enable_relate_audit"); 
  if auditSev != 0  // 0 == Ignore
    message = "";
    if empty source or empty destination
      populationError = true;
      message = "Empty instance";
      if empty source and empty destination
       message = message + "s";
      end if;
      message = message + " being related on";
    else
      if dstMultiplicity == 0 // 0 == Multiplicity one
        linkCard = 0;
        if relatingFwd
          select many fromLinks related by source->I_LIP[R2958]->I_LNK[R2901]
                            where (selected.Rel_ID == relationship_spec.Rel_ID);
          linkCard = cardinality fromLinks;
        else
          select many toLinks related by source->I_LIP[R2958]->I_LNK[R2902]
                            where (selected.Rel_ID == relationship_spec.Rel_ID);
          linkCard = cardinality toLinks;
        end if;
        if linkCard > 0 
          populationError = true;
          message = "Already related on";
        end if; // Link cardinality > 1
      end if; // Destination multiplicity is ''one''
      if srcMultiplicity == 0 // 0 == Multiplicity one
        linkCard = 0;
        if relatingFwd
          select many toLinks related by destination->I_LIP[R2958]->I_LNK[R2902]
                            where (selected.Rel_ID == relationship_spec.Rel_ID);
          linkCard = cardinality toLinks;
        else
          select many fromLinks related by destination->I_LIP[R2958]
             ->I_LNK[R2901] where (selected.Rel_ID == relationship_spec.Rel_ID);
          linkCard = cardinality fromLinks;
        end if;
        if linkCard > 0 
          populationError = true;
          message = "Already related on";
        end if; // Link cardinality > 1
      end if; // Source multiplicity is ''one''
    end if; // instances are not deleted
    if populationError
      severity = "Warning";
      assocPhrase = "";
      if (rel_phrase != "")
        assocPhrase = " (" + rel_phrase + ")";
      end if;
      postFixMsg = "";
      if auditSev == 2 // 2 == FATAL
        severity = "FATAL";
        select one stack related by stack_frame->I_STACK[R2929];
        if stack.runState == RunStateType::Running
          // Only suspend execution if running, i.e. allow stepping over
          stack.suspendReason = "Halted on illegal link instance " +
                  "population on " + relationship_spec.get_name() + assocPhrase;
          stack.runState = RunStateType::Suspended;
          postFixMsg = GD::newline() + "Execution Halted. (Problem detected at previous statement)";
        end if; // stack is running
      else // 1 == Warning
        select one statement related by self->ACT_SMT[R603];
        postFixMsg = " at: " + statement.Label;
      end if; // is fatal error selected
      logMessage = severity + " Relate: " + message + " " +
                        relationship_spec.get_name() + assocPhrase + postFixMsg;
      USER::logError(msg:logMessage,path:body.getPath());
    end if; // population error detected
  end if; // audit is do not ignore
end if; // audit enabled
if not populationError
  // Relate the given source and destination handles from the statement to link
  // Create a link for this association
  create object instance link of I_LNK;

  // Relate that link to our association
  relate relationship_spec to link across R2904;

  if (relatingFwd)
    relate link to srcIil across R2901;
    relate link to dstIil across R2902;
  else
    relate link to dstIil across R2901;
    relate link to srcIil across R2902;
  end if;
end if;
',
	1,
	'',
	"bc8e6e9f-b59e-43e4-9e79-629d51aa2f81");
INSERT INTO O_TPARM
	VALUES ("327aec8e-17c8-4c5f-a972-68e71e85d8f5",
	"c35f69cf-2959-40bd-b18f-ee5e9b3971d8",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_REF
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"4e52c196-5eb4-4abe-ab49-fd17b77d0ba7",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	"b33d08ab-2c9b-4eb1-b1c4-5a80d671428c",
	"59fd63b0-739d-4f08-83d0-74790e05e253",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Statement',
	'Statement_ID',
	'R603');
INSERT INTO R_RGO_PROXY
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"4e52c196-5eb4-4abe-ab49-fd17b77d0ba7",
	'../../Body/Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	'../../Body/Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("b33d08ab-2c9b-4eb1-b1c4-5a80d671428c",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'../../Body/Statement/Statement.xtuml');
INSERT INTO O_ATTR
	VALUES ("b33d08ab-2c9b-4eb1-b1c4-5a80d671428c",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"00000000-0000-0000-0000-000000000000",
	'Statement_ID',
	'

',
	'',
	'Statement_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"78200c84-d65d-4ad2-b504-403729fee939",
	"4c1581c1-96e4-49dd-82aa-635d5edc37ff",
	"930936da-32aa-419d-9e54-e84afa26eda9",
	"a7b03f68-9b70-4f43-b056-d1e76e7fedb4",
	"0a969748-bef5-43cf-b301-7c075d3584d4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R615.''one''');
INSERT INTO R_RGO_PROXY
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"78200c84-d65d-4ad2-b504-403729fee939",
	"4c1581c1-96e4-49dd-82aa-635d5edc37ff",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"78200c84-d65d-4ad2-b504-403729fee939",
	"930936da-32aa-419d-9e54-e84afa26eda9",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("a7b03f68-9b70-4f43-b056-d1e76e7fedb4",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	'../../Value/Variable/Variable.xtuml');
INSERT INTO O_ATTR
	VALUES ("a7b03f68-9b70-4f43-b056-d1e76e7fedb4",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"b33d08ab-2c9b-4eb1-b1c4-5a80d671428c",
	'One_Side_Var_ID',
	'

',
	'One_Side_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"5521bd5e-acd1-4d35-a104-4751f8e5317a",
	"cbafb509-4253-4ece-b40e-4a5ab0bf3e67",
	"45bd4d18-479f-4777-a98e-5122e0101aaf",
	"d3dbb658-a72f-49eb-ae62-cc10a1aeb139",
	"1bb59251-14a6-41c2-ac83-20f19991cdf7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R616.''other''');
INSERT INTO R_RGO_PROXY
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"5521bd5e-acd1-4d35-a104-4751f8e5317a",
	"cbafb509-4253-4ece-b40e-4a5ab0bf3e67",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5521bd5e-acd1-4d35-a104-4751f8e5317a",
	"45bd4d18-479f-4777-a98e-5122e0101aaf",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("d3dbb658-a72f-49eb-ae62-cc10a1aeb139",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_ATTR
	VALUES ("d3dbb658-a72f-49eb-ae62-cc10a1aeb139",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"a7b03f68-9b70-4f43-b056-d1e76e7fedb4",
	'Other_Side_Var_ID',
	'

',
	'Other_Side_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("676db312-e9df-406f-8faf-7cebd1aaf36d",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_BATTR
	VALUES ("676db312-e9df-406f-8faf-7cebd1aaf36d",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_ATTR
	VALUES ("676db312-e9df-406f-8faf-7cebd1aaf36d",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"d3dbb658-a72f-49eb-ae62-cc10a1aeb139",
	'relationship_phrase',
	'Full Name: Relationship Phrase
Specifies the relationship phrase at the target end of the association.
Essential for disambiguating the navigation direction of reflexive
associations.',
	'',
	'relationship_phrase',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("109bc1df-4609-4a0a-90b9-a689518a8b36",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_BATTR
	VALUES ("109bc1df-4609-4a0a-90b9-a689518a8b36",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_ATTR
	VALUES ("109bc1df-4609-4a0a-90b9-a689518a8b36",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"dcb198e2-9b3c-4531-9290-340ab6e8cbfe",
	'associationNumberLineNumber',
	'',
	'',
	'associationNumberLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d0231293-06cc-462f-bb47-de6bd09ab3b5",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_BATTR
	VALUES ("d0231293-06cc-462f-bb47-de6bd09ab3b5",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_ATTR
	VALUES ("d0231293-06cc-462f-bb47-de6bd09ab3b5",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"109bc1df-4609-4a0a-90b9-a689518a8b36",
	'associationNumberColumn',
	'',
	'',
	'associationNumberColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b04f8120-37f2-4f93-a46a-994b007c9774",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_BATTR
	VALUES ("b04f8120-37f2-4f93-a46a-994b007c9774",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_ATTR
	VALUES ("b04f8120-37f2-4f93-a46a-994b007c9774",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"d0231293-06cc-462f-bb47-de6bd09ab3b5",
	'associationPhraseLineNumber',
	'',
	'',
	'associationPhraseLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d4579906-3713-4c38-9e29-bd7f80011c23",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_BATTR
	VALUES ("d4579906-3713-4c38-9e29-bd7f80011c23",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_ATTR
	VALUES ("d4579906-3713-4c38-9e29-bd7f80011c23",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"b04f8120-37f2-4f93-a46a-994b007c9774",
	'associationPhraseColumn',
	'',
	'',
	'associationPhraseColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"b7a04cbe-22f6-4335-9c3c-d07de172d638",
	0,
	"9c1944f6-6264-4150-8eaf-e943918eb019",
	"a3420595-ce93-4193-8117-ea58a15255a6",
	"b2d4af34-90a3-427d-a21d-3cf00976cbac",
	"fa9a9c34-006b-4b0e-846c-bc891a2dc98a",
	"dcb198e2-9b3c-4531-9290-340ab6e8cbfe",
	"2b92f170-eb42-4dd9-a47a-695170bfd280",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Association',
	'Rel_ID',
	'R653.''creates''');
INSERT INTO R_RGO_PROXY
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"a3420595-ce93-4193-8117-ea58a15255a6",
	"b2d4af34-90a3-427d-a21d-3cf00976cbac",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9c1944f6-6264-4150-8eaf-e943918eb019",
	"b7a04cbe-22f6-4335-9c3c-d07de172d638",
	0,
	"a3420595-ce93-4193-8117-ea58a15255a6",
	"fa9a9c34-006b-4b0e-846c-bc891a2dc98a",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("dcb198e2-9b3c-4531-9290-340ab6e8cbfe",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("dcb198e2-9b3c-4531-9290-340ab6e8cbfe",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	"676db312-e9df-406f-8faf-7cebd1aaf36d",
	'Rel_ID',
	'

',
	'',
	'Rel_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_OIDA
	VALUES ("b33d08ab-2c9b-4eb1-b1c4-5a80d671428c",
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	0,
	'Statement_ID');
INSERT INTO O_ID
	VALUES (1,
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO O_ID
	VALUES (2,
	"8cdd457c-e3c6-454c-a2b2-206de562e3b7");
INSERT INTO PE_PE
	VALUES ("8cdd457c-e3c6-454c-a2b2-206de562e3b7",
	1,
	"f9b356b6-693b-4350-92c1-1341c5db2caa",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("f9b356b6-693b-4350-92c1-1341c5db2caa",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Relate And Unrelate',
	'Captures  the concepts of relating instances together. Also captures
unrelate and covers relations with link classes.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Relate And Unrelate.xtuml');
