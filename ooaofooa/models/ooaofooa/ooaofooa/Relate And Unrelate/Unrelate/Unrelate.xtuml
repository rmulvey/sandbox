-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	'Unrelate',
	609,
	'ACT_UNR',
	'This class represents a statement that unrelates two instances that were related together.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("d638a12f-0cee-4e16-92a6-d14e210ec8a3",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one one_var related by self->V_VAR[R620];
if ( not_empty one_var )
  unrelate self from one_var across R620;
end if;
select one other_var related by self->V_VAR[R621];
if ( not_empty other_var )
  unrelate self from other_var across R621;
end if;
select one rel related by self->R_REL[R655];
if ( not_empty rel )
  unrelate self from rel across R655;
end if;
delete object instance self;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("f976feea-11e7-4acc-9928-e91179065a6a",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	'execute',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Relate and Unlrelate:Unrelate(ACT_UNR).execute()
select one body related by self->V_VAR[R620]->ACT_BLK[R823]->ACT_ACT[R601];
// unrelate <source instance handle> to <destination instance handle> across
// <relationship spectification>

select one source_handle related by self->V_VAR[R620]->V_INT[R814];
select one destination_handle related by self->V_VAR[R621]->V_INT[R814];

// Grab the stack frame
select any stack_frame from instances of I_STF where (selected.Stack_Frame_ID == param.stack_frame_id);
if (empty stack_frame)
	//Invalid stack frame ID!
	pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Error in Relate And Unrelate.execute: Invalid stack frame id used. Using random top stack frame.",path:pathMsg);
	select any stack from instances of I_STACK;
	select one stack_frame related by stack->I_STF[R2929];
end if;

// Set value to this block with the right type so we can use it later.  The value here is useless.
select any source_local_reference from instances of L_LCR;
select any destination_local_reference from instances of L_LCR;

// Get all of the block in stack frames that exist for the stack frame
select many block_in_stack_frames related by stack_frame->I_BSF[R2923];
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any source_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == source_handle.Var_ID;
  if (not_empty source_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

// Now do the same to find the correct local reference to use for the destination side of this relate statement
for each block_in_stack_frame in block_in_stack_frames

  // Find the one local value that matches the block in stack frame where we are executing for the transient variable we want to assign
  select any destination_local_reference related by block_in_stack_frame->L_LCL[R3000]->L_LCR[R3001] where selected.Var_ID == destination_handle.Var_ID;
  if (not_empty destination_local_reference)
    // We found the 1 local reference in this stack frame for this instance handle id.  So stop looking.
    // All of this was necessary in order to support nested blocks that reference variables that were created in outer blocks in this stack frame
    
    // WARNING: This implementation is based on the Object Action Language definition that existed in November of 2005.
    //          If the language is changed to become a strongly typed language where a user can define a variable in an inner block with the same
    //          name as something that exists in the outer block, then this implementation will not work because it does not walk out of the current
    //          block.
    break;
  end if;
end for;

// Now that we know the correct block in stack frame to use for both the source and destination instances.  Get them.
select any source related by source_local_reference->
                       L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select any destination related by destination_local_reference->
                       L_LCL[R3001]->RV_RVL[R3306]->RV_SMV[R3300]->
                                      RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
select one relationship_spec related by self->R_REL[R655];

// Compute the sense of the relation, if any
reflexive = relationship_spec.is_reflexive();
rel_phrase = GD::strip_tics(value:self.relationship_phrase);

select any srcIil related by source->I_LIP[R2958] where
                                    selected.Rel_ID == relationship_spec.Rel_ID;
select any dstIil related by destination->I_LIP[R2958] where
                                    selected.Rel_ID == relationship_spec.Rel_ID;
swap = false;
if not_empty destination
  select one destClass related by destination->CSME_CIE[R2962]->O_OBJ[R2961];
  select many dstClassInAssociations related by destClass->
                             R_OIR[R201] where selected.Rel_ID == dstIil.Rel_ID;
  select any dstRgo related by dstClassInAssociations->R_RGO[R203];
  if reflexive
    select one form related by dstRgo->
                             R_FORM[R205] where selected.Txt_Phrs == rel_phrase;
    select one dstRgo related by form->R_RGO[R205];
    // If the rel phrase matches, dstRgo will be unchanged above. If not,
    // dstRgo will be empty and we will proceed to test the correct end.
    // This test does not interfere with subtype detection below, because
    // subtype/supertype associations cannot be reflexive.
  end if;
  if not_empty dstRgo  // There can only be one
    select one form related by dstRgo->R_FORM[R205];
    if not_empty form
      // The destination is playing the role of formalizer in this association,
      // so we are relating backwards across the association.
      swap = true;
    else
      select one subType related by  dstRgo->R_SUB[R205];
      if not_empty subType
        swap = true;
      end if;
    end if;
  else
    select any dstPart related by dstClassInAssociations->
                                                      R_RTO[R203]->R_PART[R204];
    if reflexive
      select any dstPart related by dstClassInAssociations->
                R_RTO[R203]->R_PART[R204] where selected.Txt_Phrs == rel_phrase;
    end if;
    if not_empty dstPart
      if not relationship_spec.isFormalized()
        // If we''re not formalized, then we assume the first participant
        // found is going to play the role of the formalizer. Thus, if
        // the destination rto participant is playing the formalizer
        // role, then we are relating backwards across the association.
        select any informalPart related by relationship_spec->
                                                     R_SIMP[R206]->R_PART[R207];
        if dstPart == informalPart
          swap = true;
        end if;
      end if;
    // else it''s a supertype, we''re relating forward, no action needed.
    end if;
  end if;
end if;
if(swap)
  temp = source;
  source = destination;
  destination = temp;
end if;
select many links related by relationship_spec->I_LNK[R2904];
select any matchingLink related by relationship_spec->I_LNK[R2904] where
                                       selected.Link_ID == GD::NULL_UNIQUE_ID();
for each link in links
  // See if this is a link between our source and destination
  select one sourceParticipant related by link->I_LIP[R2901]->I_INS[R2958];
  select one destinationParticipant related by link->I_LIP[R2902]->I_INS[R2958];
  if ( sourceParticipant == source )
    if(not_empty destination)
      if ( destinationParticipant == destination )
        matchingLink = link;
	  end if;
	else
      // the destination is empty and the source matched, remove the link
      link.dispose();
      // incomplete match, this may not be our link. Keep looking.
    end if;
  elif ( destinationParticipant == destination )
    if(not_empty source)
      if ( sourceParticipant == source )
        matchingLink = link;      
      end if;
    else
      // the source is empty and the desination matched, remove the link
      link.dispose();
      // incomplete match, this may not be our link. Keep looking.
    end if;
  end if;
end for;
halting = false;
if (PREF::getBoolean(name:"bridgepoint_prefs_enable_verifier_audit")== true)
  auditSev = PREF::getInteger(name:"bridgepoint_prefs_enable_unrelate_audit"); 
  if auditSev != 0  // 0 == Ignore
    severity = "";
    if empty matchingLink
      severity = "Warning";
      assocPhrase = "";
      if (self.relationship_phrase != "")
        assocPhrase = " (" + self.relationship_phrase + ")";
      end if;
      postFixMsg = "";
      if auditSev == 2 // 2 == FATAL
        severity = "FATAL";
        select one stack related by stack_frame->I_STACK[R2929];
        if stack.runState == RunStateType::Running
          // Only suspend execution if running, i.e. allow stepping over
          stack.suspendReason = "Halted on illegal link instance " +
                  "population on " + relationship_spec.get_name() + assocPhrase;
          stack.runState = RunStateType::Suspended;
          postFixMsg = GD::newline() + "Execution Halted. (Problem detected at previous statement)";
          halting = true;
        end if;
      else // 1 == Warning
        select one statement related by self->ACT_SMT[R603];
        postFixMsg = " at: " + statement.Label;
      end if;
      message = severity + " Unrelate: Instances not related on " +
                        relationship_spec.get_name() + assocPhrase + postFixMsg;
      USER::logError(msg:message,path:body.getPath());
    end if; // a matching link was not found
  end if; // audit is do not ignore
end if; // audit enabled
if not halting
  if not_empty matchingLink
    matchingLink.dispose();
  end if;
end if;',
	1,
	'',
	"d638a12f-0cee-4e16-92a6-d14e210ec8a3");
INSERT INTO O_TPARM
	VALUES ("8a76a7e7-16cf-4f55-bd14-fd8db8a0f5c7",
	"f976feea-11e7-4acc-9928-e91179065a6a",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_REF
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"4812cecb-1a9a-4427-9e23-5819a4478eac",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	"8d671fe0-7942-4a00-a7c6-686ad6c1e508",
	"59e716a5-f6fb-419c-a0a8-bd67ec73d3c7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Statement',
	'Statement_ID',
	'R603');
INSERT INTO R_RGO_PROXY
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"4812cecb-1a9a-4427-9e23-5819a4478eac",
	'../../Body/Body.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	0,
	"df5d83da-30d6-4d47-b2e9-e0558c45efd8",
	"7558839e-e4fb-46e4-97b0-decfec373abb",
	'../../Body/Body.xtuml');
INSERT INTO O_RATTR
	VALUES ("8d671fe0-7942-4a00-a7c6-686ad6c1e508",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	1,
	'Statement_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("9bdc49e0-583c-4741-ad6c-fa52d80977a5",
	"4f42b756-0c2e-4a87-b40f-87291682433c",
	'../../Body/Statement/Statement.xtuml');
INSERT INTO O_ATTR
	VALUES ("8d671fe0-7942-4a00-a7c6-686ad6c1e508",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"00000000-0000-0000-0000-000000000000",
	'Statement_ID',
	'

',
	'',
	'Statement_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"c9a62d08-401e-4516-8b63-bcf5fca34733",
	"d03fe474-6a57-4246-94bb-2d2815bd6175",
	"25c82b0f-ee94-4d21-a6ba-c42bb1f9186a",
	"97c33cc7-3fae-47b5-b25f-08973dd80784",
	"de35db4f-ad43-42f2-a533-4b4722d9bb9a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R620.''one''');
INSERT INTO R_RGO_PROXY
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"c9a62d08-401e-4516-8b63-bcf5fca34733",
	"d03fe474-6a57-4246-94bb-2d2815bd6175",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"c9a62d08-401e-4516-8b63-bcf5fca34733",
	"25c82b0f-ee94-4d21-a6ba-c42bb1f9186a",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("97c33cc7-3fae-47b5-b25f-08973dd80784",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	'../../Value/Variable/Variable.xtuml');
INSERT INTO O_ATTR
	VALUES ("97c33cc7-3fae-47b5-b25f-08973dd80784",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"8d671fe0-7942-4a00-a7c6-686ad6c1e508",
	'One_Side_Var_ID',
	'

',
	'One_Side_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"7e30b68d-cd5e-4d32-85e7-79fa0bbbf2e8",
	"ff26b40c-89e9-4191-9a68-18807623bdbb",
	"6faa1d5f-53fa-45c0-821e-51af74f50b5a",
	"331a2fd7-1048-46a4-b214-e736d15c0ad8",
	"4e535e03-3a53-4fd5-aa9d-a4247fe5d6cf",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Variable',
	'Var_ID',
	'R621.''other''');
INSERT INTO R_RGO_PROXY
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"7e30b68d-cd5e-4d32-85e7-79fa0bbbf2e8",
	"ff26b40c-89e9-4191-9a68-18807623bdbb",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	0,
	"7e30b68d-cd5e-4d32-85e7-79fa0bbbf2e8",
	"6faa1d5f-53fa-45c0-821e-51af74f50b5a",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("331a2fd7-1048-46a4-b214-e736d15c0ad8",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"5b3f451e-a4bf-4d7c-97db-547eae3c84ae",
	"f8c82d33-e7c5-4fb7-8c3c-77b2a47feca7",
	1,
	'Var_ID');
INSERT INTO O_ATTR
	VALUES ("331a2fd7-1048-46a4-b214-e736d15c0ad8",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"97c33cc7-3fae-47b5-b25f-08973dd80784",
	'Other_Side_Var_ID',
	'

',
	'Other_Side_',
	'Var_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ea3ab78f-6c25-4bcb-8dbc-2e711338c522",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_BATTR
	VALUES ("ea3ab78f-6c25-4bcb-8dbc-2e711338c522",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_ATTR
	VALUES ("ea3ab78f-6c25-4bcb-8dbc-2e711338c522",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"331a2fd7-1048-46a4-b214-e736d15c0ad8",
	'relationship_phrase',
	'Full Name: Relationship Phrase
Specifies the relationship phrase at the target end of the association.
Essential for disambiguating the navigation direction of reflexive
associations.',
	'',
	'relationship_phrase',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("29081c2d-7ea8-4557-bacd-b793ef70543a",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_BATTR
	VALUES ("29081c2d-7ea8-4557-bacd-b793ef70543a",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_ATTR
	VALUES ("29081c2d-7ea8-4557-bacd-b793ef70543a",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"1149a2dd-54ff-4bd1-975f-0b8f165ed66f",
	'associationNumberLineNumber',
	'',
	'',
	'associationNumberLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0367777b-6436-4218-86ac-f2ce4253513c",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_BATTR
	VALUES ("0367777b-6436-4218-86ac-f2ce4253513c",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_ATTR
	VALUES ("0367777b-6436-4218-86ac-f2ce4253513c",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"29081c2d-7ea8-4557-bacd-b793ef70543a",
	'associationNumberColumn',
	'',
	'',
	'associationNumberColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3bf4a72c-917f-4712-9ddb-1ae7db5047a2",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_BATTR
	VALUES ("3bf4a72c-917f-4712-9ddb-1ae7db5047a2",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_ATTR
	VALUES ("3bf4a72c-917f-4712-9ddb-1ae7db5047a2",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"0367777b-6436-4218-86ac-f2ce4253513c",
	'associationPhraseLineNumber',
	'',
	'',
	'associationPhraseLineNumber',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6c6ea7d9-63de-4a84-9ac5-7ed2d1b5aeb4",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_BATTR
	VALUES ("6c6ea7d9-63de-4a84-9ac5-7ed2d1b5aeb4",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_ATTR
	VALUES ("6c6ea7d9-63de-4a84-9ac5-7ed2d1b5aeb4",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"3bf4a72c-917f-4712-9ddb-1ae7db5047a2",
	'associationPhraseColumn',
	'',
	'',
	'associationPhraseColumn',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"b7a04cbe-22f6-4335-9c3c-d07de172d638",
	0,
	"9c1944f6-6264-4150-8eaf-e943918eb019",
	"66a1e082-33f1-41f1-a0f6-8598e6d1daf4",
	"31e8394d-a902-4b34-8e94-f00cda5b707d",
	"0da747b6-c746-42a6-9b8f-42c881abf77c",
	"1149a2dd-54ff-4bd1-975f-0b8f165ed66f",
	"741bdbeb-708f-405a-b64d-f469b5a8b082",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Association',
	'Rel_ID',
	'R655.''destroys''');
INSERT INTO R_RGO_PROXY
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"66a1e082-33f1-41f1-a0f6-8598e6d1daf4",
	"31e8394d-a902-4b34-8e94-f00cda5b707d",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("9c1944f6-6264-4150-8eaf-e943918eb019",
	"b7a04cbe-22f6-4335-9c3c-d07de172d638",
	0,
	"66a1e082-33f1-41f1-a0f6-8598e6d1daf4",
	"0da747b6-c746-42a6-9b8f-42c881abf77c",
	'../Relate And Unrelate.xtuml');
INSERT INTO O_RATTR
	VALUES ("1149a2dd-54ff-4bd1-975f-0b8f165ed66f",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("1149a2dd-54ff-4bd1-975f-0b8f165ed66f",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	"ea3ab78f-6c25-4bcb-8dbc-2e711338c522",
	'Rel_ID',
	'

',
	'',
	'Rel_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_OIDA
	VALUES ("8d671fe0-7942-4a00-a7c6-686ad6c1e508",
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	0,
	'Statement_ID');
INSERT INTO O_ID
	VALUES (1,
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO O_ID
	VALUES (2,
	"b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac");
INSERT INTO PE_PE
	VALUES ("b8e3cdd0-3b1a-444f-8261-81d9aaaac4ac",
	1,
	"f9b356b6-693b-4350-92c1-1341c5db2caa",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("f9b356b6-693b-4350-92c1-1341c5db2caa",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Relate And Unrelate',
	'Captures  the concepts of relating instances together. Also captures
unrelate and covers relations with link classes.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	600,
	'../Relate And Unrelate.xtuml');
