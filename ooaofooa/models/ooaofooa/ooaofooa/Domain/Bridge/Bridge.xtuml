-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'Bridge',
	12,
	'S_BRG',
	'A bridge (S_BRG) is a method associated with an external entity (S_EE).  Bridges can be synchronously called from action specifications.  Each bridge as a return type and zero or more parameters (S_BPARM).',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("67a14f46-7ced-49e2-bb19-3e0fdb75957c",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'dispose',
	'The dispose operation for this class.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Domain Subsystem
select one ee related by self->S_EE[R19];
unrelate self from ee across R19;
select many bparms related by self->S_BPARM[R21];
for each bparm in bparms
  bparm.dispose();
end for;
select one dt related by self->S_DT[R20];
unrelate self from dt across R20;
//
// Body Subsystem
select one body related by self->ACT_BRB[R697]->ACT_ACT[R698];
if (not_empty body)
  body.dispose();
end if;
//
// Invocation Subsystem
select many invs related by self->ACT_BRG[R674];
for each inv in invs
  unrelate self from inv across R674;
end for;
//
// Value Subsystem
select many brgVals related by self->V_BRV[R828];
for each brgVal in brgVals
  unrelate self from brgVal across R828;
end for;
// for each message that this bridge
// is associated with
select many bms related by self->MSG_B[R1012];
for each bm in bms
  select one message related by bm->MSG_SM[R1020]->MSG_M[R1018];
  message.unformalize();
end for;
//
// Wiring Subsystem
select one wiring related by self->S_AW[R3200];
if (not_empty wiring)
  unrelate wiring from self across R3200;
  wiring.dispose();
end if;

select many dims related by self->S_DIM[R50];
for each dim in dims
  unrelate self from dim across R50;
  delete object instance dim;
end for;

//
// Finally, delete self
delete object instance self;',
	1,
	'',
	"a826537c-2131-44bf-ae75-1204efd7c1d5");
INSERT INTO O_TFR
	VALUES ("7fd5e3ab-8544-4a39-971a-3dcb3cddd8b5",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'initialize',
	'the initialization operation for this class.  Set the name and return value to defaults.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one packageableElem related by self->S_EE[R19]->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

   if (not_empty package)
     select one system related by package->S_SYS[R1405];
     def_dt_id = GD::NULL_UNIQUE_ID();
     if not_empty system
       def_dt_id = system.getCoreTypeId(name:"void");
     end if;
     select any pe from instances of PE_PE where selected.Element_ID == def_dt_id;
     select one def_dt related by pe->S_DT[R8001]; 
     if (not_empty def_dt)
       relate self to def_dt across R20;
     end if;
   else
     rootCompIdInPkg = component.getRootComponentId();
     select any rootComponent from instances of C_C where (selected.Id == rootCompIdInPkg);
     select one system related by rootComponent->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];     
     def_dt_id = GD::NULL_UNIQUE_ID();
     if not_empty system
       def_dt_id = system.getCoreTypeId(name:"void");
     end if;
     select any pe from instances of PE_PE where selected.Element_ID == def_dt_id;
     select one def_dt related by pe->S_DT[R8001]; 
     if (not_empty def_dt)
        relate self to def_dt across R20;
     end if;
   end if;

name = ::getUniqueInitialName( 
    instance: self.convertToInstance(), 
    candidateName: "Unnamed Bridge Operation");
success = ::getNewElementName(name:name,instance: self.convertToInstance(),validateName:true);    
if ( success!="") 
 self.Name=success;
else 
 self.dispose();
end if;        
self.Suc_Pars = ParseStatus::parseInitial;
',
	1,
	'',
	"5be6d708-b00a-4664-910c-acd0a759fb52");
INSERT INTO O_TFR
	VALUES ("c196af8a-e1f4-4762-a5f2-0a3980e1a1f7",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'newParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'create object instance bparm of S_BPARM;
relate self to bparm across R21;
bparm.initialize();
self.createMessageArgumentsForParameter(id:bparm.BParm_ID);
',
	1,
	'',
	"be6cf7d1-d36d-48dc-ac36-740d98c13ba2");
INSERT INTO O_TFR
	VALUES ("fcb82d62-2590-4cf6-8779-c19c3a2092f9",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'isAllowedReturnType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Bridge.isAllowedReturnType()
select one packageableElem related by self->S_EE[R19]->PE_PE[R8001];

  if self.getReturnDimensionsCnt() != 0 and param.typeName == "void"
    return false;
  else
    return packageableElem.isAllowedType(isReturnType:true,
                                                       typeName:param.typeName);
  end if;

',
	1,
	'',
	"2efcb657-89b3-4734-b056-91af86d4f053");
INSERT INTO O_TPARM
	VALUES ("405c4ffe-6e92-4146-a7d0-fc531cfabc15",
	"fcb82d62-2590-4cf6-8779-c19c3a2092f9",
	'typeName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a826537c-2131-44bf-ae75-1204efd7c1d5",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// just return this instance as an Object
return this;',
	0,
	'',
	"fcabe404-720a-4646-85c6-b3e339fe714c");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("5be6d708-b00a-4664-910c-acd0a759fb52",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.Brg_ID;',
	1,
	'',
	"faa9763c-d87e-44e5-a8d7-34e39dcbfbc3");
INSERT INTO O_TFR
	VALUES ("b3f3fc7a-ca62-4e27-ba28-5d2b06969bed",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'resolveDatatype',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one dtProxy related by self->S_DT[R20];
if(not_empty dtProxy and not Util::isProxy(element:self.convertToInstance()))
  name = dtProxy.Name;
  unrelate dtProxy from self across R20;
  
  select one packageableElem related by self->S_EE[R19]->PE_PE[R8001];
  select one package related by packageableElem->EP_PKG[R8000];
  select one component related by packageableElem->C_C[R8003];

    id = packageableElem.resolveDataTypeRelativeToSelf(default_name:"void",
                                                            expected_name:name);                                                          
    select any resolvedDt related by package->PE_VIS[R8002]->
                         PE_PE[R8002]->S_DT[R8001] where selected.DT_ID == id;
    if (empty resolvedDt)
      select any resolvedDt related by component->PE_CVS[R8004]->
                       PE_PE[R8004]->S_DT[R8001] where selected.DT_ID == id;
    end if;	
    if not_empty resolvedDt
      relate resolvedDt to self across R20;
    end if;
end if;',
	1,
	'',
	"7c624aae-6cae-4b2b-a382-8c501df0838d");
INSERT INTO O_TFR
	VALUES ("be6cf7d1-d36d-48dc-ac36-740d98c13ba2",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'isVoid',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one dt related by self->S_DT[R20];
return dt.Name == "void";',
	1,
	'',
	"65cef733-7dad-4725-beb3-0a8cb55b4ff9");
INSERT INTO O_TFR
	VALUES ("faa9763c-d87e-44e5-a8d7-34e39dcbfbc3",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'getReturnDimensionsCnt',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many dims related by self->S_DIM[R50];
dimensions = cardinality dims;
return dimensions;
',
	1,
	'',
	"67a14f46-7ced-49e2-bb19-3e0fdb75957c");
INSERT INTO O_TFR
	VALUES ("7c624aae-6cae-4b2b-a382-8c501df0838d",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'resizeReturn_Dimensions',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// If the number of dimensions has increased then add dimensions
while (param.numDimensions > self.getReturnDimensionsCnt())
  create object instance dim of S_DIM;
  dim.dimensionCount = self.getReturnDimensionsCnt();
  relate dim to self across R50;
end while;

// If the number of dimensions has decreased then remove dimensions
while (param.numDimensions < self.getReturnDimensionsCnt())
  select any dim related by self->S_DIM[R50] where (selected.dimensionCount == (self.getReturnDimensionsCnt()-1));
  unrelate dim from self across R50;
  delete object instance dim;
end while;

// Update the specific dimension that was passed-in if its elementCount has 
// changed.
if (param.numDimensions > 0) 
  select any dim related by self->S_DIM[R50] where (selected.dimensionCount == param.dimension);
  if (dim.elementCount != param.elementCount)
    dim.elementCount = param.elementCount;
  end if;
end if; ',
	1,
	'',
	"c196af8a-e1f4-4762-a5f2-0a3980e1a1f7");
INSERT INTO O_TPARM
	VALUES ("9b4cc2a6-6de0-4f98-a941-0430ba3a26e4",
	"7c624aae-6cae-4b2b-a382-8c501df0838d",
	'numDimensions',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"0cc32bf7-7475-475a-98ad-c3b7872c19c4",
	'');
INSERT INTO O_TPARM
	VALUES ("0cc32bf7-7475-475a-98ad-c3b7872c19c4",
	"7c624aae-6cae-4b2b-a382-8c501df0838d",
	'elementCount',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1a072676-4c61-46f6-aff8-5c5b731f7e50",
	'');
INSERT INTO O_TPARM
	VALUES ("1a072676-4c61-46f6-aff8-5c5b731f7e50",
	"7c624aae-6cae-4b2b-a382-8c501df0838d",
	'dimension',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2efcb657-89b3-4734-b056-91af86d4f053",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'initializeOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Alpha-sort the S_BPARM elements if they have not yet been ordered
select many peers related by self->S_BPARM[R21];
if (cardinality peers > 1)
    initialOrderingCheckPerformed = false;
	select any head related by self->S_BPARM[R21] where (selected.Brg_ID == GD::NULL_UNIQUE_ID());
	endOfList = head;
	loopCnt = 0;
	for each peer in peers
	  if ( not initialOrderingCheckPerformed)
	    select one predecessor related by peer->S_BPARM[R55.''precedes''];
	    select one successor related by peer->S_BPARM[R55.''succeeds''];
	    initialOrderingCheckPerformed = true;
	    if (not_empty  predecessor or not_empty  successor)
	      // Already ordered
	      break;
	    end if;
	    head = peer;
	    endOfList = peer;
	  end if;
	  
      if (loopCnt == 1)
        if (peer.Name < head.Name)
          relate peer to head across R55.''precedes'';
          endOfList = peer;
        else
          relate head to peer across R55.''precedes'';
          head = peer;
        end if;
      elif (loopCnt > 1)
        insertPoint = head;
        select one next related by head->S_BPARM[R55.''succeeds''];
        while (not_empty next)
          if (next.Name < peer.Name)
            break;
          else
            insertPoint = next;          
            select one next related by next->S_BPARM[R55.''succeeds''];
          end if;
        end while;
        
        if (empty next)
          // New end of list
          relate peer to endOfList across R55.''precedes'';   
          endOfList = peer;       
        else
          if ((insertPoint == head) and (peer.Name > head.Name))
            // New head
            relate head to peer across R55.''precedes'';
            head = peer;
          else
            unrelate next from insertPoint across R55.''precedes'';
            relate peer to insertPoint across R55.''precedes'';
            relate next to peer across R55.''precedes'';
          end if;          
        end if;
      end if;
      
      loopCnt = loopCnt + 1;
	end for;
end if;',
	1,
	'',
	"7fd5e3ab-8544-4a39-971a-3dcb3cddd8b5");
INSERT INTO O_TFR
	VALUES ("fcabe404-720a-4646-85c6-b3e339fe714c",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'canReferToDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// select the dt
select one dt related by self->S_DT[R20];
if(not_empty dt)
  select one packageableElem related by self->S_EE[R19]->PE_PE[R8001];
  select one package related by packageableElem->EP_PKG[R8000];
  select one component related by packageableElem->C_C[R8003];

    return packageableElem.canReferToDataType(dtID:dt.DT_ID, dtName: dt.Name);
end if;
return false;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("65cef733-7dad-4725-beb3-0a8cb55b4ff9",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'isReferringToDefaultDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one dt related by self->S_DT[R20];
elementType = Util::getSimpleClassName(element:self.convertToInstance());
if(dt.Name == S_DT::getDefaultDataTypeName(elementType:elementType))
  return true;
end if;
return false;
',
	1,
	'',
	"fcb82d62-2590-4cf6-8779-c19c3a2092f9");
INSERT INTO O_TFR
	VALUES ("1e494e25-2559-4c30-a5b6-da002d58ce70",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'getContainingComponentId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'select one ee related by self->S_EE[R19];
return ee.getContainingComponentId();
',
	1,
	'',
	"b3f3fc7a-ca62-4e27-ba28-5d2b06969bed");
INSERT INTO O_TFR
	VALUES ("40cce8ff-814b-4cae-92ef-8a42eebfdee8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'canUseDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Bridge.canUseDataType()
select one packageableElem related by self->S_EE[R19]->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

  // Find the previously created visibility list
  select any resultSet related by package->PE_SRS[R8005] where
        selected.Name == "" and selected.Type == ElementTypeConstants::DATATYPE;
  select any dt related by resultSet->PE_VIS[R8006]->
                     PE_PE[R8002]->S_DT[R8001] where selected.DT_ID == param.id;
  if not_empty component
    // Find the previously created visibility list
    select any compResultSet related by component->PE_CRS[R8007] where
        selected.Name == "" and selected.Type == ElementTypeConstants::DATATYPE;
    select any dt related by compResultSet->PE_CVS[R8008]->
                     PE_PE[R8004]->S_DT[R8001] where selected.DT_ID == param.id;
  end if;
  if(not_empty dt)
    if(self.isAllowedReturnType(typeName:dt.Name))
      return true;
    end if;
  end if;
  return false;
',
	1,
	'',
	"1e494e25-2559-4c30-a5b6-da002d58ce70");
INSERT INTO O_TPARM
	VALUES ("f830acc6-cdb8-4f9f-b778-293c2a34837a",
	"40cce8ff-814b-4cae-92ef-8a42eebfdee8",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fcf951af-f640-46d5-b34d-3aaf14d8f7e2",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'getContainerId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Bridge.getContainerId()
select one ee related by self->S_EE[R19];
return ee.getContainerId();',
	1,
	'',
	"40cce8ff-814b-4cae-92ef-8a42eebfdee8");
INSERT INTO O_TFR
	VALUES ("0001a476-de22-4016-b4aa-420bbadf7854",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'pasteBridgeParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any parameter from instances of S_BPARM
                                          where (selected.BParm_ID == param.id);
if(not_empty parameter)
  select one existingBrg related by parameter->S_BRG[R21];
  if(not_empty existingBrg)
    unrelate parameter from existingBrg across R21;
  end if;
  relate parameter to self across R21;
  parameter.Name = ::getUniqueInitialNameInParent(
                   instance: parameter.convertToInstance(), name:parameter.Name,
                                               parent:self.convertToInstance());
  self.createMessageArgumentsForParameter(id:parameter.BParm_ID);
  self.addBridgeParameterToOrder(id:parameter.BParm_ID);
end if;',
	1,
	'',
	"fcf951af-f640-46d5-b34d-3aaf14d8f7e2");
INSERT INTO O_TPARM
	VALUES ("f2f36d52-7d50-407e-b9b9-12d82af468e9",
	"0001a476-de22-4016-b4aa-420bbadf7854",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b7686fa2-3c3b-4d03-9ce1-5bf489889e41",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'createMessageArgumentsForParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any parameter from instances of S_BPARM
                                          where (selected.BParm_ID == param.id);
if(not_empty parameter)
  // for each message associated with this bridge
  // create a message argument
  select many messages related by self->MSG_B[R1012]->MSG_SM[R1020]->MSG_M[R1018];
  for each message in messages
    create object instance arg of MSG_A;
    create object instance ba of MSG_BA;
    relate ba to parameter across R1014;
    relate ba to arg across R1013;
    relate message to arg across R1001;
  end for;
end if;',
	1,
	'',
	"0001a476-de22-4016-b4aa-420bbadf7854");
INSERT INTO O_TPARM
	VALUES ("44b662a6-784c-49b6-84c6-def6dcb900e9",
	"b7686fa2-3c3b-4d03-9ce1-5bf489889e41",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9831649f-bad7-44a9-9085-1a686dab089c",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'addBridgeParameterToOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any parameter from instances of S_BPARM
                                          where (selected.BParm_ID == param.id);
if(not_empty parameter)
  ::changeNotificationEnablement(enabled:false);
  select many peers related by self->S_BPARM[R21];
  for each peer in peers
    if (peer != parameter)
      select one predecessor related by peer->S_BPARM[R55.''precedes''];
      if (empty predecessor)
        relate parameter to peer across R55.''succeeds'';
      end if;
    end if;
  end for;  
  ::changeNotificationEnablement(enabled:true);
end if;
',
	1,
	'',
	"b7686fa2-3c3b-4d03-9ce1-5bf489889e41");
INSERT INTO O_TPARM
	VALUES ("d3778bf2-97df-43d0-981b-cf2d2708c8a7",
	"9831649f-bad7-44a9-9085-1a686dab089c",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("45964027-991e-4340-aea5-183bd9fb29d8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'checkIntegrity',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'/**
 *  Create integrity issues if there are any other bridge operations with a
 *  matching signature
 */
select one ee related by self->S_EE[R19];
select one system related by ee->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
sys_id = GD::NULL_UNIQUE_ID();
if(not_empty system)
  sys_id = system.Sys_ID;
end if;
select many bridges related by ee->S_BRG[R19];
for each brg in bridges
  if(brg != self and brg.getSignature() == self.getSignature())
    MI_IM::createIssue(sys_id:sys_id, description:
                 "Found another bridge under the same external entity with a " +
                          "matching signature." + GD::newline() + GD::newline()
                                          + "Signature: " + self.getSignature(),
                                       severity:Severity::Error, name:self.Name,
                           path:ee.getPath() + "::" + self.Name,
                              id:self.Brg_ID, element:self.convertToInstance());
  end if;
end for;',
	1,
	'',
	"9831649f-bad7-44a9-9085-1a686dab089c");
INSERT INTO O_TFR
	VALUES ("8de67a61-850a-4048-855a-7c45b04b0ee8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'getSignature',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/**
 *  Return a string representation of this operations signature
 */
signature = self.Name;
count = 0;
select many parameters related by self->S_BPARM[R21];
paramLength = cardinality parameters;
if(paramLength > 0)
  signature = signature + "(";
end if;
for each parameter in parameters
  select one type related by parameter->S_DT[R22];
  if(count > 0 and count != paramLength - 1)
    signature = signature + ", ";
  end if;
  signature = signature + type.Name;
  count = count + 1;
end for;
if(paramLength > 0)
  signature = signature + ")";
end if;
return signature;',
	1,
	'',
	"45964027-991e-4340-aea5-183bd9fb29d8");
INSERT INTO O_NBATTR
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"00000000-0000-0000-0000-000000000000",
	'Brg_ID',
	'Full Name: Bridge Identifier',
	'',
	'Brg_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("41d57ac1-e5ad-4181-b774-2fba5bd5bef8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("41d57ac1-e5ad-4181-b774-2fba5bd5bef8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("41d57ac1-e5ad-4181-b774-2fba5bd5bef8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"2a4a4508-eb1e-4f3b-a0d0-ed8965ccfa7e",
	'Name',
	'Full Name: Bridge Name',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d8c540d2-4ed6-40a3-b3c6-5f6aadb03e9d",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("d8c540d2-4ed6-40a3-b3c6-5f6aadb03e9d",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("d8c540d2-4ed6-40a3-b3c6-5f6aadb03e9d",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"41d57ac1-e5ad-4181-b774-2fba5bd5bef8",
	'Descrip',
	'Full Name: Bridge Description',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ddeb9059-6c5d-441a-aaa0-1d0fea28fa10",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("ddeb9059-6c5d-441a-aaa0-1d0fea28fa10",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("ddeb9059-6c5d-441a-aaa0-1d0fea28fa10",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"d8c540d2-4ed6-40a3-b3c6-5f6aadb03e9d",
	'Brg_Typ',
	'Full Name: Bridge Type
Data Domain: 0 = user defined, 1 = built-in
enum0: User-Defined
enum1: Built-in
impl_detail: true
readonly: true


',
	'',
	'Brg_Typ',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("de5e13d6-62a1-421d-b971-48770f96b9dc",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	'self.Action_Semantics = ::convertRelocatableTags(in:self.Action_Semantics_internal);
',
	1);
INSERT INTO O_BATTR
	VALUES ("de5e13d6-62a1-421d-b971-48770f96b9dc",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("de5e13d6-62a1-421d-b971-48770f96b9dc",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"4be9b5c1-591c-495e-996a-7833681b138c",
	'Action_Semantics',
	'Full Name: Action Semantics Field
Description: Action Semantics for the bridge action
Persistent:false',
	'',
	'Action_Semantics',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1c0f24ce-3e61-4206-9270-f794a87da036",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("1c0f24ce-3e61-4206-9270-f794a87da036",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("1c0f24ce-3e61-4206-9270-f794a87da036",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"1a9f9b79-b15e-4fde-8159-69380e7d5690",
	'Suc_Pars',
	'Full Name: Successful Parse Indicator
Description: Indicates the status of the parse for the bridge action specification in the attribute Action_Semantics
Data Domain: 0=not parsed, 1 = parse successful, 2 = parse unsuccessful, 3 = parse on apply set but never been parsed
',
	'',
	'Suc_Pars',
	0,
	"65856daf-771c-438e-8830-04a8a88ecc22",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("65856daf-771c-438e-8830-04a8a88ecc22",
	"00000000-0000-0000-0000-000000000000",
	'ParseStatus',
	'Indicates the status of the parse for an action specification in the attribute Action_Semantics',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_NBATTR
	VALUES ("1a9f9b79-b15e-4fde-8159-69380e7d5690",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("1a9f9b79-b15e-4fde-8159-69380e7d5690",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("1a9f9b79-b15e-4fde-8159-69380e7d5690",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"de5e13d6-62a1-421d-b971-48770f96b9dc",
	'Action_Semantics_internal',
	'User_Visible:false',
	'',
	'Action_Semantics_internal',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c5eba2fa-8786-425e-94fd-b83636d866c8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_BATTR
	VALUES ("c5eba2fa-8786-425e-94fd-b83636d866c8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ATTR
	VALUES ("c5eba2fa-8786-425e-94fd-b83636d866c8",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"1c0f24ce-3e61-4206-9270-f794a87da036",
	'Return_Dimensions',
	'Full Name: Return Array Dimensions
DynamicReadOnly:isVoid',
	'',
	'Return_Dimensions',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	"35133802-1b64-4470-b677-760b79f4e5da",
	"e13d4d29-14f7-46da-a160-dd038e272687",
	"f06cef1c-a5b5-44b5-8d12-cc896060106f",
	"45df60f9-e916-433b-9c1e-623063624741",
	"4be9b5c1-591c-495e-996a-7833681b138c",
	"1de44b1d-087b-4b02-bbcf-21a2af2c5416",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Data Type',
	'DT_ID',
	'R20.''return value defined by''');
INSERT INTO R_RGO_PROXY
	VALUES ("cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"e13d4d29-14f7-46da-a160-dd038e272687",
	"f06cef1c-a5b5-44b5-8d12-cc896060106f",
	'../Domain.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	"e13d4d29-14f7-46da-a160-dd038e272687",
	"45df60f9-e916-433b-9c1e-623063624741",
	'../Domain.xtuml');
INSERT INTO O_RATTR
	VALUES ("4be9b5c1-591c-495e-996a-7833681b138c",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("4be9b5c1-591c-495e-996a-7833681b138c",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"ddeb9059-6c5d-441a-aaa0-1d0fea28fa10",
	'DT_ID',
	'',
	'',
	'Element_ID',
	2,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"d35d25d5-e6be-41f6-a742-a5cd8c3ea181",
	0,
	"ac9a372b-873b-4103-b7ab-1478c5780b61",
	"10131521-67ee-49f5-9400-9d274dab6e33",
	"ef8d844d-e28e-42ab-bcb6-abe2625d210d",
	"4859d459-a22b-449f-a3f6-2640017cb5fa",
	"2a4a4508-eb1e-4f3b-a0d0-ed8965ccfa7e",
	"3a12e4ac-54c0-4b75-a98c-a74fba723ed7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'External Entity',
	'EE_ID',
	'R19.''provides access to''');
INSERT INTO R_RGO_PROXY
	VALUES ("cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"10131521-67ee-49f5-9400-9d274dab6e33",
	"ef8d844d-e28e-42ab-bcb6-abe2625d210d",
	'../Domain.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("ac9a372b-873b-4103-b7ab-1478c5780b61",
	"d35d25d5-e6be-41f6-a742-a5cd8c3ea181",
	0,
	"10131521-67ee-49f5-9400-9d274dab6e33",
	"4859d459-a22b-449f-a3f6-2640017cb5fa",
	'../Domain.xtuml');
INSERT INTO O_RATTR
	VALUES ("2a4a4508-eb1e-4f3b-a0d0-ed8965ccfa7e",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_ATTR
	VALUES ("2a4a4508-eb1e-4f3b-a0d0-ed8965ccfa7e",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	"7f087367-409e-4293-a6d5-4963f035bc11",
	'EE_ID',
	'',
	'',
	'EE_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_OIDA
	VALUES ("7f087367-409e-4293-a6d5-4963f035bc11",
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	0,
	'Brg_ID');
INSERT INTO O_ID
	VALUES (1,
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO O_ID
	VALUES (2,
	"cb3bdf12-079b-436a-827b-58cdcb3a92b9");
INSERT INTO PE_PE
	VALUES ("cb3bdf12-079b-436a-827b-58cdcb3a92b9",
	1,
	"b308feec-d790-479d-b13b-24dc13bbb084",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b308feec-d790-479d-b13b-24dc13bbb084",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Domain',
	'A domain (S_DOM) consists of one or more subsystems (S_SS) that each contain an information model that abstracts a portion of the data for the domain: classes (O_OBJ), associations (R_REL), etc.  Breaking a domain into subsystems allows the complexity of the domain to be more easily managed: 1) subsystems are components and can be checked out individually allowing parallelism in development of the models and 2) breaking up a domain into smaller units is easier to understand.  A subsystem is composed of classes that tend to cluster, i.e., they have few associations that span subsystem boundaries.  Inter-subsystem associations, communications, and accesses are captured in the Subsystem Relationship Model (SRM), Subsystem Communication Model (SCM), and Subsystem Access Model (SAM) respectively.',
	1,
	'../Domain.xtuml');
