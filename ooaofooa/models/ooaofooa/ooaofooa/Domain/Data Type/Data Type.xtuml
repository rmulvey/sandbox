-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'Data Type',
	9,
	'S_DT',
	'An analyst can assign a data type to the various data items in the models, i.e., class attribute, state machine event data item, operation and bridge parameters and return values.  This data type does not capture the representation of the data items, but rather, the characteristics of the data items including:  1) Value Definition, i.e., whole numbers, 2) Value Range, i.e., values between 0 and 10, 3) Operations, i.e., +, -, *, /',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("8bb23b92-4459-4b12-8b1a-43de4ff18bd6",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'dispose',
	'The dispose operation for this class.  Return values get set to a default of void.  Parameters to integer.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Get some default core data types
select one pe related by self->PE_PE[R8001];
select one PKG related by pe->EP_PKG[R8000]; 
select one systemModel related by PKG->S_SYS[R1405];

select any intdt from instances of S_DT where false;
select any voidDt from instances of S_DT where false;

if (empty systemModel) and (not_empty pe)
select any globalElemntInSys related by pe->G_EIS[R9100];
  if (not_empty globalElemntInSys)
    select one systemModel related by globalElemntInSys->S_SYS[R9100];
  end if; 
end if ;

if (not_empty systemModel)
 // look for them from the system associated with the owning package
 intdt_id = systemModel.getCoreTypeId(name:"integer");
 select any pe from instances of PE_PE where selected.Element_ID == intdt_id;
 select one intdt related by pe->S_DT[R8001]; 
 voiddt_id = systemModel.getCoreTypeId(name:"void");
 select any pe from instances of PE_PE where selected.Element_ID == voiddt_id;
 select one voidDt related by pe->S_DT[R8001]; 
end if ;
//
// Domain Subsystem
select many brgs related by self->S_BRG[R20];
for each brg in brgs
  unrelate self from brg across R20;
  relate brg to voidDt across R20;
  Util::collectModelElementsNames(elementType:"- Bridge : ",elementName:brg.Name);
end for;
select many bparms related by self->S_BPARM[R22];
for each bparm in bparms
  unrelate self from bparm across R22;
  relate bparm to intdt across R22;
  Util::collectModelElementsNames(elementType:"- Bridge Parameter : ",elementName:bparm.Name);
end for;
select many eedis related by self->S_EEDI[R15];
for each eedi in eedis
  unrelate self from eedi across R15;
  relate eedi to intdt across R15;
  Util::collectModelElementsNames(elementType:"- External Entity : ",elementName:eedi.Name);
end for;
select many eeedis related by self->S_EEEDI[R16];
for each eeedi in eeedis
  unrelate self from eeedi across R16;
  relate eeedi to intdt across R16;
  Util::collectModelElementsNames(elementType:"- External Entity Event DataItem : ",elementName:eeedi.Name);
end for;
select many sparms related by self->S_SPARM[R26];
for each sparm in sparms
  unrelate self from sparm across R26;
  relate sparm to intdt across R26;
  Util::collectModelElementsNames(elementType:"- Function Parameter : ",elementName:sparm.Name);
end for;
select many fns related by self->S_SYNC[R25];
for each fn in fns
  unrelate self from fn across R25;
  relate fn to voidDt across R25;
  Util::collectModelElementsNames(elementType:"- Function : ",elementName:fn.Name);
end for;
select many evtdis related by self->SM_EVTDI[R524];
for each evtdi in evtdis
  unrelate self from evtdi across R524;
  relate evtdi to intdt across R524;
 Util::collectModelElementsNames(elementType:"- State Machine Event DataItem : ",elementName:evtdi.Name);
end for;
select many opers related by self->O_TFR[R116];
for each oper in opers
  unrelate self from oper across R116;
  relate oper to voidDt across R116;
  Util::collectModelElementsNames(elementType:"- Operation : ",elementName:oper.Name);
end for;
select many oparms related by self->O_TPARM[R118];
for each oparm in oparms
  unrelate self from oparm across R118;
  relate oparm to intdt across R118;
  Util::collectModelElementsNames(elementType:"- Operation Parameter : ",elementName:oparm.Name);
end for;
select many attrs related by self->O_ATTR[R114];
for each attr in attrs
  unrelate self from attr across R114;
  relate attr to intdt across R114;
   Util::collectModelElementsNames(elementType:"- Attribute : ",elementName:attr.Name);
end for;
select many members related by self->S_MBR[R45];
for each member in members
  unrelate self from member across R45;
  relate member to intdt across R45;
  Util::collectModelElementsNames(elementType:"- Structure Member : ",elementName:member.Name);
end for;
select one udt related by self->S_UDT[R17];
select one edt related by self->S_EDT[R17];
select one cdt related by self->S_CDT[R17];
assign isCoreType = not_empty cdt;
select one sdt related by self->S_SDT[R17];
select one irdt related by self->S_IRDT[R17];
if not_empty udt
  udt.dispose();
elif (not_empty edt)
  edt.dispose();
elif (not_empty cdt)
  cdt.dispose();
elif (not_empty sdt)
  sdt.dispose();
elif (not_empty irdt)
  irdt.dispose();
end if;
select many sycs related by self->CNST_SYC[R1500];
for each syc in sycs
  syc.setToDefaultDatatype();
  Util::collectModelElementsNames(elementType:"- Symbolic Constant : ",elementName:syc.Name);
end for;
//
// Value Subsystem
select many vals related by self->V_VAL[R820];
for each val in vals
  unrelate self from val across R820;
  relate val to intdt across R820;
end for;
select many tvars related by self->V_TRN[R821];
for each tvar in tvars
  unrelate self from tvar across R821;
  relate tvar to intdt across R821;
end for;
select many vvars related by self->V_VAR[R848];
for each vvar in vvars
  unrelate self from vvar across R848;
  relate vvar to intdt across R848;
  Util::collectModelElementsNames(elementType:"- Variable : ",elementName:vvar.Name);
end for;
//
select many ios related by self->C_IO[R4008];
for each io in ios
  unrelate self from io across R4008;
  relate io to voidDt across R4008;
    Util::collectModelElementsNames(elementType:"- Interface Operation : ",elementName:io.Name);
end for;

select many pps related by self->C_PP[R4007];
for each pp in pps
  unrelate self from pp across R4007;
  relate pp to intdt across R4007;
  Util::collectModelElementsNames(elementType:"- Property Parameter : ",elementName:pp.Name);
end for;

select many runtimeVals related by self->RV_RVL[R3307];
for each rtVal in runtimeVals
  unrelate self from rtVal across R3307;
  rtVal.dispose();
end for;

select many udts related by self->S_UDT[R18];
for each udt in udts
  unrelate self from udt across R18;
  udt.changeCoreType(typeName:"integer");
  select one udtDt related by udt->S_DT[R17];
  if(not isCoreType and not_empty udtDt)
    Util::collectModelElementsNames(elementType:"- User Data Type : ",
                                                        elementName:udtDt.Name);
  end if;
end for;

select one packageableElement related by self->PE_PE[R8001];
if not_empty packageableElement
  unrelate self from packageableElement across R8001;
  packageableElement.dispose();
end if;
delete object instance self;',
	1,
	'',
	"7cd5d420-a5a3-4062-ae5e-0c5264ee1ef4");
INSERT INTO O_TFR
	VALUES ("dc419980-de38-4b45-87a4-f517622e58b2",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'initialize',
	'The initialization operation for this class.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'name = ::getUniqueInitialName( 
    instance: self.convertToInstance(), 
    candidateName: param.newname);
    
success = ::getNewElementName(name:name,instance: self.convertToInstance(),validateName:true);    
if ( success!="") 
 self.Name=success;
else 
 self.dispose();
end if;     ',
	1,
	'',
	"98b00dff-8ad6-4fe9-86d7-cc0bd3ec30e3");
INSERT INTO O_TPARM
	VALUES ("25cebb15-0a1d-4dcb-8dfd-ad7f651d9b26",
	"dc419980-de38-4b45-87a4-f517622e58b2",
	'newname',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a1a10194-7b18-4d8b-a8c0-88c8c8afdfa1",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'rename',
	'Rename this data type.',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one cdt related by self->S_CDT[R17];
if (not_empty cdt)
  // Don''t rename core data types
  return FALSE;
end if;
self.Name = param.new_name;
return TRUE;
',
	1,
	'',
	"2f37225f-ea56-447e-bc9c-d26f4611b63f");
INSERT INTO O_TPARM
	VALUES ("01908298-150a-419d-b294-9688d619b3cb",
	"a1a10194-7b18-4d8b-a8c0-88c8c8afdfa1",
	'new_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2f37225f-ea56-447e-bc9c-d26f4611b63f",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'isCommonAllowedType',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'//data Type::isCommonAllowedType()
select one udt related by self -> S_UDT[R17];
if not_empty udt
  return true;
else
  select one edt related by self -> S_EDT[R17];
  if not_empty edt
    return true;
  else
    select one sdt related by self -> S_SDT[R17];
    if not_empty sdt
      return true;
    else
      select one irdt related by self -> S_IRDT[R17];
      if not_empty irdt
        return true;
      else
        if ( self.Name == "boolean" or
          self.Name == "component_ref" or
          self.Name == "integer" or
          self.Name == "string" or
          self.Name == "real" or
          self.Name == "unique_id" or
          self.Name == "inst<Event>" )
          return true;
        end if;
      end if;
    end if;
  end if;
end if;
return false;',
	1,
	'',
	"dc419980-de38-4b45-87a4-f517622e58b2");
INSERT INTO O_TFR
	VALUES ("7cd5d420-a5a3-4062-ae5e-0c5264ee1ef4",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// just return this instance as an Object
return this;',
	0,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("98b00dff-8ad6-4fe9-86d7-cc0bd3ec30e3",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'getDefaultValue',
	'',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'// Data Type.getDefaultValue()
dtName = self.getCoreDataTypeName();
result = GD::NULL_INSTANCE();
default = self.DefaultValue;  // UI assures that default is valid.
if (dtName == "boolean")
  if default != ""
    result = GD::boolean_to_instance(value:GD::string_to_boolean(value:default));
  else
    result = GD::boolean_to_instance(value:false);
  end if;
elif (dtName == "integer")
  if default != ""
    result = GD::int_to_instance(value:GD::string_to_int(value:default));
  else
    result = GD::int_to_instance(value:0);
  end if;
elif (dtName == "real")
  if default != ""
    result = GD::real_to_instance(value:GD::string_to_real(value:default));
  else
    result = GD::real_to_instance(value:0);
  end if;
elif (dtName == "string")
  result = GD::string_to_instance(value:default);
elif (dtName == "unique_id")
  result = GD::unique_id_to_instance(value:GD::NULL_UNIQUE_ID());
elif (dtName == "void" or dtName == "current_state" or
                     dtName == "same_as_base" or dtName == "inst_ref<Object>" or
                         dtName == "inst<Event>" or dtName == "inst<Mapping>" or
                                                  dtName == "inst_ref<Mapping>")
  USER::logError(msg:"Error: Attempted to get default value for data type, " +
                                                                        dtName,path:"NoPathProvided");
  result = GD::NULL_INSTANCE();
else
  // It''s an enumeration . . . 
  if default != ""
    result = GD::string_to_instance(value:default);
  else
    result = GD::string_to_instance(value:dtName + "::Unknown");  
  end if;
end if;
return result;',
	1,
	'',
	"a9f2e7e2-834f-4946-8007-9fb74ddf00c7");
INSERT INTO O_TFR
	VALUES ("6c57fac7-1c61-43fc-ba55-f827df9e19b1",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'getCoreDataTypeName',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'select one cdt related by self->S_CDT[R17];
select one udt related by self->S_UDT[R17];
select one edt related by self->S_EDT[R17];
select one irdt related by self->S_IRDT[R17];
if (not_empty cdt)
  if (cdt.Core_Typ == 0) //void
    return "void";
  elif (cdt.Core_Typ == 1) //boolean
    return "boolean";
  elif (cdt.Core_Typ == 2) //integer
    return "integer";
  elif (cdt.Core_Typ == 3) //real
    return "real";
  elif (cdt.Core_Typ == 4) //string
    return "string";
  elif (cdt.Core_Typ == 5) //unique_id
    return "unique_id";
  elif (cdt.Core_Typ == 6) //current_state
    return "current_state";
  elif (cdt.Core_Typ == 7) //same_as_base
    return "same_as_base";
  elif (cdt.Core_Typ == 8) //inst_ref<Object>
    return "inst_ref<Object>";
  elif (cdt.Core_Typ == 9) //inst_ref_set<Object>
    return "inst_ref_set<Object>";
  elif (cdt.Core_Typ == 10) //inst<Event>
    return "inst<Event>";
  elif (cdt.Core_Typ == 11) //inst<Mapping>
    return "inst<Mapping>";        
  elif (cdt.Core_Typ == 12) //inst_ref<Mapping>
    return "inst_ref<Mapping>";
  elif (cdt.Core_Typ == 13) //component_ref
    return "component_ref";
  else
    USER::logError(msg:"Data Type.getCoreDataType error: unknown data type",path:"");
    return "";
  end if;
elif (not_empty edt)
  //If the data type is an enumeration data type, return the name of the enumeration
  return edt.get_name();
elif (not_empty irdt)
  //If the data type is an instance reference data type,
  // return the name of the reference type
  return irdt.get_name();
elif (not_empty udt)
  // if a user data type ask the related core type
  select one core related by udt->S_DT[R18];
  return core.getCoreDataTypeName();
else
  USER::logError(msg:"Data Type.getCoreDataType error: unable to get core data type, return the name of the data type",path:"");
  return self.Name;
end if;',
	1,
	'',
	"8bb23b92-4459-4b12-8b1a-43de4ff18bd6");
INSERT INTO O_TFR
	VALUES ("a9f2e7e2-834f-4946-8007-9fb74ddf00c7",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'getDefaultDataTypeName',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'if(param.elementType == "InterfaceOperation")
  return "void";
elif(param.elementType == "PropertyParameter")
  return "integer";
elif(param.elementType == "Bridge")
  return "void";
elif(param.elementType == "BridgeParameter")
  return "integer";
elif(param.elementType == "OperationParameter")
  return "integer";
elif(param.elementType == "Operation")
  return "void";
elif(param.elementType == "Function")
  return "void";
elif(param.elementType == "FunctionParameter")
  return "integer";
elif(param.elementType == "StateMachineEventDataItem")
  return "integer";
elif(param.elementType == "Attribute")
  return "integer";
elif(param.elementType == "StructureMember")
  return "integer";
elif(param.elementType == "Value")
  return "integer";
elif(param.elementType == "TransientVar")
  return "integer";
elif(param.elementType == "Variable")
  return "integer";
elif(param.elementType == "UserDataType")
  return "integer";
elif(param.elementType == "SymbolicConstant")
  return "integer";
end if;
return "";',
	1,
	'',
	"6c57fac7-1c61-43fc-ba55-f827df9e19b1");
INSERT INTO O_TPARM
	VALUES ("732be9a3-0102-45b8-8c4f-d848d0048d7b",
	"a9f2e7e2-834f-4946-8007-9fb74ddf00c7",
	'elementType',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("6beda7b6-ee03-4ff3-9292-141940330ef6",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	'getPath',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'// Data Type::getPath()
path = "";
if(param.includeSelf)
  path = self.Name;
end if;
if(param.path != "")
  path = path + "::" + param.path;
end if;
select one package related by self->PE_PE[R8001]->EP_PKG[R8000];
select one component related by self->PE_PE[R8001]->C_C[R8003];

  if not_empty package
    if(path != "")
      path = package.getQualifiedName() + "::" + path;
    else
      path = package.getQualifiedName();
    end if;
  else
    if(path != "")
      path = component.getQualifiedName() + "::" + path;
    else
      path = component.getQualifiedName();
    end if;
  end if;
return path;',
	1,
	'',
	"a1a10194-7b18-4d8b-a8c0-88c8c8afdfa1");
INSERT INTO O_TPARM
	VALUES ("fb192e5f-1d56-42d4-9ae6-7648828376c1",
	"6beda7b6-ee03-4ff3-9292-141940330ef6",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("364b959d-bf03-4efe-8056-32bc23522f22",
	"6beda7b6-ee03-4ff3-9292-141940330ef6",
	'includeSelf',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"fb192e5f-1d56-42d4-9ae6-7648828376c1",
	'');
INSERT INTO O_NBATTR
	VALUES ("411fb846-a4b3-48ca-a55a-9d24676ae440",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_BATTR
	VALUES ("411fb846-a4b3-48ca-a55a-9d24676ae440",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_ATTR
	VALUES ("411fb846-a4b3-48ca-a55a-9d24676ae440",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"0fb58441-d65c-42a2-b6de-c5d567d0b414",
	'Name',
	'Full Name: Data Type Name',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("876cf7e4-607d-4745-aab3-096add959f42",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_BATTR
	VALUES ("876cf7e4-607d-4745-aab3-096add959f42",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_ATTR
	VALUES ("876cf7e4-607d-4745-aab3-096add959f42",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"411fb846-a4b3-48ca-a55a-9d24676ae440",
	'Descrip',
	'Full Name: Data Type Description',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80a1a20a-73e8-4c5c-b884-bf9faf5d7c82",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_BATTR
	VALUES ("80a1a20a-73e8-4c5c-b884-bf9faf5d7c82",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_ATTR
	VALUES ("80a1a20a-73e8-4c5c-b884-bf9faf5d7c82",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"876cf7e4-607d-4745-aab3-096add959f42",
	'DefaultValue',
	'Full Name: Default Value
Description: This attribute holds text representing the initialization value for elements of this type upon creation in execution environments such as Verifier and generated code.
',
	'',
	'DefaultValue',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"9bb717ed-1901-4146-9c80-b0d284aeffcc",
	"05fa1d91-2479-4e4d-97fd-25a6c7afe5b8",
	"35133802-1b64-4470-b677-760b79f4e5da",
	"be199f61-94e6-46e9-8311-4f6f42066412",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Packageable Element',
	'Element_ID',
	'R8001');
INSERT INTO R_RGO_PROXY
	VALUES ("8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"9bb717ed-1901-4146-9c80-b0d284aeffcc",
	'../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	"4cc3d8f8-81ab-4a0d-9f5f-70222d3d6371",
	"05fa1d91-2479-4e4d-97fd-25a6c7afe5b8",
	'../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RATTR
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	0,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"00000000-0000-0000-0000-000000000000",
	'DT_ID',
	'',
	'',
	'DT_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0fb58441-d65c-42a2-b6de-c5d567d0b414",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_BATTR
	VALUES ("0fb58441-d65c-42a2-b6de-c5d567d0b414",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_ATTR
	VALUES ("0fb58441-d65c-42a2-b6de-c5d567d0b414",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	"35133802-1b64-4470-b677-760b79f4e5da",
	'Dom_ID',
	'',
	'',
	'Dom_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_OIDA
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	'DT_ID');
INSERT INTO O_ID
	VALUES (1,
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO O_OIDA
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	1,
	'DT_ID');
INSERT INTO O_ID
	VALUES (2,
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e");
INSERT INTO PE_PE
	VALUES ("8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	1,
	"b308feec-d790-479d-b13b-24dc13bbb084",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b308feec-d790-479d-b13b-24dc13bbb084",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Domain',
	'A domain (S_DOM) consists of one or more subsystems (S_SS) that each contain an information model that abstracts a portion of the data for the domain: classes (O_OBJ), associations (R_REL), etc.  Breaking a domain into subsystems allows the complexity of the domain to be more easily managed: 1) subsystems are components and can be checked out individually allowing parallelism in development of the models and 2) breaking up a domain into smaller units is easier to understand.  A subsystem is composed of classes that tend to cluster, i.e., they have few associations that span subsystem boundaries.  Inter-subsystem associations, communications, and accesses are captured in the Subsystem Relationship Model (SRM), Subsystem Communication Model (SCM), and Subsystem Access Model (SAM) respectively.',
	1,
	'../Domain.xtuml');
