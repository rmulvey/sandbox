-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'Enumeration Data Type',
	14,
	'S_EDT',
	'An enumeration is a data type represented by a set of constants called enumerators.  For example, an enumeration called Colors might have three enumerators Red, Blue, and Green.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("6606170e-bab2-423a-ba11-053f24bc0b86",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'dispose',
	'The dispose operation for this class.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many enums related by self->S_ENUM[R27];
for each enum in enums
  enum.dispose();
end for;
select one dt related by self->S_DT[R17];
unrelate self from dt across R17;
delete object instance self;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("6663286a-3117-4325-9161-d38176e2fc0f",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'newEnumerator',
	'Create a new enumerator for this enumeration.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'create object instance enum of S_ENUM;
relate self to enum across R27;
enum.initialize();
',
	1,
	'',
	"dc73b846-7d23-48a8-b6e4-03ce52ce1a40");
INSERT INTO O_TFR
	VALUES ("fcdd03ad-41a5-4d69-a285-6393103b1bb5",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'rename',
	'Rename this enumeration data type.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one dt related by self->S_DT[R17];
dt.Name = param.new_name;
',
	1,
	'',
	"6663286a-3117-4325-9161-d38176e2fc0f");
INSERT INTO O_TPARM
	VALUES ("2a3fe228-0791-4be2-88f0-38ce0a220fab",
	"fcdd03ad-41a5-4d69-a285-6393103b1bb5",
	'new_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a77af804-c36f-4f5f-a2a0-717bb568617e",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_name',
	'Return the name of this enumeration data type.',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'select one dt related by self->S_DT[R17];
if (empty dt)
  return "";
else
  return dt.Name;
end if;',
	1,
	'',
	"982fefe4-2b97-4aba-912e-f52b5a5f9d66");
INSERT INTO O_TFR
	VALUES ("9f5acc02-a03f-4f95-8cd6-aeca573e9aba",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.DT_ID;',
	1,
	'',
	"a77af804-c36f-4f5f-a2a0-717bb568617e");
INSERT INTO O_TFR
	VALUES ("50a61b14-e45a-43f0-ab05-5ac946e12f99",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_compartment_text',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result = "";
if (param.comp_num == 1)
  if (param.at == Justification::Center_in_X)
   result = "«enumeration»";
    result = result + GD::newline();
    select one selfDt related by self->S_DT[R17];
    if ( not_empty selfDt )
      result = result + selfDt.Name;
      select one pe related by selfDt->PE_PE[R8001];
      if not_empty pe
        result = pe.getVisibilityAdornment() + result;
      end if;
    else
      result = result + ::getOrphanedElementName();
    end if;
  end if;
else
  if (param.at == Justification::Left)
    select any enum related by self->S_ENUM[R27] where (selected.Previous_Enum_ID == GD::NULL_UNIQUE_ID());
    cursor = param.ent_num;
    while (not_empty enum AND cursor > 1)
      select one enum related by enum->S_ENUM[R56.''precedes''];
      cursor = cursor - 1;
    end while;
    if (empty enum) 
      result = "";
    else
      result = enum.Name;
    end if;
  end if;
end if;
return result;',
	1,
	'',
	"6606170e-bab2-423a-ba11-053f24bc0b86");
INSERT INTO O_TPARM
	VALUES ("a9ba280c-be88-4463-9a85-ce8d50f2eb5e",
	"50a61b14-e45a-43f0-ab05-5ac946e12f99",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b886feff-e3da-425f-a834-7b270a575c4f",
	'');
INSERT INTO O_TPARM
	VALUES ("eec08e32-8174-4191-b229-b585a0d79681",
	"50a61b14-e45a-43f0-ab05-5ac946e12f99",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a9ba280c-be88-4463-9a85-ce8d50f2eb5e",
	'');
INSERT INTO O_TPARM
	VALUES ("b886feff-e3da-425f-a834-7b270a575c4f",
	"50a61b14-e45a-43f0-ab05-5ac946e12f99",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	"00000000-0000-0000-0000-000000000000",
	'Justification',
	'The Justification data type is used to specify text at a given location in a compartment.
------------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("5a549c63-3663-47cb-8847-394fa9c711f1",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_compartments',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 2;',
	1,
	'',
	"50a61b14-e45a-43f0-ab05-5ac946e12f99");
INSERT INTO O_TFR
	VALUES ("982fefe4-2b97-4aba-912e-f52b5a5f9d66",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_entries',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'if (param.comp_num == 1)
  return 1;
else
  select many enums related by self->S_ENUM[R27];
  return cardinality enums;
end if;',
	1,
	'',
	"5a549c63-3663-47cb-8847-394fa9c711f1");
INSERT INTO O_TPARM
	VALUES ("b9448d25-dcd9-42d9-8937-e26856f7fe1d",
	"982fefe4-2b97-4aba-912e-f52b5a5f9d66",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0371a495-ec0c-4599-b4dc-56122a995bf7",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::Box;',
	1,
	'',
	"9f5acc02-a03f-4f95-8cd6-aeca573e9aba");
INSERT INTO S_DT_PROXY
	VALUES ("05be3a7b-3886-4857-8a5e-5c08c37293ab",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("d2450955-4cc5-4a60-8498-566e9c23c96d",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'get_text_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'return Style::None;',
	1,
	'',
	"0371a495-ec0c-4599-b4dc-56122a995bf7");
INSERT INTO O_TPARM
	VALUES ("51e8bd1b-b8f5-4a5b-a9c0-2a45cc420eae",
	"d2450955-4cc5-4a60-8498-566e9c23c96d",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"08885756-a171-453c-8f88-8235e0f48515",
	'');
INSERT INTO O_TPARM
	VALUES ("62e97ed4-ebef-4b22-9ebf-c31b59e89d81",
	"d2450955-4cc5-4a60-8498-566e9c23c96d",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"51e8bd1b-b8f5-4a5b-a9c0-2a45cc420eae",
	'');
INSERT INTO O_TPARM
	VALUES ("08885756-a171-453c-8f88-8235e0f48515",
	"d2450955-4cc5-4a60-8498-566e9c23c96d",
	'at',
	"4d57997c-962f-4b4f-bc4f-65d0bbf9936e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("dc73b846-7d23-48a8-b6e4-03ce52ce1a40",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'initializeOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Alpha-sort the S_ENUM elements if they have not yet been ordered
select many peers related by self->S_ENUM[R27];
if (cardinality peers > 1)
    initialOrderingCheckPerformed = false;
	select any head related by self->S_ENUM[R27] where (selected.Enum_ID == GD::NULL_UNIQUE_ID());
	endOfList = head;
    loopCnt = 0;
	for each peer in peers
	  if ( not initialOrderingCheckPerformed )
	    select one predecessor related by peer->S_ENUM[R56.''precedes''];
	    select one successor related by peer->S_ENUM[R56.''succeeds''];
	    initialOrderingCheckPerformed = true;
	    if (not_empty  predecessor or not_empty  successor)
	      // Already ordered
	      break;
	    end if;
	    head = peer;
	    endOfList = peer;
	  end if;
	  
      if (loopCnt == 1)
        if (peer.Name < head.Name)
          relate peer to head across R56.''precedes'';
          endOfList = peer;
        else
          relate head to peer across R56.''precedes'';
          head = peer;
        end if;
      elif (loopCnt > 1)
        insertPoint = head;
        select one next related by head->S_ENUM[R56.''succeeds''];
        while (not_empty next)
          if (next.Name < peer.Name)
            break;
          else
            insertPoint = next;          
            select one next related by next->S_ENUM[R56.''succeeds''];
          end if;
        end while;
        
        if (empty next)
          // New end of list
          relate peer to endOfList across R56.''precedes'';   
          endOfList = peer;       
        else
          if ((insertPoint == head) and (peer.Name > head.Name))
            // New head
            relate head to peer across R56.''precedes'';
            head = peer;
          else
            unrelate next from insertPoint across R56.''precedes'';
            relate peer to insertPoint across R56.''precedes'';
            relate next to peer across R56.''precedes'';
          end if;          
        end if;
      end if;
      
      loopCnt = loopCnt + 1;
	end for;
end if;',
	1,
	'',
	"d2450955-4cc5-4a60-8498-566e9c23c96d");
INSERT INTO O_TFR
	VALUES ("762c2cd2-1072-4951-bdb9-233e75b8fd48",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'actionFilter',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'if(param.name == "can")
	if param.value == "make public"
		select one pe related by self->S_DT[R17]->PE_PE[R8001];
		select one pkg related by pe->EP_PKG[R8000];
		if not_empty pkg
			if not_empty pe 
				return pe.Visibility != Visibility::Public;
			end if;
		end if;
	end if;
	if param.value == "make protected"
		select one pe related by self->S_DT[R17]->PE_PE[R8001];
		select one pkg related by pe->EP_PKG[R8000];
		if not_empty pkg
    		if not_empty pe 
      			return pe.Visibility != Visibility::Protected;
    		end if;
  		end if;
  	end if;
	if param.value == "make private"
		select one pe related by self->S_DT[R17]->PE_PE[R8001];
		select one pkg related by pe->EP_PKG[R8000];
		if not_empty pkg
    		if not_empty pe 
      			return pe.Visibility != Visibility::Private;
    		end if;
  		end if;
  	end if;
end if;
return false;',
	1,
	'',
	"fcdd03ad-41a5-4d69-a285-6393103b1bb5");
INSERT INTO O_TPARM
	VALUES ("4062cb6c-039a-47b7-aee9-6a9dd5962956",
	"762c2cd2-1072-4951-bdb9-233e75b8fd48",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("b95c791e-c2b1-4c0e-b276-269d8ee8d8b9",
	"762c2cd2-1072-4951-bdb9-233e75b8fd48",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4062cb6c-039a-47b7-aee9-6a9dd5962956",
	'');
INSERT INTO O_TFR
	VALUES ("dca9e423-7b3c-4661-8c04-e6e3319b451f",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'pasteEnumerator',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any enumerator from instances of S_ENUM
                                           where (selected.Enum_ID == param.id);
if(not_empty enumerator)
  select one existingEDT related by enumerator->S_EDT[R27];
  if(not_empty existingEDT)
    unrelate enumerator from existingEDT across R27;
  end if;
  relate enumerator to self across R27;
  enumerator.Name = ::getUniqueInitialNameInParent(
                                        instance:enumerator.convertToInstance(),
                         name:enumerator.Name, parent:self.convertToInstance());
  self.addEnumeratorToOrder(id:enumerator.Enum_ID);
end if;',
	1,
	'',
	"762c2cd2-1072-4951-bdb9-233e75b8fd48");
INSERT INTO O_TPARM
	VALUES ("54bd15d8-b683-46a9-8e7e-fdf7c9a006ca",
	"dca9e423-7b3c-4661-8c04-e6e3319b451f",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2c50fbaf-a5cb-49ee-8928-a1913518fd5f",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'addEnumeratorToOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any enumerator from instances of S_ENUM
                                           where (selected.Enum_ID == param.id);
if(not_empty enumerator)
  ::changeNotificationEnablement(enabled:false);
  select many peers related by self->S_ENUM[R27];
  for each peer in peers
    if (peer != enumerator)
      select one predecessor related by peer->S_ENUM[R56.''precedes''];
      if (empty predecessor)
        relate enumerator to peer across R56.''succeeds'';
      end if;
    end if;
  end for;
  ::changeNotificationEnablement(enabled:true);
end if;',
	1,
	'',
	"dca9e423-7b3c-4661-8c04-e6e3319b451f");
INSERT INTO O_TPARM
	VALUES ("8f56ec59-6be0-4309-8232-a7268778c1d7",
	"2c50fbaf-a5cb-49ee-8928-a1913518fd5f",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("885d8b76-fca3-4cca-971f-473e8cfe3e5b",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'convertToInstance',
	'Translate: native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'return this;',
	0,
	'',
	"2c50fbaf-a5cb-49ee-8928-a1913518fd5f");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("cb865bd1-cbc0-4922-b694-7e607b79cfea",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'checkIntegrity',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// create an integrity issue if there are any other data types under
// the same package with the same name
select one dt related by self->S_DT[R17];
select one package related by dt->PE_PE[R8001]->EP_PKG[R8000];
select one component related by dt->PE_PE[R8001]->C_C[R8003];
if(not empty component)
  pkgId = component.getPackageId();
  select any package from instances of EP_PKG
                                           where (selected.Package_ID == pkgId);
end if;
select one system related by package->S_SYS[R1405];
sys_id = GD::NULL_UNIQUE_ID();
if(not_empty system)
  sys_id = system.Sys_ID;
end if;
select many dts related by dt->PE_PE[R8001]->EP_PKG[R8000]
                                                    ->PE_PE[R8000]->S_DT[R8001];
if(empty dts)
  select many dts related by dt->PE_PE[R8001]->C_C[R8003]
                                                    ->PE_PE[R8003]->S_DT[R8001];
end if;
for each otherDt in dts
  if(otherDt != dt and otherDt.Name == dt.Name)
    MI_IM::createIssue(sys_id:sys_id, description:
           "Found another data type under the same package with a " +
                                                          "matching name.",
                                       severity:Severity::Error, name:dt.Name,
                       path:dt.getPath(path:"", includeSelf:true),
                              id:dt.DT_ID, element:self.convertToInstance());
  end if;
end for;',
	1,
	'',
	"885d8b76-fca3-4cca-971f-473e8cfe3e5b");
INSERT INTO O_TFR
	VALUES ("2d4cb11d-d2ab-49a2-b3c2-e78726b9753c",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	'getDescription',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'select one dt related by self->S_DT[R17];
return dt.Descrip;',
	1,
	'',
	"cb865bd1-cbc0-4922-b694-7e607b79cfea");
INSERT INTO O_REF
	VALUES ("c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	"35133802-1b64-4470-b677-760b79f4e5da",
	"6e4805b1-8913-420c-ba6a-93dfb568b8ed",
	"35b1a159-1e7b-43ef-bb6b-a63f6984155a",
	"37312651-247c-4cbe-936f-23c2f217fe3c",
	"7f885cfe-e72b-4acd-81bc-71a498daf8b4",
	"f7017d79-081b-4a6a-8164-99287f41bd30",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Data Type',
	'DT_ID',
	'R17');
INSERT INTO R_RGO_PROXY
	VALUES ("c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	"6e4805b1-8913-420c-ba6a-93dfb568b8ed",
	"35b1a159-1e7b-43ef-bb6b-a63f6984155a",
	'../Domain.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("35133802-1b64-4470-b677-760b79f4e5da",
	"8e4aa370-0206-4cf0-a81e-edaf0e37466e",
	0,
	"6e4805b1-8913-420c-ba6a-93dfb568b8ed",
	"37312651-247c-4cbe-936f-23c2f217fe3c",
	'../Domain.xtuml');
INSERT INTO O_RATTR
	VALUES ("7f885cfe-e72b-4acd-81bc-71a498daf8b4",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("7f885cfe-e72b-4acd-81bc-71a498daf8b4",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	"00000000-0000-0000-0000-000000000000",
	'DT_ID',
	'',
	'',
	'Element_ID',
	2,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398");
INSERT INTO O_OIDA
	VALUES ("7f885cfe-e72b-4acd-81bc-71a498daf8b4",
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	0,
	'DT_ID');
INSERT INTO O_ID
	VALUES (1,
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398");
INSERT INTO O_ID
	VALUES (2,
	"c07cd4b6-c793-4d6c-b757-83b2b8b02398");
INSERT INTO PE_PE
	VALUES ("c07cd4b6-c793-4d6c-b757-83b2b8b02398",
	1,
	"b308feec-d790-479d-b13b-24dc13bbb084",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b308feec-d790-479d-b13b-24dc13bbb084",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Domain',
	'A domain (S_DOM) consists of one or more subsystems (S_SS) that each contain an information model that abstracts a portion of the data for the domain: classes (O_OBJ), associations (R_REL), etc.  Breaking a domain into subsystems allows the complexity of the domain to be more easily managed: 1) subsystems are components and can be checked out individually allowing parallelism in development of the models and 2) breaking up a domain into smaller units is easier to understand.  A subsystem is composed of classes that tend to cluster, i.e., they have few associations that span subsystem boundaries.  Inter-subsystem associations, communications, and accesses are captured in the Subsystem Relationship Model (SRM), Subsystem Communication Model (SCM), and Subsystem Access Model (SAM) respectively.',
	1,
	'../Domain.xtuml');
