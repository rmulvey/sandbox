-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	'Pending Event',
	2902,
	'I_EVI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("b0ed4436-a8f1-42d3-a019-aa915a5b1313",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Pending Event.dispose() 

// Remove the processed event from the queue list
select one nextEvt related by self->I_EVI[R2908.''will be processed after''];
if (not_empty nextEvt)
  unrelate self from nextEvt across R2908.''will be processed after'';
end if;

select one pEvt related by self->I_EVI[R2908.''will be processed before''];
if (not_empty pEvt)
  unrelate self from pEvt across R2908.''will be processed before'';
end if;

// If this pending event was in the middle of the queue, restore the list
if (not_empty nextEvt and not_empty pEvt)
  relate nextEvt to pEvt across R2908.''will be processed before'';
  relate pEvt to nextEvt across R2908.''will be processed after'';
end if;

// Remove the processed event from the event to self queue list
select one nextSelfEvt related by self->I_EVI[R2939.''will be processed after''];
if (not_empty nextSelfEvt)
  unrelate self from nextSelfEvt across R2939.''will be processed after'';
end if;

select one pSelfEvt related by self->I_EVI[R2939.''will be processed before''];
if (not_empty pSelfEvt)
  unrelate self from pSelfEvt across R2939.''will be processed before'';
end if;

// If this pending event was in the middle of the queue, restore the list
if (not_empty nextSelfEvt and not_empty pSelfEvt)
  relate nextSelfEvt to pSelfEvt across R2939.''will be processed before'';
  relate pSelfEvt to nextSelfEvt across R2939.''will be processed after'';
end if;

select one evt related by self->SM_EVT[R2906];
if (not empty evt)
  unrelate evt from self across R2906;
end if;

select many evtDIs related by self->I_DIV[R2933];
for each evtDI in evtDIs
  unrelate self from evtDI across R2933;
  evtDI.dispose();
end for;

select one inst related by self->I_INS[R2935];
if (not_empty inst)
  unrelate self from inst across R2935;
end if;

select one pending_for_inst related by self->I_INS[R2907];
if (not_empty pending_for_inst)
  unrelate self from inst across R2907;
end if;

select one target_class related by self->CSME_CIE[R2931];
if (not_empty target_class)
  unrelate self from target_class across R2931;
end if;

// Unrelate this event from the instance that sent it
select one sending_inst related by self->I_INS[R2937];
if (not_empty sending_inst)
  unrelate self from sending_inst across R2937;
end if;

// Unrelate this event from the class that sent it
select one sending_class related by self->CSME_CIE[R2938];
if (not_empty sending_class)
  unrelate self from sending_class across R2938;
end if;

// Dispose associated timer if necessary
select one timer related by self->I_TIM[R2940];
if (not_empty timer)
  unrelate self from timer across R2940;
  if (not timer.recurring)
    discard = timer.dispose();
  end if;
end if;

select one engine related by self->I_EXE[R2964];

// Dispose self event queue entry
if(not_empty engine)
  engine.lockQueue(queue_name:"I_SQE");
end if;  
select one sqe related by self->I_SQE[R2946];
if (not_empty sqe)
  select one ee related by sqe->I_EXE[R2946];
  unrelate self from ee across R2946 using sqe;
  sqe.dispose();
end if;
if(not_empty engine)
  engine.unlockQueue(queue_name:"I_SQE");
end if;

// dispose association with remote component
select one originatingEngine related by self->I_EXE[R2976];
if not_empty originatingEngine
  unrelate self from originatingEngine across R2976;
end if;

// Dispose regular event queue entry
if(not_empty engine)
  engine.lockQueue(queue_name:"I_EQE");
end if;
select one eqe related by self->I_EQE[R2944];
if (not_empty eqe)
  select one ee related by eqe->I_EXE[R2944];
  unrelate self from ee across R2944 using eqe;
  eqe.dispose();
end if;
if(not_empty engine)
  engine.unlockQueue(queue_name:"I_EQE");
end if;

if(not_empty engine)
  unrelate self from engine across R2964;
end if;
delete object instance self;',
	1,
	'',
	"fcfecc0e-03f7-4e00-a3d8-726e19fb75d5");
INSERT INTO O_TFR
	VALUES ("1968083e-f6e7-4fc7-bd55-10d1ff714092",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'fire',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	' // Pending Event.fire()
select one inst related by self->I_INS[R2935];

// Determine whether this event targets an instance or class state machine
select one sm_evt related by self->SM_EVT[R2906];
if (not_empty inst)
  // Determine whether this event has already been fired
  select one pending_inst related by self->I_INS[R2907];
  if (empty pending_inst)
    self.fireToInstSM();
    // wake up the engine if necessary
	select one engine related by self->I_EXE[R2964];
	if not_empty engine
	  // We don''t find an engine if the remote component already noticed the
	  // event and processed it. In which case we don''t need to notify anyway.
	  engine.notify();
	end if;
  else
    // This event has already been fired.  Report an error to the user.
    state_event_name = "unknown name";
    path="";
    if (not_empty sm_evt)
      state_event_name = sm_evt.get_name();
      path = sm_evt.getPath();
    end if;
    USER::logError(msg:"Could not fire event " + state_event_name +" to " +
        pending_inst.Name + " because the event has already been fired." , path: path);
  end if;
else
  // The event targets a class state machine

  // Determine whether this event has already been fired
  select one pending_clazz related by self->CSME_CIE[R2931];
  if (empty pending_clazz)
    self.fireToClassSM();
    // wake up the engine if necessary
	select one engine related by self->I_EXE[R2964];
	if not_empty engine
	  // We don''t find an engine if the remote component already noticed the
	  // event and processed it. In which case we don''t need to notify anyway.
	  engine.notify();
	end if;
  else
    // This event has already been fired.  Report an error to the user.
    path="";
    state_event_name = "unknown name";
    if (not_empty sm_evt)
      state_event_name = sm_evt.get_name();
      path = sm_evt.getPath();
    end if;
    USER::logError(msg:"Could not fire event " + state_event_name +" to " +
        pending_clazz.Label + " because the event has already been fired.",path:path);
  end if;
end if;

// Suspend if event enqueue breakpoint is set and this event was delayed.
select one timer related by self->I_TIM[R2940];
if (not_empty timer and not_empty sm_evt and
         sm_evt.checkBreakpoint(processType:EventProcessType::Enqueued) == true)
  select one exEng related by self->I_EXE[R2964];
  select one stack related by exEng->I_STACK[R2930];
  stack.suspendReason = "Break on event enqueue: " + self.Label +
                               " (Enqueued by timer, no line number available)";
  stack.runState = RunStateType::Suspended;
end if;
',
	1,
	'',
	"b0ed4436-a8f1-42d3-a019-aa915a5b1313");
INSERT INTO O_TFR
	VALUES ("ff83077b-137c-4fda-bbcb-b45ccbc8939c",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'fireToInstSM',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Instance:Pending Event.fireToInstSM()

select one target_inst related by self->I_INS[R2935];
select one originating_inst related by self->I_INS[R2937];

select one exEng related by target_inst->CSME_CIE[R2962]->I_EXE[R2960];

// Determine whether this event is an event to self
if (not_empty originating_inst and not_empty target_inst)
  AND (target_inst.Inst_ID == originating_inst.Inst_ID)
  // This event is an event to self.  So add it to the event to self queue
  exEng.lockQueue(queue_name:"I_SQE");

  // Grab all events to self pending for the target instance
  select many pending_evts_to_self related by target_inst->I_EVI[R2907] where 
                              selected.Sent_By_Inst_ID == target_inst.Inst_ID;

  // Find the event that will be last to be processed in the queue
  for each pending_evt_to_self in pending_evts_to_self
    select one next_evt related by pending_evt_to_self->
                                        I_EVI[R2939.''will be processed after''];
    if (empty next_evt)
      // Add event to the end of this instance''s pending event to self queue
      relate self to pending_evt_to_self across 
                                              R2939.''will be processed before'';
      break;
    end if;
  end for;
                                   
  select any selfQueueEntry related by exEng->I_SQE[R2946] where (selected.Next_Self_Queue_Entry_ID == GD::NULL_UNIQUE_ID());
  create object instance newSelfQueueEntry of I_SQE;
  relate self to exEng across R2946 using newSelfQueueEntry;
  if (not_empty selfQueueEntry)
    relate newSelfQueueEntry to selfQueueEntry across R2947.''precedes'';
  end if;
  // Make this event pending for the target instance
  relate self to target_inst across R2907;
  exEng.unlockQueue(queue_name:"I_SQE");
else
  // This event is not an event to self.  So add it to the standard queue
  exEng.lockQueue(queue_name:"I_EQE");

  // Grab all events pending for the target instance that are not to self
  select many pending_evts related by target_inst->I_EVI[R2907] where 
                                selected.Sent_By_Inst_ID != target_inst.Inst_ID;

  // Find the event that will be last to be processed in the queue
  for each pending_evt in pending_evts
    select one next_evt related by pending_evt->I_EVI[R2908.''will be processed after''];
    if (empty next_evt)
      // Add event to the end of this instance''s pending event queue
      relate self to pending_evt across R2908.''will be processed before'';
      break;
    end if;
  end for;
  select any eventQueueEntry related by exEng->I_EQE[R2944] where (selected.Next_Event_Queue_Entry_ID == GD::NULL_UNIQUE_ID());
  create object instance newEventQueueEntry of I_EQE;
  relate self to exEng across R2944 using newEventQueueEntry;
  if (not_empty eventQueueEntry)
    relate newEventQueueEntry to eventQueueEntry across R2945.''precedes'';
  end if;
  // Make this event pending for the target instance
  relate self to target_inst across R2907;
  exEng.unlockQueue(queue_name:"I_EQE");  
end if;',
	1,
	'',
	"849c2b1d-7bb9-4f0f-83cc-33f9f30e166f");
INSERT INTO O_TFR
	VALUES ("849c2b1d-7bb9-4f0f-83cc-33f9f30e166f",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'fireToClassSM',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Instance:Pending Event.fireToClassSM()

select one evt related by self->SM_EVT[R2906];
select one originating_clazz related by self->CSME_CIE[R2938];

// get the destination execution engine
select one exEng related by self->I_EXE[R2964];

// Ensure that a execution engine was found to avoid a null pointer exception
if (empty exEng)
  select one sm_evt related by self->SM_EVT[R2906];
  state_event_name = "unknown name";
  path = "";
  if (not_empty sm_evt)
    state_event_name = sm_evt.get_name();
    path = sm_evt.getPath();
  end if;
  USER::logError(msg:"Could not fire event " + state_event_name +
    " because no execute engine was found.",path:path);
  return;
end if;

select any target_cie related by evt->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519]
                            ->CSME_CIE[R2961] where
                    (selected.Execution_Engine_ID == exEng.Execution_Engine_ID);
                   
// Determine whether this event is an event to self
if((not_empty originating_clazz and not_empty target_cie)
                          AND (target_cie.Obj_ID == originating_clazz.Obj_ID))
  // This event is an event to self.  So add it to the event to self queue
  exEng.lockQueue(queue_name:"I_SQE");
  
  // Grab all events to self pending for the target instance
  select many pending_evts_to_self related by target_cie->I_EVI[R2931] where 
               selected.Sent_By_CIE_ID == target_cie.CIE_ID;

  // Find the event that will be last to be processed in the queue
  for each pending_evt_to_self in pending_evts_to_self
    select one next_evt related by pending_evt_to_self->
           I_EVI[R2939.''will be processed after''];
    if (empty next_evt)
      // Add event to the end of this instance''s pending event to self queue
      relate self to pending_evt_to_self across R2939.''will be processed before'';
      break;
    end if;
  end for;

  select any selfQueueEntry related by exEng->I_SQE[R2946] where (selected.Next_Self_Queue_Entry_ID == GD::NULL_UNIQUE_ID());
  create object instance newSelfQueueEntry of I_SQE;
  relate self to exEng across R2946 using newSelfQueueEntry;
  if (not_empty selfQueueEntry)
    relate newSelfQueueEntry to selfQueueEntry across R2947.''precedes'';
  end if;
  // Make this event pending for the target class
  relate self to target_cie across R2931;
  exEng.unlockQueue(queue_name:"I_SQE");

else
  // This event is not an event to self.  So add it to the standard queue
  exEng.lockQueue(queue_name:"I_EQE");
  
  if (self.isCreation == true)
    // This is a creation event, and the target class must be found differently
    select any target_cie related by self->SM_EVT[R2906]->SM_SM[R502]
 ->SM_ISM[R517]->O_OBJ[R518]->CSME_CIE[R2961] where
                    (selected.Execution_Engine_ID == exEng.Execution_Engine_ID);
  end if;
  
  // Ensure that a target class was found to avoid a null pointer exception
  if (empty target_cie)
    select one sm_evt related by self->SM_EVT[R2906];
    state_event_name = "unknown name";
    path = "";
    if (not_empty sm_evt)
      state_event_name = sm_evt.get_name();
      path = sm_evt.getPath();
    end if;
    USER::logError(msg:"Could not fire event " + state_event_name +
      " because no target class could be found.",path:path);
    exEng.unlockQueue(queue_name:"I_EQE");
    return;
  end if;


  // Grab all events pending for the target class that are not to self or are
  // creation events
  select many evts_pending_for_target_clazz related by target_cie->I_EVI[R2931]
                           where selected.Sent_By_CIE_ID != target_cie.CIE_ID
                           or selected.isCreation == true;

  // Find the event that will be last to be processed in the queue
  for each evtI in evts_pending_for_target_clazz
    select one nEvt related by evtI->I_EVI[R2908.''will be processed after''];
    if (empty nEvt)
      // Add this event to the end of the pending event list
      relate self to evtI across R2908.''will be processed before'';
    end if;
  end for;
  select any eventQueueEntry related by exEng->I_EQE[R2944] where (selected.Next_Event_Queue_Entry_ID == GD::NULL_UNIQUE_ID());
  create object instance newEventQueueEntry of I_EQE;
  relate self to exEng across R2944 using newEventQueueEntry;
  if (not_empty eventQueueEntry)
    relate newEventQueueEntry to eventQueueEntry across R2945.''precedes'';
  end if;
  // Make this event pending for the target class
  relate self to target_cie across R2931;
  exEng.unlockQueue(queue_name:"I_EQE");
end if;
',
	1,
	'',
	"1968083e-f6e7-4fc7-bd55-10d1ff714092");
INSERT INTO O_TFR
	VALUES ("fcab1079-0d75-447b-9dc3-5f4d06448acd",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'createInstance',
	'This operation is responsible for creating a new instance of a class when a
pending event is generated for a creation transition.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	' // Instance:Pending Event.createInstance()

select one evt related by self->SM_EVT[R2906];
select one ee related by self->I_EQE[R2944]->I_EXE[R2944];
select any newClass related by evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
                            ->CSME_CIE[R2961] where
                       (selected.Execution_Engine_ID == ee.Execution_Engine_ID);

create object instance newInst of I_INS;
relate newInst to newClass across R2962;

// Relate this pending event to its instance
relate self to newInst across R2935;
relate newInst to ee across R2957;


// Create attribute values for each attribute of the class
// and relate the state machine to this instance if it has one.
newInst.initialize(initializeState:false);

// Before enqueueing with the new instance, remove
// self from the appropriate current event queue
ee.lockQueue(queue_name:"I_EQE");
select one eqe related by self->I_EQE[R2944];
if (not_empty eqe)
  select one ee related by eqe->I_EXE[R2944];
  unrelate self from ee across R2944 using eqe;
  eqe.dispose();
end if;
ee.unlockQueue(queue_name:"I_EQE");

ee.lockQueue(queue_name:"I_SQE");
select one sqe related by self->I_SQE[R2946];
if (not_empty sqe)
  select one ee related by sqe->I_EXE[R2946];
  unrelate self from ee across R2946 using sqe;
  sqe.dispose();
end if;
ee.unlockQueue(queue_name:"I_SQE");
      
// Re-fire this event so it can be set to pending for the new instance
self.fire();

// Execute this creation event for the newly created instance
ee.lockQueue(queue_name:"I_EQE");
select one evQEntry related by self->I_EQE[R2944];
select one stack related by evQEntry->I_EXE[R2944]->I_STACK[R2930]
       where (selected.Stack_ID == param.stack_id);
newInst.takeEvent(stack_id:param.stack_id, step_in:param.step_in,
                            event_queue_entry_id:evQEntry.Event_Queue_Entry_ID);
ee.unlockQueue(queue_name:"I_EQE");
                            ',
	1,
	'',
	"c751e51c-99c8-4895-911e-7bc050876f16");
INSERT INTO O_TPARM
	VALUES ("595e79af-d1c4-4263-b8ba-addc3a5f0426",
	"fcab1079-0d75-447b-9dc3-5f4d06448acd",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d217c00c-08e5-4c67-be01-59f5dce49c42",
	"fcab1079-0d75-447b-9dc3-5f4d06448acd",
	'step_in',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"595e79af-d1c4-4263-b8ba-addc3a5f0426",
	'');
INSERT INTO O_TFR
	VALUES ("6c5439eb-a848-4c88-94b1-223f0bbd3946",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'getValue',
	'Translate:native',
	"a5d8b590-a627-4af4-afdf-152c889769b6",
	1,
	'return this;',
	0,
	'',
	"ff83077b-137c-4fda-bbcb-b45ccbc8939c");
INSERT INTO S_DT_PROXY
	VALUES ("a5d8b590-a627-4af4-afdf-152c889769b6",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("fcfecc0e-03f7-4e00-a3d8-726e19fb75d5",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'deliverAs',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Pending Event.deliverAs()
// Used for polymorphic event delivery only. The event instance is removed
// from the original target instance and retargeted to the new instance, event
// type and data are also massaged as required so that the event instance looks
// to the new recipient exactly like an event generated to it directly.
select any evt from instances of SM_EVT where selected.SMevt_ID == param.evt_id;
select any targetInst from instances of I_INS where
                                           selected.Inst_ID == param.to_inst_id;
select one exEng related by  self->I_EXE[R2964];

// Remove from the event queue
exEng.lockQueue(queue_name:"I_EQE");
select one eqe related by self->I_EQE[R2944];
if (not_empty eqe)
  eqe.dispose();
end if;
exEng.unlockQueue(queue_name:"I_EQE");

exEng.lockQueue(queue_name:"I_SQE");
select one sqe related by self->I_SQE[R2946];
if (not_empty sqe)
  sqe.dispose();
end if;
exEng.unlockQueue(queue_name:"I_SQE");

select one oldPendingInst related by self->I_INS[R2907];
select one oldTargetInst related by self->I_INS[R2935];
if (not_empty oldPendingInst and oldPendingInst != oldTargetInst)
  pathMsg = "<No Path Available - Empty instance>";
    if (not_empty  evt)
      pathMsg =  evt.getPath();
    end if;
	USER::logError(msg:"Different instances found across R2907 and R2935",path:pathMsg);
end if;
// Disarm event
unrelate self from oldPendingInst across R2907;
// Retarget the event
if (oldPendingInst != targetInst)
  unrelate self from oldTargetInst across R2935;
  relate self to targetInst across R2935;
end if;
select one oldEvent related by self->SM_EVT[R2906];
if (oldEvent != evt)
  // Migrate event type
  unrelate self from oldEvent across R2906;
  relate self to evt across R2906;
  // Migrate the arguments
  select many evdivs related by self->I_DIV[R2933];
  select many evdis related by evt->SM_EVTDI[R532];
  for each evdiv in evdivs
    select one evdi related by evdiv->SM_EVTDI[R2934];
    for each targetEvdi in evdis
      if (not_empty evdi and targetEvdi.Name == evdi.Name)
        unrelate evdiv from evdi across R2934;
        relate evdiv to targetEvdi across R2934;
      end if;
    end for;
  end for;
end if;
// Deliver the new event asynchronously . . . .
self.fire();',
	1,
	'',
	"fcab1079-0d75-447b-9dc3-5f4d06448acd");
INSERT INTO O_TPARM
	VALUES ("55e8fd26-32e3-462c-9e84-fae2a7e76407",
	"fcfecc0e-03f7-4e00-a3d8-726e19fb75d5",
	'evt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d1e6a9f1-01ef-4229-8d11-18436f00d579",
	"fcfecc0e-03f7-4e00-a3d8-726e19fb75d5",
	'to_inst_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cf2de374-32e3-477c-b621-2b8af92a0af2",
	'');
INSERT INTO O_TPARM
	VALUES ("8de4cf53-31c9-4327-827d-f4f4aaab53b7",
	"fcfecc0e-03f7-4e00-a3d8-726e19fb75d5",
	'stack_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"55e8fd26-32e3-462c-9e84-fae2a7e76407",
	'');
INSERT INTO O_TPARM
	VALUES ("cf2de374-32e3-477c-b621-2b8af92a0af2",
	"fcfecc0e-03f7-4e00-a3d8-726e19fb75d5",
	'step_in',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"8de4cf53-31c9-4327-827d-f4f4aaab53b7",
	'');
INSERT INTO O_TFR
	VALUES ("c751e51c-99c8-4895-911e-7bc050876f16",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'clone',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'// Pending Event.clone()
create object instance new_event of I_EVI;

select one engine related by self->I_EXE[R2964];
if(not_empty engine)
  relate new_event to engine across R2964;
end if;

select one source related by self->I_INS[R2937];
if (not_empty source)
  relate source to new_event across R2937;
end if;

select one target related by self->I_INS[R2935];
if (not_empty target)
  relate target to new_event across R2935;
end if;

select one sm_evt related by self->SM_EVT[R2906];
if (not_empty sm_evt)
  relate new_event to sm_evt across R2906;
end if;

select one source_class related by self->CSME_CIE[R2938];
if (not_empty source_class)
  relate source_class to new_event across R2938;
end if;

select one model_class related by self->CSME_CIE[R2931];
if (not_empty model_class)
  relate model_class to new_event across R2931;
end if;
//
// Clone the event arguments
//
select many args related by self->I_DIV[R2933];
for each arg in args
  create object instance new_arg of I_DIV;
  relate new_arg to new_event across R2933;
  select one evdi related by arg->SM_EVTDI[R2934];
  if(not_empty evdi)
    relate new_arg to evdi across R2934;
  else
    select one ppdi related by arg->C_PP[R2956];
    if(not_empty ppdi)
      relate new_arg to ppdi across R2956;
    end if;
  end if;
  create object instance new_evtRtVal of RV_RVL;
  relate new_evtRtVal to new_arg across R3303;
  select one evtRtVal related by arg->RV_RVL[R3303];
  new_evtRtVal.copyValue(from:evtRtVal.RuntimeValue_ID);
end for;
return new_event.Event_ID;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_BATTR
	VALUES ("07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_ATTR
	VALUES ("07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"00000000-0000-0000-0000-000000000000",
	'Event_ID',
	'',
	'',
	'Event_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("febec42e-b1de-4f9b-8b3a-22c0ab478139",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_BATTR
	VALUES ("febec42e-b1de-4f9b-8b3a-22c0ab478139",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_ATTR
	VALUES ("febec42e-b1de-4f9b-8b3a-22c0ab478139",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	'isExecuting',
	'',
	'',
	'isExecuting',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("113a8423-ed61-496f-ad9d-fe65d47af86d",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_BATTR
	VALUES ("113a8423-ed61-496f-ad9d-fe65d47af86d",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_ATTR
	VALUES ("113a8423-ed61-496f-ad9d-fe65d47af86d",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"febec42e-b1de-4f9b-8b3a-22c0ab478139",
	'isCreation',
	'',
	'',
	'isCreation',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"85bdf335-51a2-4603-b6af-19ba8f7a45e5",
	0,
	"cdb80faa-5a5c-42cb-a807-72e5ffcc371d",
	"40e9c7ff-4c36-4c05-be7b-3d85eabd0607",
	"a9832fe7-2149-4c9d-afe4-a579d8078223",
	"fc80b2db-2397-4597-8e93-5e5548decbfd",
	"ae2dc2c6-a309-4476-9c64-1ca046d2b735",
	"277ac6a2-1351-4b88-aa8c-d1d55691727f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'State Machine Event',
	'SMevt_ID',
	'R2906.''is instance of''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"40e9c7ff-4c36-4c05-be7b-3d85eabd0607",
	"a9832fe7-2149-4c9d-afe4-a579d8078223",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("cdb80faa-5a5c-42cb-a807-72e5ffcc371d",
	"85bdf335-51a2-4603-b6af-19ba8f7a45e5",
	0,
	"40e9c7ff-4c36-4c05-be7b-3d85eabd0607",
	"fc80b2db-2397-4597-8e93-5e5548decbfd",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("ae2dc2c6-a309-4476-9c64-1ca046d2b735",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"cdb80faa-5a5c-42cb-a807-72e5ffcc371d",
	"85bdf335-51a2-4603-b6af-19ba8f7a45e5",
	1,
	'SMevt_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("cdb80faa-5a5c-42cb-a807-72e5ffcc371d",
	"85bdf335-51a2-4603-b6af-19ba8f7a45e5",
	'../../State Machine/State Machine Event/State Machine Event.xtuml');
INSERT INTO O_ATTR
	VALUES ("ae2dc2c6-a309-4476-9c64-1ca046d2b735",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"113a8423-ed61-496f-ad9d-fe65d47af86d",
	'SMevt_ID',
	'',
	'',
	'SMevt_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	0,
	"1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"6b9b06b8-233d-41b2-b603-a706ffa6e7ea",
	"38145eac-62a9-4bfa-b6cc-2afbde757f71",
	"5302de2a-5568-49da-8a2c-854f8494e29a",
	"2331f210-fc21-4d45-a5a1-c202b2e55ac1",
	"28f2e8aa-1ffe-4129-972b-62b50e5bbf49",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Instance',
	'Inst_ID',
	'R2907.''is pending for''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"6b9b06b8-233d-41b2-b603-a706ffa6e7ea",
	"38145eac-62a9-4bfa-b6cc-2afbde757f71",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	0,
	"6b9b06b8-233d-41b2-b603-a706ffa6e7ea",
	"5302de2a-5568-49da-8a2c-854f8494e29a",
	'../Instance.xtuml');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	0,
	"1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"516ee83e-68f9-49ca-bf3c-aa62284a5d25",
	"c8d67362-0068-4df8-aa0d-1cd99f411b15",
	"1b72382c-373d-40b6-a67f-a6878c2f7ec2",
	"2331f210-fc21-4d45-a5a1-c202b2e55ac1",
	"b9b564c9-3ecc-4cf2-a632-fcc42f094ba9",
	"28f2e8aa-1ffe-4129-972b-62b50e5bbf49",
	0,
	'',
	'Instance',
	'Inst_ID',
	'R2935.''targets''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"516ee83e-68f9-49ca-bf3c-aa62284a5d25",
	"c8d67362-0068-4df8-aa0d-1cd99f411b15",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	0,
	"516ee83e-68f9-49ca-bf3c-aa62284a5d25",
	"1b72382c-373d-40b6-a67f-a6878c2f7ec2",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("2331f210-fc21-4d45-a5a1-c202b2e55ac1",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	1,
	'Inst_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	'../Instance/Instance.xtuml');
INSERT INTO O_ATTR
	VALUES ("2331f210-fc21-4d45-a5a1-c202b2e55ac1",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"ae2dc2c6-a309-4476-9c64-1ca046d2b735",
	'Target_Inst_ID',
	'',
	'Target_',
	'Inst_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	0,
	"07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"39175f5f-b4a3-46c5-91f9-0432822bd752",
	"3974d07b-5b3a-4bbb-a5d6-d09b3c204aea",
	"ce821753-8370-43c1-8340-2a26c13e9d62",
	"2de6d1be-35e1-41e5-9a70-d9d4279d14e6",
	"a893f0e8-ec8e-4c6f-b2a7-692929ee19e4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Pending Event',
	'Event_ID',
	'R2908.''will be processed after''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"39175f5f-b4a3-46c5-91f9-0432822bd752",
	"3974d07b-5b3a-4bbb-a5d6-d09b3c204aea",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	0,
	"39175f5f-b4a3-46c5-91f9-0432822bd752",
	"ce821753-8370-43c1-8340-2a26c13e9d62",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("2de6d1be-35e1-41e5-9a70-d9d4279d14e6",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	1,
	'Event_ID');
INSERT INTO O_ATTR
	VALUES ("2de6d1be-35e1-41e5-9a70-d9d4279d14e6",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"2331f210-fc21-4d45-a5a1-c202b2e55ac1",
	'nextEvent_ID',
	'',
	'next',
	'Event_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	0,
	"1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"fe428afe-926f-4eeb-9d5a-ef5abafd7148",
	"a94ddbb1-2faf-4585-a3a1-a78640869a1f",
	"aa427e3b-196d-404b-aacf-a94090f0a923",
	"fed0b49f-aa9e-4765-ab19-17766d97fae4",
	"fa3ee809-60e9-4248-8dd5-80ff0781ee2e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Instance',
	'Inst_ID',
	'R2937.''was sent from''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"fe428afe-926f-4eeb-9d5a-ef5abafd7148",
	"a94ddbb1-2faf-4585-a3a1-a78640869a1f",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	0,
	"fe428afe-926f-4eeb-9d5a-ef5abafd7148",
	"aa427e3b-196d-404b-aacf-a94090f0a923",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("fed0b49f-aa9e-4765-ab19-17766d97fae4",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"1b5a001c-6820-4f2a-9f31-c9fd64c95438",
	"5aebb5bf-71fe-472f-ad1c-948c22e96eba",
	1,
	'Inst_ID');
INSERT INTO O_ATTR
	VALUES ("fed0b49f-aa9e-4765-ab19-17766d97fae4",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"2de6d1be-35e1-41e5-9a70-d9d4279d14e6",
	'Sent_By_Inst_ID',
	'',
	'Sent_By_',
	'Inst_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	0,
	"07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"03eae908-9cb2-407f-bb0d-d27410f45590",
	"81d9b6b2-0b8d-4179-b79b-5346c7bfcb98",
	"dc98e43b-6cd1-48c7-b1b7-1577d67ce878",
	"a674c7de-f12f-4c42-9272-f614fd3a97fb",
	"e173809c-2e27-42b5-8f23-f2563a5c4d65",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Pending Event',
	'Event_ID',
	'R2939.''will be processed before''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"03eae908-9cb2-407f-bb0d-d27410f45590",
	"81d9b6b2-0b8d-4179-b79b-5346c7bfcb98",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	0,
	"03eae908-9cb2-407f-bb0d-d27410f45590",
	"dc98e43b-6cd1-48c7-b1b7-1577d67ce878",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("a674c7de-f12f-4c42-9272-f614fd3a97fb",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	1,
	'Event_ID');
INSERT INTO O_ATTR
	VALUES ("a674c7de-f12f-4c42-9272-f614fd3a97fb",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"fed0b49f-aa9e-4765-ab19-17766d97fae4",
	'next_self_Event_ID',
	'',
	'next_self_',
	'Event_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("366a7374-c9d8-4f4d-9104-22ba77f3bbe6",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	'// Pending Event.Label
result = "";
select one evt related by self ->SM_EVT[R2906];
  if (not_empty evt)
    select one signalEvt related by evt->SM_SEVT[R525]->SM_SGEVT[R526];
    if(not_empty signalEvt)
      result = signalEvt.get_event_text();
    else
      result = evt.get_event_text();
    end if;
    select one timer related by self->I_TIM[R2940];
    if (not_empty timer)
      result = result + " delayed by " + GD::int_to_string(value:timer.delay) + " uS";
    end if;
  end if;
self.Label = result;',
	1);
INSERT INTO O_BATTR
	VALUES ("366a7374-c9d8-4f4d-9104-22ba77f3bbe6",
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_ATTR
	VALUES ("366a7374-c9d8-4f4d-9104-22ba77f3bbe6",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"46121927-68e5-4c68-9d20-b9d01850dafe",
	'Label',
	'',
	'',
	'Label',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	0,
	"8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"c83b3b4b-37fa-471d-ae30-a4518297d3c3",
	"d3f8bd23-d0e0-4b68-9070-e99da63d0e5d",
	"b727ec9b-e9c6-4b04-a96e-55135c222aac",
	"3058e761-9337-4cc2-87f9-57074736a3dd",
	"a1512e5d-d839-414a-b70d-241e5fae30d9",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Component Instance',
	'Execution_Engine_ID',
	'R2964.''is pending in''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"c83b3b4b-37fa-471d-ae30-a4518297d3c3",
	"d3f8bd23-d0e0-4b68-9070-e99da63d0e5d",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	0,
	"c83b3b4b-37fa-471d-ae30-a4518297d3c3",
	"b727ec9b-e9c6-4b04-a96e-55135c222aac",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("3058e761-9337-4cc2-87f9-57074736a3dd",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	1,
	'Execution_Engine_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	'../Component Instance/Component Instance.xtuml');
INSERT INTO O_ATTR
	VALUES ("3058e761-9337-4cc2-87f9-57074736a3dd",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"d73ce05d-cf61-40e3-98c8-3f09bedf3d98",
	'Execution_Engine_ID',
	'',
	'',
	'Execution_Engine_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	0,
	"8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"231177ef-9124-4cef-b90a-d6983429d068",
	"fd165164-4fd7-4aa3-8f49-31fa41771c89",
	"b05b2cab-c3ee-4c70-bb68-1d8524e9ae80",
	"46121927-68e5-4c68-9d20-b9d01850dafe",
	"7e5fd3af-ff31-4565-bad3-4706affa08d6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Component Instance',
	'Execution_Engine_ID',
	'R2976.''originates from''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"231177ef-9124-4cef-b90a-d6983429d068",
	"fd165164-4fd7-4aa3-8f49-31fa41771c89",
	'../Instance.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	0,
	"231177ef-9124-4cef-b90a-d6983429d068",
	"b05b2cab-c3ee-4c70-bb68-1d8524e9ae80",
	'../Instance.xtuml');
INSERT INTO O_RATTR
	VALUES ("46121927-68e5-4c68-9d20-b9d01850dafe",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"8737e339-840c-4a57-a139-d2dae6d1b3ad",
	"7e45ee45-6a73-41bb-9135-189c5ce8a010",
	1,
	'Execution_Engine_ID');
INSERT INTO O_ATTR
	VALUES ("46121927-68e5-4c68-9d20-b9d01850dafe",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"3058e761-9337-4cc2-87f9-57074736a3dd",
	'Originating_Execution_Engine_ID',
	'',
	'Originating_',
	'Execution_Engine_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	0,
	"98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"a8106683-6da1-4b92-8496-73fd1949acdd",
	"2e0a0190-6cae-484f-91b3-032d223a2daa",
	"fc0dfa87-699b-41e3-8db7-fef3d8b7c810",
	"d73ce05d-cf61-40e3-98c8-3f09bedf3d98",
	"b9bfab98-2aca-4f5e-989a-f1fa87e79cfb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Class In Engine',
	'CIE_ID',
	'R2938.''was sent from''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"a8106683-6da1-4b92-8496-73fd1949acdd",
	"2e0a0190-6cae-484f-91b3-032d223a2daa",
	'../../Engine/Class State Machine Execution/Class State Machine Execution.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	0,
	"a8106683-6da1-4b92-8496-73fd1949acdd",
	"fc0dfa87-699b-41e3-8db7-fef3d8b7c810",
	'../../Engine/Class State Machine Execution/Class State Machine Execution.xtuml');
INSERT INTO O_RATTR
	VALUES ("d73ce05d-cf61-40e3-98c8-3f09bedf3d98",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	1,
	'CIE_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	'../../Engine/Class State Machine Execution/Class In Engine/Class In Engine.xtuml');
INSERT INTO O_ATTR
	VALUES ("d73ce05d-cf61-40e3-98c8-3f09bedf3d98",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"e268b200-f17d-4b95-9148-a82f67b9d430",
	'CIE_ID',
	'',
	'',
	'CIE_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	0,
	"98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"ac46ee16-56e0-4ad2-89e3-db8d8e8d0a26",
	"93014122-ba25-4311-97ab-8ffbf92127d2",
	"03b6cdb3-1844-4877-8905-6f7ccb8311ce",
	"e268b200-f17d-4b95-9148-a82f67b9d430",
	"4166872d-045c-4cf0-ac21-0327c82786a0",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Class In Engine',
	'CIE_ID',
	'R2931.''has target''');
INSERT INTO R_RGO_PROXY
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	"ac46ee16-56e0-4ad2-89e3-db8d8e8d0a26",
	"93014122-ba25-4311-97ab-8ffbf92127d2",
	'../../Engine/Class State Machine Execution/Class State Machine Execution.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	0,
	"ac46ee16-56e0-4ad2-89e3-db8d8e8d0a26",
	"03b6cdb3-1844-4877-8905-6f7ccb8311ce",
	'../../Engine/Class State Machine Execution/Class State Machine Execution.xtuml');
INSERT INTO O_RATTR
	VALUES ("e268b200-f17d-4b95-9148-a82f67b9d430",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"98089fd3-5381-4a18-be45-e176d1cf6d2f",
	"c39dc7f7-1fa8-4893-9ea8-724233d99327",
	1,
	'CIE_ID');
INSERT INTO O_ATTR
	VALUES ("e268b200-f17d-4b95-9148-a82f67b9d430",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	"a674c7de-f12f-4c42-9272-f614fd3a97fb",
	'Sent_By_CIE_ID',
	'',
	'Sent_By_',
	'CIE_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_OIDA
	VALUES ("07d2cf78-1ca0-4f0b-8513-596b0a9b62d8",
	"b67a36cd-414f-401a-a340-40d48cbb4049",
	0,
	'Event_ID');
INSERT INTO O_ID
	VALUES (1,
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO O_ID
	VALUES (2,
	"b67a36cd-414f-401a-a340-40d48cbb4049");
INSERT INTO PE_PE
	VALUES ("b67a36cd-414f-401a-a340-40d48cbb4049",
	1,
	"7b924115-e9f0-4229-8534-5eb4ea221f03",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("7b924115-e9f0-4229-8534-5eb4ea221f03",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Instance',
	'// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
Persistent:false
Import: java.util.concurrent.locks.ReentrantLock',
	900,
	'../Instance.xtuml');
