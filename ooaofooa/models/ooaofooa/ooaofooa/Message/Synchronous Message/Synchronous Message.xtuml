-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'Synchronous Message',
	1012,
	'MSG_SM',
	'This subclass represents, and holds its unique data, a synchronous message.  The
types of synchronous messages are:

Informal Synchronous Message
Bridge Message
Operation Message
Function Message',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("3344f355-0321-4db2-83c7-6798bef06bfc",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one om related by self->MSG_O[R1020];
select one fm related by self->MSG_F[R1020];
select one bm related by self->MSG_B[R1020];
select one im related by self->MSG_ISM[R1020];
select one iOp related by self->MSG_IOP[R1020];
// dispose formal messages
if(not_empty om)
  unrelate self from om across R1020;
  om.dispose();
end if;
if(not_empty fm)
  unrelate self from fm across R1020;
  fm.dispose();
end if;
if(not_empty bm)
  unrelate self from bm across R1020;
  bm.dispose();
end if;
// dispose informal messages
if(not_empty im)
  unrelate self from im across R1020;
  im.dispose();
end if;
if not_empty iOp
  unrelate self from iOp across R1020;
  iOp.dispose();
end if;
// delete supertype, and unrelate
select one msg related by self->MSG_M[R1018];
if(not_empty msg)
  unrelate self from msg across R1018;
  msg.dispose();
end if;
delete object instance self;',
	1,
	'',
	"f88f6844-8722-476d-be39-44e2a1f3e214");
INSERT INTO O_TFR
	VALUES ("2a027ce2-d0ce-4b5e-9d7c-80f0cc005cc8",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'unformalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// dispose the formal message
select one om related by self->MSG_O[R1020];
select one fm related by self->MSG_F[R1020];
select one bm related by self->MSG_B[R1020];
select one iOp related by self->MSG_IOP[R1020];
if(not_empty om)
  om.dispose();
elif(not_empty fm)
  fm.dispose();
elif(not_empty bm)
  bm.dispose();
elif not_empty iOp
  iOp.dispose();
end if;
// unrelate from target element if under a communication
select one message related by self->MSG_M[R1018];
message.deassociateFromTarget();
self.disposeFormalArguments();
// create an informal synch message
create object instance im of MSG_ISM;
relate im to self across R1020;',
	1,
	'',
	"91015e8b-d08d-4e00-aedf-1185d776a4c4");
INSERT INTO O_TFR
	VALUES ("f6106f13-d405-4a03-95c5-d81282a358b3",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.InformalName = "Informal Message";
// create informal subtype
create object instance im of MSG_ISM;
relate im to self across R1020;',
	1,
	'',
	"db3c902d-2bbe-4089-857f-a4645fe414ad");
INSERT INTO O_TFR
	VALUES ("6a6d2e1e-639b-475f-86a1-63c77b1aab01",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'newArgument',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// have the supertype create the argument
select one msg related by self->MSG_M[R1018];
if(not_empty msg)
  msg.newArgument();
end if;',
	1,
	'',
	"f6106f13-d405-4a03-95c5-d81282a358b3");
INSERT INTO O_TFR
	VALUES ("f88f6844-8722-476d-be39-44e2a1f3e214",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'canRename',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// only informal messages can be renamed
select one im related by self->MSG_ISM[R1020];
if(not_empty im)
  return true;
else
  return false;
end if;',
	1,
	'',
	"2d5bd1dd-9b1a-4e7f-8573-fe39c2bc4988");
INSERT INTO O_TFR
	VALUES ("ec744b98-109c-45f3-98a0-821f35510649",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'get_name',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'return self.Label;',
	1,
	'',
	"c8f08c02-c21d-439a-94e9-76a2d196f980");
INSERT INTO O_TFR
	VALUES ("db3c902d-2bbe-4089-857f-a4645fe414ad",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'get_style',
	'',
	"05be3a7b-3886-4857-8a5e-5c08c37293ab",
	1,
	'if(param.at == End::End)
  return Style::FilledArrow;
else
  return Style::Solid;
end if;',
	1,
	'',
	"59b537fc-ba8a-4866-a5e9-48b824458a62");
INSERT INTO O_TPARM
	VALUES ("32230e4b-4b52-48fc-a307-3e81768272c3",
	"db3c902d-2bbe-4089-857f-a4645fe414ad",
	'at',
	"f9390a28-d78e-4364-b005-bcf6767b5871",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f9390a28-d78e-4364-b005-bcf6767b5871",
	"00000000-0000-0000-0000-000000000000",
	'End',
	'Text is positioned at a user adjustable offset from the Start, Middle and End of a connector. Start_Fixed and End_Fixed specify fixed position text found at the start and end of some connectors.
-------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO S_DT_PROXY
	VALUES ("05be3a7b-3886-4857-8a5e-5c08c37293ab",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("c8f08c02-c21d-439a-94e9-76a2d196f980",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'get_connector_text',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'if(param.at == End::Middle)
  result = self.Label;
  if(self.ResultTarget != "")
    if(result == "")
      result = self.ResultTarget;
    else
      result = self.ResultTarget + " = " + result;
    end if;
  end if;
  select many args related by self->MSG_M[R1018]->MSG_A[R1001];
  if(not self.isFormal)
    select many args related by self->MSG_M[R1018]->MSG_A[R1000];
  end if;
  if(not_empty args)
    result = result + " (";
    count = 0;
    for each arg in args
      count = count + 1;
      result = result + arg.Label;
      if(count != cardinality args)
        result = result + ", ";
      end if;
    end for;  
    result = result + ")";
  end if;
  if(self.ReturnValue != "")
    if(result == "")
      result = self.ReturnValue;
    else
      result = result + ":" + self.ReturnValue;
    end if;
  end if;
  if(self.SequenceNumb != "")
    if(result != "")
      result = ": " + result;
    end if;
    result = self.SequenceNumb + result;
  end if;
  return result;
elif(param.at == End::Start)
  if(self.GuardCondition != "")
    return "[" + self.GuardCondition + "]";
  end if;
  return "";
else
  return "";
end if;',
	1,
	'',
	"c56f9ec4-d17e-4ef9-9861-cb8926c5e191");
INSERT INTO O_TPARM
	VALUES ("f7d45167-ea1f-4e9f-9e0c-057d67b1364f",
	"c8f08c02-c21d-439a-94e9-76a2d196f980",
	'Obj_ID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("1f65f271-5d4d-498e-8ee3-f0c6dcca72b1",
	"c8f08c02-c21d-439a-94e9-76a2d196f980",
	'Obj_TypeIsImported',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f7d45167-ea1f-4e9f-9e0c-057d67b1364f",
	'');
INSERT INTO O_TPARM
	VALUES ("474dc89d-ba07-45b7-ad34-c609e677ce6b",
	"c8f08c02-c21d-439a-94e9-76a2d196f980",
	'at',
	"f9390a28-d78e-4364-b005-bcf6767b5871",
	0,
	'',
	"1f65f271-5d4d-498e-8ee3-f0c6dcca72b1",
	'');
INSERT INTO O_TPARM
	VALUES ("92a569b5-6503-4b02-b7f9-d3c15c7f2b8d",
	"c8f08c02-c21d-439a-94e9-76a2d196f980",
	'parent_ID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"474dc89d-ba07-45b7-ad34-c609e677ce6b",
	'');
INSERT INTO O_TFR
	VALUES ("2d5bd1dd-9b1a-4e7f-8573-fe39c2bc4988",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'actionFilter',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one packageableElem related by self->MSG_M[R1018]->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one message related by self->MSG_M[R1018];
if(empty message)
  // This can be null during unit testing, just return false
  // if this is the case
  return false;
end if;
if(empty package and message.participatesInCommunication)
  select one package related by self->MSG_M[R1018]->SQ_P[R1007]->PE_PE[R8001]
                                                                ->EP_PKG[R8000];
end if;
select one component related by packageableElem->C_C[R8003];

if(param.name == "can")
  if(param.value == "addArg")
    return not self.isFormal;
  elif(param.value == "unform")
    return self.isFormal;
  elif(param.value == "formBrg")
    select one eep related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_EEP[R930];
    if(empty eep)
      // try the communication line
      select one eep related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_LS[R930]
                                                     ->SQ_P[R940]->SQ_EEP[R930];
    end if;
    if(not_empty eep)
      // another filter will be used for communication
      // diagrams
      if(not_empty message and message.participatesInCommunication)
        return false;
      end if;
      // if there is only one possible operation, and we are formal
      // do not allow
      if(self.isFormal)
        if(eep.getBridgeOperationCount() == 1)
          return false;
        end if;
      end if;
      return eep.formalEEHasBridgeOperations();
    end if;
  elif(param.value == "formPkgFunc")
    if(message.participatesInCommunication)
      // another filter will handle
      return false;
    end if;
    select one pp related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_PP[R930];
    if(empty pp)
      // try the communication line
      select one pp related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_LS[R930]
                                                      ->SQ_P[R940]->SQ_PP[R930];
    end if;
    if(not_empty pp)
      if(self.isFormal)
        // if formal and only one possibility do not allow
        if(pp.getFunctionCount() == 1)
          return false;
        end if;
      end if;
      return pp.getFunctionCount() != 0;
    end if;
  elif(param.value == "formClassOp")
    select one cip related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_CIP[R930];
    select one cp related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_CP[R930];
    if(empty cp)
      // try the communication line
      select one cp related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_LS[R930]
                                                      ->SQ_P[R940]->SQ_CP[R930];
    end if;
    if(not_empty cip)
      // if the instance is shown on a communication
      // do not allow
        if(message.participatesInCommunication)
          return false;
        else
          // if there is only one possible operation, and we are formal
          // do not allow
          if(self.isFormal)
            if(cip.getClassOperationCount() == 1)
              return false;
            end if;
          end if;
          return cip.formalClassHasCBOperations();
        end if;
    elif(not_empty cp)
        if(message.participatesInCommunication)
          return false;
        end if;
      // if there is only one possible operation, and we are formal
      // do not allow
      if(self.isFormal)
        if(cp.getClassOperationCount() == 1)
          return false;
        end if;
      end if;
      return cp.formalClassHasCBOperations();
    end if;
  elif(param.value == "formInstOp")  
    select one ls related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_LS[R930];
    if(not_empty ls)
      select one cip related by ls->SQ_P[R940]->SQ_CIP[R930];
      if(not_empty message and message.participatesInCommunication)
        // another filter will handle the communication case
        return false;
      end if;
      if(not_empty cip)
        // if there is only one possible operation, and we are formal
        // do not allow
        if(self.isFormal)
          if(cip.getInstanceOperationCount() == 1)
            return false;
          end if;
        end if;
        return cip.formalClassHasIBOperations();
      end if;
    end if;
  elif(param.value == "formIOp")
    // if there is only one interface operation and we are already
    // formalized with it, then do not allow
    select one operation related by self->MSG_IOP[R1020]->C_IO[R1022];
    if(not_empty operation)
      select one cop related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_COP[R930];
      if(empty cop)
        select one cop related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_LS[R930]
                                                     ->SQ_P[R940]->SQ_COP[R930];
      end if;
      if(not_empty cop)
        if(cop.getInterfaceOperationCount() == 1)
          return false;
        end if;
      end if;
    end if;
  
    select one cop related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_COP[R930];
    if(empty cop)
      select one cop related by self->MSG_M[R1018]->SQ_P[R1007]->SQ_LS[R930]
                                                     ->SQ_P[R940]->SQ_COP[R930];
    end if;
    if(not_empty cop)
      // do not allow if on a communication diagram, other
      // filters will handle this
      if(not_empty message and message.participatesInCommunication)
        return false;
      end if;
      return cop.isFormalAndHasIFOperations();
    end if;
  // the following filtering is for communication diagrams
  elif(param.value == "formCommClassOp") or (param.value == "formCommInstOp")
  		 or (param.value == "formCommFunc") or (param.value == "formCommMsgIOp")
  		 or (param.value == "formCommBrg") or (param.value == "formCommPackageFunc")
    
    // if this message is not shown on a communication diagram
    // do not allow
      pkgID = package.Package_ID;

    // if the selection count does not equal two return false, this
    // prevents the menu entries from existing while only one of the
    // elements is selected
    if(Sel::getCurrentSelectionCount() != 2)
      return false;
    end if;
    // if the selection does not contain a participant
    // do not allow
    if(not Util::selectionContainsValidParticipant(from:Util::getCommunicationInstance(id:pkgID)))
      return false;
    end if;
    // additionally check if this message is already formalized
    // to the only available operation
    if(self.isFormal)
      select one participant related by self->MSG_M[R1018]->SQ_P[R1007];
      if(param.value == "formCommClassOp")
        select one cp related by participant->SQ_CP[R930];
        if(not_empty cp)
          if(cp.getClassOperationCount() == 1)
            return false;
          end if;
        end if;
      elif(param.value == "formCommInstOp")
        select one cip related by participant->SQ_CIP[R930];
        if(not_empty cip)
          if(cip.getInstanceOperationCount() == 1)
            return false;
          end if;
        end if;
      elif(param.value == "formCommMsgIOp")
        select one cop related by participant->SQ_COP[R930];
        if(not_empty cop)
          if(cop.getInterfaceOperationCount() == 1)
            return false;
          end if;
        end if;
      elif(param.value == "formCommFunc")
          // will be a package participant
          select one pp related by participant->SQ_PP[R930];
          if(not_empty pp)
            if(pp.getFunctionCount() == 1)
              return false;
            end if;
          end if;
      elif(param.value == "formCommBrg")
        select one eep related by participant->SQ_EEP[R930];
        if(not_empty eep)
          if(eep.getBridgeOperationCount() == 1)
            return false;
          end if;
        end if;
      end if;
    end if;
    return true;
  end if;
elif(param.name == "show")
  if(param.value == "noTargetMessage")
    if(Sel::getCurrentSelectionCount() != 1)
      return false;
    end if;
    select one target related by self->MSG_M[R1018]->SQ_P[R1007];
    return empty target;
  end if;
end if;
return false;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("d8143be2-dcf9-4429-a709-b9db63c22a52",
	"2d5bd1dd-9b1a-4e7f-8573-fe39c2bc4988",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("09412349-61ef-4805-9517-1cbce8d062ab",
	"2d5bd1dd-9b1a-4e7f-8573-fe39c2bc4988",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d8143be2-dcf9-4429-a709-b9db63c22a52",
	'');
INSERT INTO O_TFR
	VALUES ("59b537fc-ba8a-4866-a5e9-48b824458a62",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.Msg_ID;',
	1,
	'',
	"ec744b98-109c-45f3-98a0-821f35510649");
INSERT INTO O_TFR
	VALUES ("7159a9b9-3cc6-49ee-9b13-5414cc71d16c",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'disposeFormalArguments',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one parent related by self->MSG_M[R1018];
parent.disposeFormalArguments();',
	1,
	'',
	"3344f355-0321-4db2-83c7-6798bef06bfc");
INSERT INTO O_TFR
	VALUES ("b1721035-004d-4533-926d-8ac405159247",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'formalizeWithClassOperation',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any operation from instances of O_TFR where (selected.Tfr_ID == param.operationId);
self.prepareForFormalization();
create object instance om of MSG_O;
relate om to self across R1020;
if (not_empty operation)
  relate operation to om across R1011;
end if;
select one message related by self->MSG_M[R1018];
select many oparms related by operation->O_TPARM[R117];
// create message arguments for each parameter
for each oparm in oparms
  create object instance arg of MSG_A;
  create object instance oarg of MSG_OA;
  relate arg to message across R1001;
  relate oarg to arg across R1013;
  relate oarg to oparm across R1015;
  arg.Value = "";
end for;      
',
	1,
	'',
	"f6e2b8b5-16ab-40a3-b881-78fbcba41673");
INSERT INTO O_TPARM
	VALUES ("8284e3af-209a-4795-a345-22c310ee20c4",
	"b1721035-004d-4533-926d-8ac405159247",
	'operationId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("91015e8b-d08d-4e00-aedf-1185d776a4c4",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'prepareForFormalization',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one im related by self->MSG_ISM[R1020];
select one om related by self->MSG_O[R1020];
select one fm related by self->MSG_F[R1020];
select one bm related by self->MSG_B[R1020];
select one iOp related by self->MSG_IOP[R1020];
select one message related by self->MSG_M[R1018];
if(not_empty im)
  unrelate im from self across R1020;
  im.dispose();
elif(not_empty om)
  unrelate om from self across R1020;
  om.dispose();
  message.disposeFormalArguments();
elif(not_empty fm)
  unrelate fm from self across R1020;
  fm.dispose();
  message.disposeFormalArguments();
elif(not_empty bm)
  unrelate bm from self across R1020;
  bm.dispose();
  message.disposeFormalArguments();
elif not_empty iOp
  unrelate iOp from self across R1020;
  iOp.dispose();
  message.disposeFormalArguments();
end if;',
	1,
	'',
	"6a6d2e1e-639b-475f-86a1-63c77b1aab01");
INSERT INTO O_TFR
	VALUES ("f6e2b8b5-16ab-40a3-b881-78fbcba41673",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'formalizeWithBridgeOperation',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any brg from instances of S_BRG where (selected.Brg_ID == param.bridgeId);
select one message related by self->MSG_M[R1018];
self.prepareForFormalization();
create object instance bm of MSG_B;
relate bm to self across R1020;
relate bm to brg across R1012;
select many bparms related by brg->S_BPARM[R21];
for each bparm in bparms
  create object instance arg of MSG_A;
  create object instance barg of MSG_BA;
  relate arg to message across R1001;
  relate barg to arg across R1013;
  relate bparm to barg across R1014;
  arg.Value = "";
end for;',
	1,
	'',
	"7159a9b9-3cc6-49ee-9b13-5414cc71d16c");
INSERT INTO O_TPARM
	VALUES ("1e9326a2-abbc-4e26-ab66-2b26e37708b8",
	"f6e2b8b5-16ab-40a3-b881-78fbcba41673",
	'bridgeId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c56f9ec4-d17e-4ef9-9861-cb8926c5e191",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'formalizeWithFunction',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any function from instances of S_SYNC where (selected.Sync_ID == param.functionId);
select one message related by self->MSG_M[R1018];
self.prepareForFormalization();
create object instance fm of MSG_F;
relate fm to self across R1020;
relate function to fm across R1010;
select many fparms related by function->S_SPARM[R24];
for each fparm in fparms
  create object instance arg of MSG_A;
  create object instance farg of MSG_FA;
  relate arg to message across R1001;
  relate farg to arg across R1013;
  relate fparm to farg across R1016;
  arg.Value = "";
end for;    ',
	1,
	'',
	"b1721035-004d-4533-926d-8ac405159247");
INSERT INTO O_TPARM
	VALUES ("7a584ef0-331a-45f4-93de-c984afbede8e",
	"c56f9ec4-d17e-4ef9-9861-cb8926c5e191",
	'functionId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0f1b27ca-7bb7-48ba-9355-4cd1d78e4f6d",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'formalizeWithInterfaceOperation',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any iOpProp from instances of C_EP where selected.Id == param.iOpId;
if not_empty iOpProp
  select one iOp related by iOpProp->C_IO[R4004];
  if not_empty iOp
    self.prepareForFormalization();
    create object instance ioM of MSG_IOP;
    relate ioM to self across R1020;
    relate ioM to iOp across R1022;
    select one message related by self->MSG_M[R1018];
    // create a message argument for every parameter
    // assigned to this signal
    select many parms related by iOpProp->C_PP[R4006];
    for each parm in parms
      create object instance arg of MSG_A;
      create object instance eparg of MSG_EPA;
      relate arg to message across R1001;
      relate eparg to arg across R1013;
      relate eparg to parm across R1023;
      arg.Value = "";
    end for;
  end if;
end if;
',
	1,
	'',
	"2a027ce2-d0ce-4b5e-9d7c-80f0cc005cc8");
INSERT INTO O_TPARM
	VALUES ("28cc1c03-0d40-4228-854e-c1a26cf532c5",
	"0f1b27ca-7bb7-48ba-9355-4cd1d78e4f6d",
	'iOpId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("dc3f3111-8c83-495e-9881-d84e448bbd02",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'canFormalizeUsingInterfaceOperation',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/**
 *  Filter operation when choosing which interface operation can be used
 *  to formalize this synchronous message
 */

// Check that we are not already formalized to the given interface
// operation
select one currentOperation related by self->MSG_IOP[R1020]->C_IO[R1022];
if(not_empty currentOperation and param.id == currentOperation.Id)
  return false;
end if;
return true;',
	1,
	'',
	"0f1b27ca-7bb7-48ba-9355-4cd1d78e4f6d");
INSERT INTO O_TPARM
	VALUES ("97560c83-e8ac-4630-a3de-94b96f57500e",
	"dc3f3111-8c83-495e-9881-d84e448bbd02",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e9dde430-350d-4264-986c-1a307719a1e1",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'pasteMessageArgument',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one message related by self->MSG_M[R1018];
message.pasteMessageArgument(id:param.id);',
	1,
	'',
	"dc3f3111-8c83-495e-9881-d84e448bbd02");
INSERT INTO O_TPARM
	VALUES ("4c23d78a-1f68-49f9-a9d0-94895d7bf39c",
	"e9dde430-350d-4264-986c-1a307719a1e1",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("aee0c98d-3ae1-441d-b806-d15ec9ff08bc",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'canCopyMessageArgument',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select one message related by self->MSG_M[R1018];
return message.canCopyMessageArgument(id:param.id);',
	1,
	'',
	"e9dde430-350d-4264-986c-1a307719a1e1");
INSERT INTO O_TPARM
	VALUES ("e74c6406-5493-4af7-8bb2-c592b1768b3f",
	"aee0c98d-3ae1-441d-b806-d15ec9ff08bc",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3944b4cd-a888-42f6-85ea-fa6b8397d863",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'canPasteMessageArgument',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'return not self.isFormal;',
	1,
	'',
	"aee0c98d-3ae1-441d-b806-d15ec9ff08bc");
INSERT INTO O_NBATTR
	VALUES ("504d99b3-4d56-49bf-b1ef-809cbeeff0ad",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_BATTR
	VALUES ("504d99b3-4d56-49bf-b1ef-809cbeeff0ad",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("504d99b3-4d56-49bf-b1ef-809cbeeff0ad",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"a9ec605f-3942-433a-a448-aa8d6be00759",
	'ResultTarget',
	'Full Name: Result Target',
	'',
	'ResultTarget',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("694364cc-d418-49a3-a3d0-0a0479e6b2f9",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_BATTR
	VALUES ("694364cc-d418-49a3-a3d0-0a0479e6b2f9",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("694364cc-d418-49a3-a3d0-0a0479e6b2f9",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"504d99b3-4d56-49bf-b1ef-809cbeeff0ad",
	'ReturnValue',
	'Full Name: Return Value',
	'',
	'ReturnValue',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a9ec605f-3942-433a-a448-aa8d6be00759",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_BATTR
	VALUES ("a9ec605f-3942-433a-a448-aa8d6be00759",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("a9ec605f-3942-433a-a448-aa8d6be00759",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"569ecd10-3728-4255-914f-1e561f757381",
	'GuardCondition',
	'Full Name: Guard Condition',
	'',
	'GuardCondition',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("569ecd10-3728-4255-914f-1e561f757381",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_BATTR
	VALUES ("569ecd10-3728-4255-914f-1e561f757381",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("569ecd10-3728-4255-914f-1e561f757381",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"cd95c990-3d56-463f-a2a2-1bba9eb524c6",
	'Descrip',
	'Full Name: Message Description',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("667b3f0e-4bad-4359-9848-b3109178ebea",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'select one ism related by self->MSG_ISM[R1020];
if(not_empty ism)
  self.isFormal = false;
else
  self.isFormal = true;
end if;',
	1);
INSERT INTO O_BATTR
	VALUES ("667b3f0e-4bad-4359-9848-b3109178ebea",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("667b3f0e-4bad-4359-9848-b3109178ebea",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"694364cc-d418-49a3-a3d0-0a0479e6b2f9",
	'isFormal',
	'Full Name: Is Formal',
	'',
	'isFormal',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_DBATTR
	VALUES ("dfa4e611-5827-470c-9c6a-259aa82fe763",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	'result = "";
select one fm related by self->MSG_F[R1020];
select one om related by self->MSG_O[R1020];
select one bm related by self->MSG_B[R1020];
select one iOp related by self->MSG_IOP[R1020];
if(not_empty fm)
  select one func related by fm->S_SYNC[R1010];
  result = func.Name;
elif(not_empty om)
  select one op related by om->O_TFR[R1011];
  result = op.Name;
elif(not_empty bm)
  select one brg related by bm->S_BRG[R1012];
  result = brg.Name;
elif not_empty iOp
  select one interfaceOp related by iOp->C_IO[R1022];
  result = interfaceOp.Name;
else
  result = self.InformalName;
end if;
self.Label = result;',
	1);
INSERT INTO O_BATTR
	VALUES ("dfa4e611-5827-470c-9c6a-259aa82fe763",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("dfa4e611-5827-470c-9c6a-259aa82fe763",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"667b3f0e-4bad-4359-9848-b3109178ebea",
	'Label',
	'User_Visible: false',
	'',
	'Label',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("cd95c990-3d56-463f-a2a2-1bba9eb524c6",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_BATTR
	VALUES ("cd95c990-3d56-463f-a2a2-1bba9eb524c6",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("cd95c990-3d56-463f-a2a2-1bba9eb524c6",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"f56fb9bc-ea4b-45e3-a581-c9f010e44610",
	'InformalName',
	'Full Name: Informal Name',
	'',
	'InformalName',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("35975bff-fde9-48f9-bb07-65a400001811",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_BATTR
	VALUES ("35975bff-fde9-48f9-bb07-65a400001811",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ATTR
	VALUES ("35975bff-fde9-48f9-bb07-65a400001811",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"dfa4e611-5827-470c-9c6a-259aa82fe763",
	'SequenceNumb',
	'Full Name: Sequence Number',
	'',
	'SequenceNumb',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"1efcafbb-c79d-4ade-8ed4-a39d2679686c",
	0,
	"d4cb1c26-ff58-4bb2-a7f3-ecd7cb8f9cb5",
	"c83efff0-ba4f-4df8-af2a-54c522ee6032",
	"80e48825-23ed-42fa-b99e-36a13c2f37f9",
	"3966a321-400f-4323-b07a-039435d2f104",
	"f56fb9bc-ea4b-45e3-a581-c9f010e44610",
	"be118d58-4dbf-42eb-a7c5-581e9116a676",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Message',
	'Msg_ID',
	'R1018');
INSERT INTO R_RGO_PROXY
	VALUES ("e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"c83efff0-ba4f-4df8-af2a-54c522ee6032",
	"80e48825-23ed-42fa-b99e-36a13c2f37f9",
	'../Message.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("d4cb1c26-ff58-4bb2-a7f3-ecd7cb8f9cb5",
	"1efcafbb-c79d-4ade-8ed4-a39d2679686c",
	0,
	"c83efff0-ba4f-4df8-af2a-54c522ee6032",
	"3966a321-400f-4323-b07a-039435d2f104",
	'../Message.xtuml');
INSERT INTO O_RATTR
	VALUES ("f56fb9bc-ea4b-45e3-a581-c9f010e44610",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6c0ac341-1d88-4650-b3fe-2c344b920ed1",
	"6af35b2a-8145-4e12-9330-bfc209409bb6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("f56fb9bc-ea4b-45e3-a581-c9f010e44610",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	"00000000-0000-0000-0000-000000000000",
	'Msg_ID',
	'',
	'',
	'Msg_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_OIDA
	VALUES ("f56fb9bc-ea4b-45e3-a581-c9f010e44610",
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	0,
	'Msg_ID');
INSERT INTO O_ID
	VALUES (1,
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO O_ID
	VALUES (2,
	"e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5");
INSERT INTO PE_PE
	VALUES ("e437ca44-a0e3-4d6d-8d19-f8f17ef7c3d5",
	1,
	"9e35749c-1d54-4f67-99a2-2ffc0008bb08",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("9e35749c-1d54-4f67-99a2-2ffc0008bb08",
	"00000000-0000-0000-0000-000000000000",
	"2f3ea6a7-20e9-405c-b68c-7fba041e7daf",
	'Message',
	'// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE',
	1000,
	'../Message.xtuml');
